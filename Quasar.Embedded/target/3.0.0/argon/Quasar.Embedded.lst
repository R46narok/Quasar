
d:/Development/Projects/Quasar/Quasar.Embedded/target/3.0.0/argon/Quasar.Embedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004a24  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8a40  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000478  2003e16c  000d8a44  0001e16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000020c  2003e5e4  2003e5e4  0002e5e4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8ebc  000d8ebc  00028ebc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8ee4  000d8ee4  00028ee4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001f081b  00000000  00000000  00028ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001b971  00000000  00000000  00219703  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003804e  00000000  00000000  00235074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002f80  00000000  00000000  0026d0c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009800  00000000  00000000  00270042  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003f958  00000000  00000000  00279842  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000479b5  00000000  00000000  002b919a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012b031  00000000  00000000  00300b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000085e0  00000000  00000000  0042bb80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fdf1 	bl	d7c14 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fe13 	bl	d7c64 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e16c 	.word	0x2003e16c
   d4048:	000d8a44 	.word	0x000d8a44
   d404c:	2003e5e4 	.word	0x2003e5e4
   d4050:	2003e5e4 	.word	0x2003e5e4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f003 f8c9 	bl	d71f4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d8a0c 	.word	0x000d8a0c
   d407c:	000d8a40 	.word	0x000d8a40

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b828 	b.w	d40d4 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f835 	bl	d40f4 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f003 b873 	b.w	d7178 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f001 bc91 	b.w	d59b8 <malloc>

000d4096 <_Znaj>:
   d4096:	f001 bc8f 	b.w	d59b8 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 bc95 	b.w	d59c8 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f001 fbe2 	bl	d5870 <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d545d 	.word	0x000d545d

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40c4:	b510      	push	{r4, lr}
   d40c6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40c8:	6800      	ldr	r0, [r0, #0]
   d40ca:	b108      	cbz	r0, d40d0 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40cc:	f001 fc7c 	bl	d59c8 <free>
class SystemClass {
   d40d0:	4620      	mov	r0, r4
   d40d2:	bd10      	pop	{r4, pc}

000d40d4 <setup>:
   d40d4:	b508      	push	{r3, lr}
   d40d6:	f003 f993 	bl	d7400 <_Z16_fetch_usbserialv>
   d40da:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40de:	f003 f983 	bl	d73e8 <_ZN9USBSerial5beginEl>
   d40e2:	2001      	movs	r0, #1
   d40e4:	f003 f807 	bl	d70f6 <_ZN8RGBClass7controlEb>
   d40e8:	f000 f9fc 	bl	d44e4 <_ZN6Quasar11InitDisplayEv>
   d40ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d40f0:	f000 bb96 	b.w	d4820 <_ZN6Quasar7InitBleEv>

000d40f4 <loop>:
   d40f4:	f000 ba04 	b.w	d4500 <_ZN6Quasar14PresentDisplayEv>

000d40f8 <_GLOBAL__sub_I_SystemMode>:
   d40f8:	b538      	push	{r3, r4, r5, lr}
              error_(SYSTEM_ERROR_NONE) {
   d40fa:	4c0a      	ldr	r4, [pc, #40]	; (d4124 <_GLOBAL__sub_I_SystemMode+0x2c>)
    SleepResult() {}
   d40fc:	4b0a      	ldr	r3, [pc, #40]	; (d4128 <_GLOBAL__sub_I_SystemMode+0x30>)
   d40fe:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4100:	2500      	movs	r5, #0
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4102:	2003      	movs	r0, #3
              error_(SYSTEM_ERROR_NONE) {
   d4104:	6025      	str	r5, [r4, #0]
   d4106:	80a5      	strh	r5, [r4, #4]
    SleepResult() {}
   d4108:	71a5      	strb	r5, [r4, #6]
        set_system_mode(mode);
   d410a:	f001 fbc1 	bl	d5890 <set_system_mode>
   d410e:	4907      	ldr	r1, [pc, #28]	; (d412c <_GLOBAL__sub_I_SystemMode+0x34>)
   d4110:	4a07      	ldr	r2, [pc, #28]	; (d4130 <_GLOBAL__sub_I_SystemMode+0x38>)
   d4112:	4620      	mov	r0, r4
   d4114:	f003 fc3e 	bl	d7994 <__aeabi_atexit>
   d4118:	4629      	mov	r1, r5
   d411a:	2001      	movs	r0, #1
   d411c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4120:	f001 bbc6 	b.w	d58b0 <system_thread_set_state>
   d4124:	2003e5e8 	.word	0x2003e5e8
   d4128:	ffff0000 	.word	0xffff0000
   d412c:	000d40c5 	.word	0x000d40c5
   d4130:	2003e5e4 	.word	0x2003e5e4

000d4134 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d4134:	6803      	ldr	r3, [r0, #0]
   d4136:	4718      	bx	r3

000d4138 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d4138:	2a01      	cmp	r2, #1
   d413a:	d003      	beq.n	d4144 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d413c:	2a02      	cmp	r2, #2
   d413e:	d003      	beq.n	d4148 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d4140:	2000      	movs	r0, #0
   d4142:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4144:	6001      	str	r1, [r0, #0]
	      break;
   d4146:	e7fb      	b.n	d4140 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4148:	680b      	ldr	r3, [r1, #0]
   d414a:	6003      	str	r3, [r0, #0]
	}
   d414c:	e7f8      	b.n	d4140 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	...

000d4150 <_ZN6Quasar11time_threadEv>:
    void TimeDisplayPresenter(Adafruit_SSD1306* pDisplay)
    {
        pDisplay->printf("%d:%d:%d", s_TimeData.Hours, s_TimeData.Minutes, s_TimeData.Seconds);
    }

    QUASAR_THREAD_INIT(time_thread, 
   d4150:	b508      	push	{r3, lr}
   d4152:	480f      	ldr	r0, [pc, #60]	; (d4190 <_ZN6Quasar11time_threadEv+0x40>)
   d4154:	4d0f      	ldr	r5, [pc, #60]	; (d4194 <_ZN6Quasar11time_threadEv+0x44>)
   d4156:	f000 f9f3 	bl	d4540 <_ZN6Quasar12SetPresenterEPFvP16Adafruit_SSD1306E>
   d415a:	462c      	mov	r4, r5
   d415c:	2600      	movs	r6, #0
   d415e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4162:	f002 ffbf 	bl	d70e4 <delay>
   d4166:	68ab      	ldr	r3, [r5, #8]
   d4168:	3301      	adds	r3, #1
   d416a:	2b3b      	cmp	r3, #59	; 0x3b
   d416c:	60ab      	str	r3, [r5, #8]
   d416e:	bfc2      	ittt	gt
   d4170:	686b      	ldrgt	r3, [r5, #4]
   d4172:	3301      	addgt	r3, #1
   d4174:	e9c5 3601 	strdgt	r3, r6, [r5, #4]
   d4178:	6863      	ldr	r3, [r4, #4]
   d417a:	2b3b      	cmp	r3, #59	; 0x3b
   d417c:	bfc2      	ittt	gt
   d417e:	6823      	ldrgt	r3, [r4, #0]
   d4180:	3301      	addgt	r3, #1
   d4182:	e9c4 3600 	strdgt	r3, r6, [r4]
   d4186:	6823      	ldr	r3, [r4, #0]
   d4188:	2b3b      	cmp	r3, #59	; 0x3b
   d418a:	dde8      	ble.n	d415e <_ZN6Quasar11time_threadEv+0xe>
   d418c:	6026      	str	r6, [r4, #0]
   d418e:	e7e6      	b.n	d415e <_ZN6Quasar11time_threadEv+0xe>
   d4190:	000d41e5 	.word	0x000d41e5
   d4194:	2003e5f4 	.word	0x2003e5f4

000d4198 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d4198:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d419a:	2301      	movs	r3, #1
   d419c:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d419e:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d41a0:	4604      	mov	r4, r0
        if (th->func) {
   d41a2:	b143      	cbz	r3, d41b6 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d41a4:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41a6:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d41a8:	2301      	movs	r3, #1
   d41aa:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d41ac:	2000      	movs	r0, #0
    }
   d41ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d41b2:	f001 ba1d 	b.w	d55f0 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d41b6:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d41b8:	2800      	cmp	r0, #0
   d41ba:	d0f5      	beq.n	d41a8 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d41bc:	6883      	ldr	r3, [r0, #8]
   d41be:	b90b      	cbnz	r3, d41c4 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d41c0:	f003 fbf3 	bl	d79aa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41c4:	68c3      	ldr	r3, [r0, #12]
   d41c6:	e7ee      	b.n	d41a6 <_ZN6Thread3runEPv+0xe>

000d41c8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d41c8:	b40e      	push	{r1, r2, r3}
   d41ca:	b503      	push	{r0, r1, lr}
   d41cc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d41ce:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d41d0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d41d4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d41d6:	f002 ff3c 	bl	d7052 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d41da:	b002      	add	sp, #8
   d41dc:	f85d eb04 	ldr.w	lr, [sp], #4
   d41e0:	b003      	add	sp, #12
   d41e2:	4770      	bx	lr

000d41e4 <_ZN6Quasar20TimeDisplayPresenterEP16Adafruit_SSD1306>:
    {
   d41e4:	b507      	push	{r0, r1, r2, lr}
        pDisplay->printf("%d:%d:%d", s_TimeData.Hours, s_TimeData.Minutes, s_TimeData.Seconds);
   d41e6:	4a05      	ldr	r2, [pc, #20]	; (d41fc <_ZN6Quasar20TimeDisplayPresenterEP16Adafruit_SSD1306+0x18>)
   d41e8:	4905      	ldr	r1, [pc, #20]	; (d4200 <_ZN6Quasar20TimeDisplayPresenterEP16Adafruit_SSD1306+0x1c>)
   d41ea:	6893      	ldr	r3, [r2, #8]
   d41ec:	9300      	str	r3, [sp, #0]
   d41ee:	e9d2 2300 	ldrd	r2, r3, [r2]
   d41f2:	f7ff ffe9 	bl	d41c8 <_ZN5Print6printfEPKcz>
    }
   d41f6:	b003      	add	sp, #12
   d41f8:	f85d fb04 	ldr.w	pc, [sp], #4
   d41fc:	2003e5f4 	.word	0x2003e5f4
   d4200:	000d7e18 	.word	0x000d7e18

000d4204 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4204:	b510      	push	{r4, lr}
      if (_M_manager)
   d4206:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4208:	4604      	mov	r4, r0
      if (_M_manager)
   d420a:	b113      	cbz	r3, d4212 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d420c:	2203      	movs	r2, #3
   d420e:	4601      	mov	r1, r0
   d4210:	4798      	blx	r3
    }
   d4212:	4620      	mov	r0, r4
   d4214:	bd10      	pop	{r4, pc}

000d4216 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
   d4216:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   d4218:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   d421a:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   d421c:	b135      	cbz	r5, d422c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   d421e:	4628      	mov	r0, r5
   d4220:	f7ff fff0 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d4224:	2110      	movs	r1, #16
   d4226:	4628      	mov	r0, r5
   d4228:	f003 fbb9 	bl	d799e <_ZdlPvj>
   d422c:	4620      	mov	r0, r4
   d422e:	2114      	movs	r1, #20
      }
   d4230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   d4234:	f003 bbb3 	b.w	d799e <_ZdlPvj>

000d4238 <_ZN6ThreadD1Ev>:
    ~Thread()
   d4238:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d423a:	6803      	ldr	r3, [r0, #0]
   d423c:	4604      	mov	r4, r0
        if (!isValid())
   d423e:	b19b      	cbz	r3, d4268 <_ZN6ThreadD1Ev+0x30>
        return isValid() && os_thread_is_current(d_->handle);
   d4240:	6858      	ldr	r0, [r3, #4]
   d4242:	f001 f99d 	bl	d5580 <os_thread_is_current>
   d4246:	b978      	cbnz	r0, d4268 <_ZN6ThreadD1Ev+0x30>
   d4248:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   d424a:	7c5a      	ldrb	r2, [r3, #17]
   d424c:	b912      	cbnz	r2, d4254 <_ZN6ThreadD1Ev+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   d424e:	6858      	ldr	r0, [r3, #4]
   d4250:	f001 f99e 	bl	d5590 <os_thread_join>
        os_thread_cleanup(d_->handle);
   d4254:	6823      	ldr	r3, [r4, #0]
   d4256:	6858      	ldr	r0, [r3, #4]
   d4258:	f001 f9a2 	bl	d55a0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d425c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d425e:	2300      	movs	r3, #0
   d4260:	6023      	str	r3, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d4262:	b108      	cbz	r0, d4268 <_ZN6ThreadD1Ev+0x30>
      operator()(_Tp* __ptr) const
   d4264:	f7ff ffd7 	bl	d4216 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
	if (__ptr != nullptr)
   d4268:	6820      	ldr	r0, [r4, #0]
   d426a:	b108      	cbz	r0, d4270 <_ZN6ThreadD1Ev+0x38>
      operator()(_Tp* __ptr) const
   d426c:	f7ff ffd3 	bl	d4216 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d4270:	4620      	mov	r0, r4
   d4272:	bd10      	pop	{r4, pc}

000d4274 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   d4274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4278:	4607      	mov	r7, r0
   d427a:	b085      	sub	sp, #20
   d427c:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   d427e:	2014      	movs	r0, #20
   d4280:	4929      	ldr	r1, [pc, #164]	; (d4328 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb4>)
    Thread(const char *name, wiring_thread_fn_t function,
   d4282:	4616      	mov	r6, r2
   d4284:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   d4286:	f003 fb8c 	bl	d79a2 <_ZnwjRKSt9nothrow_t>
   d428a:	4604      	mov	r4, r0
   d428c:	b130      	cbz	r0, d429c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x28>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d428e:	2200      	movs	r2, #0
            exited(false) {
   d4290:	e9c0 2200 	strd	r2, r2, [r0]
   d4294:	e9c0 2202 	strd	r2, r2, [r0, #8]
   d4298:	7402      	strb	r2, [r0, #16]
   d429a:	7442      	strb	r2, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d429c:	603c      	str	r4, [r7, #0]
        if (!d_) {
   d429e:	2c00      	cmp	r4, #0
   d42a0:	d038      	beq.n	d4314 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   d42a2:	4921      	ldr	r1, [pc, #132]	; (d4328 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb4>)
   d42a4:	2010      	movs	r0, #16
   d42a6:	f003 fb7c 	bl	d79a2 <_ZnwjRKSt9nothrow_t>
   d42aa:	4605      	mov	r5, r0
   d42ac:	b1a0      	cbz	r0, d42d8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x64>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42ae:	e896 0003 	ldmia.w	r6, {r0, r1}
   d42b2:	ab02      	add	r3, sp, #8
   d42b4:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d42b8:	e895 0003 	ldmia.w	r5, {r0, r1}
   d42bc:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d42c0:	e893 0003 	ldmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d42c4:	2200      	movs	r2, #0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42c6:	68b3      	ldr	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d42c8:	60ab      	str	r3, [r5, #8]
   d42ca:	e885 0003 	stmia.w	r5, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42ce:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d42d0:	60b2      	str	r2, [r6, #8]
   d42d2:	68ea      	ldr	r2, [r5, #12]
   d42d4:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d42d6:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42d8:	6826      	ldr	r6, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d42da:	6025      	str	r5, [r4, #0]
	if (__p != pointer())
   d42dc:	b136      	cbz	r6, d42ec <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x78>
   d42de:	4630      	mov	r0, r6
   d42e0:	f7ff ff90 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d42e4:	2110      	movs	r1, #16
   d42e6:	4630      	mov	r0, r6
   d42e8:	f003 fb59 	bl	d799e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d42ec:	6838      	ldr	r0, [r7, #0]
        if (!d_->wrapper) {
   d42ee:	6803      	ldr	r3, [r0, #0]
   d42f0:	b183      	cbz	r3, d4314 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d42f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d42f4:	464a      	mov	r2, r9
   d42f6:	e9cd 0300 	strd	r0, r3, [sp]
   d42fa:	4641      	mov	r1, r8
   d42fc:	4b0b      	ldr	r3, [pc, #44]	; (d432c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb8>)
   d42fe:	3004      	adds	r0, #4
   d4300:	f001 f936 	bl	d5570 <os_thread_create>
   d4304:	b930      	cbnz	r0, d4314 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
   d4306:	683b      	ldr	r3, [r7, #0]
        while (!d_->started) {
   d4308:	7c1b      	ldrb	r3, [r3, #16]
   d430a:	b94b      	cbnz	r3, d4320 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xac>
            HAL_Delay_Milliseconds(1);
   d430c:	2001      	movs	r0, #1
   d430e:	f001 f89d 	bl	d544c <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d4312:	e7f8      	b.n	d4306 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x92>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4314:	6838      	ldr	r0, [r7, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4316:	2300      	movs	r3, #0
   d4318:	603b      	str	r3, [r7, #0]
	if (__p != pointer())
   d431a:	b108      	cbz	r0, d4320 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xac>
      operator()(_Tp* __ptr) const
   d431c:	f7ff ff7b 	bl	d4216 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d4320:	4638      	mov	r0, r7
   d4322:	b005      	add	sp, #20
   d4324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4328:	000d8814 	.word	0x000d8814
   d432c:	000d4199 	.word	0x000d4199

000d4330 <_ZN6Quasar16TimeDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv>:
    {
   d4330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (pContext == Uuid::TimeCharacteristic)
   d4332:	4a0e      	ldr	r2, [pc, #56]	; (d436c <_ZN6Quasar16TimeDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv+0x3c>)
   d4334:	429a      	cmp	r2, r3
   d4336:	d116      	bne.n	d4366 <_ZN6Quasar16TimeDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv+0x36>
           std::memcpy(hours, pData, 2);
   d4338:	8803      	ldrh	r3, [r0, #0]
   d433a:	f8ad 3004 	strh.w	r3, [sp, #4]
           std::memcpy(minutes, pData + 3, 2);
   d433e:	f8b0 3003 	ldrh.w	r3, [r0, #3]
   d4342:	f8ad 3008 	strh.w	r3, [sp, #8]
           std::memcpy(seconds, pData + 6, 2);
   d4346:	88c3      	ldrh	r3, [r0, #6]
   d4348:	f8ad 300c 	strh.w	r3, [sp, #12]
           s_TimeData.Hours = atoi(hours);
   d434c:	a801      	add	r0, sp, #4
   d434e:	f003 fc41 	bl	d7bd4 <atoi>
   d4352:	4c07      	ldr	r4, [pc, #28]	; (d4370 <_ZN6Quasar16TimeDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv+0x40>)
   d4354:	6020      	str	r0, [r4, #0]
           s_TimeData.Minutes = atoi(minutes);
   d4356:	a802      	add	r0, sp, #8
   d4358:	f003 fc3c 	bl	d7bd4 <atoi>
   d435c:	6060      	str	r0, [r4, #4]
           s_TimeData.Seconds = atoi(seconds);
   d435e:	a803      	add	r0, sp, #12
   d4360:	f003 fc38 	bl	d7bd4 <atoi>
   d4364:	60a0      	str	r0, [r4, #8]
    }
   d4366:	b004      	add	sp, #16
   d4368:	bd10      	pop	{r4, pc}
   d436a:	bf00      	nop
   d436c:	000d7e21 	.word	0x000d7e21
   d4370:	2003e5f4 	.word	0x2003e5f4

000d4374 <_ZN6Quasar16DateDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv>:
    #pragma region Date characteristic

    void DateDataReceived(const uint8_t* pData, size_t len, const BlePeerDevice& peer, void* pContext)
    {

    }
   d4374:	4770      	bx	lr
	...

000d4378 <_GLOBAL__sub_I__ZN6Quasar16TimeDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv>:

    #pragma endregion
   d4378:	b510      	push	{r4, lr}
   d437a:	b086      	sub	sp, #24
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d437c:	4b0c      	ldr	r3, [pc, #48]	; (d43b0 <_GLOBAL__sub_I__ZN6Quasar16TimeDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv+0x38>)
   d437e:	9302      	str	r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d4380:	4b0c      	ldr	r3, [pc, #48]	; (d43b4 <_GLOBAL__sub_I__ZN6Quasar16TimeDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv+0x3c>)
    QUASAR_THREAD_INIT(time_thread, 
   d4382:	4c0d      	ldr	r4, [pc, #52]	; (d43b8 <_GLOBAL__sub_I__ZN6Quasar16TimeDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv+0x40>)
   d4384:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d4386:	4b0d      	ldr	r3, [pc, #52]	; (d43bc <_GLOBAL__sub_I__ZN6Quasar16TimeDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d4388:	9304      	str	r3, [sp, #16]
   d438a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d438e:	aa02      	add	r2, sp, #8
   d4390:	490b      	ldr	r1, [pc, #44]	; (d43c0 <_GLOBAL__sub_I__ZN6Quasar16TimeDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv+0x48>)
   d4392:	9300      	str	r3, [sp, #0]
   d4394:	4620      	mov	r0, r4
   d4396:	2302      	movs	r3, #2
   d4398:	f7ff ff6c 	bl	d4274 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
    class function<_Res(_ArgTypes...)>
   d439c:	a802      	add	r0, sp, #8
   d439e:	f7ff ff31 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
   d43a2:	4a08      	ldr	r2, [pc, #32]	; (d43c4 <_GLOBAL__sub_I__ZN6Quasar16TimeDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv+0x4c>)
   d43a4:	4908      	ldr	r1, [pc, #32]	; (d43c8 <_GLOBAL__sub_I__ZN6Quasar16TimeDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv+0x50>)
   d43a6:	4620      	mov	r0, r4
   d43a8:	f003 faf4 	bl	d7994 <__aeabi_atexit>
   d43ac:	b006      	add	sp, #24
   d43ae:	bd10      	pop	{r4, pc}
   d43b0:	000d4151 	.word	0x000d4151
   d43b4:	000d4135 	.word	0x000d4135
   d43b8:	2003e600 	.word	0x2003e600
   d43bc:	000d4139 	.word	0x000d4139
   d43c0:	000d7e46 	.word	0x000d7e46
   d43c4:	2003e5e4 	.word	0x2003e5e4
   d43c8:	000d4239 	.word	0x000d4239

000d43cc <_ZN6Quasar13GestureThreadEv>:
        bool Ring;
        bool Little;
    };

    void GestureThread() 
    {         
   d43cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d43d0:	b091      	sub	sp, #68	; 0x44
        auto characteristic = GetBleData()->GestureCharacteristic;
   d43d2:	a803      	add	r0, sp, #12
   d43d4:	f000 f91e 	bl	d4614 <_ZN6Quasar10GetBleDataEv>
   d43d8:	9903      	ldr	r1, [sp, #12]
   d43da:	a801      	add	r0, sp, #4
   d43dc:	315c      	adds	r1, #92	; 0x5c
   d43de:	f002 f940 	bl	d6662 <_ZN8particle17BleCharacteristicC1ERKS0_>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d43e2:	9c04      	ldr	r4, [sp, #16]
   d43e4:	b17c      	cbz	r4, d4406 <_ZN6Quasar13GestureThreadEv+0x3a>
      if (--_M_use_count == 0)
   d43e6:	6863      	ldr	r3, [r4, #4]
   d43e8:	3b01      	subs	r3, #1
   d43ea:	6063      	str	r3, [r4, #4]
   d43ec:	b95b      	cbnz	r3, d4406 <_ZN6Quasar13GestureThreadEv+0x3a>
          _M_dispose();
   d43ee:	6823      	ldr	r3, [r4, #0]
   d43f0:	4620      	mov	r0, r4
   d43f2:	689b      	ldr	r3, [r3, #8]
   d43f4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d43f6:	68a3      	ldr	r3, [r4, #8]
   d43f8:	3b01      	subs	r3, #1
   d43fa:	60a3      	str	r3, [r4, #8]
   d43fc:	b91b      	cbnz	r3, d4406 <_ZN6Quasar13GestureThreadEv+0x3a>
            _M_destroy();
   d43fe:	6823      	ldr	r3, [r4, #0]
   d4400:	4620      	mov	r0, r4
   d4402:	68db      	ldr	r3, [r3, #12]
   d4404:	4798      	blx	r3
                if (gestureId == 9) break;

                gestures[gestureId].Thumb = thumb;
                gestures[gestureId].Index = index; 

                Serial.printf("%d %d\n", thumb, index);
   d4406:	f8df 8080 	ldr.w	r8, [pc, #128]	; d4488 <_ZN6Quasar13GestureThreadEv+0xbc>
        bool gesturePending = false;
   d440a:	2700      	movs	r7, #0
                bool thumb = analogRead(QUASAR_THUMB) > QUASAR_SENSOR_FLEXED;
   d440c:	f640 14c4 	movw	r4, #2500	; 0x9c4
   d4410:	ad03      	add	r5, sp, #12
   d4412:	f04f 0a00 	mov.w	sl, #0
            while (gesturePending)
   d4416:	b37f      	cbz	r7, d4478 <_ZN6Quasar13GestureThreadEv+0xac>
                bool thumb = analogRead(QUASAR_THUMB) > QUASAR_SENSOR_FLEXED;
   d4418:	2012      	movs	r0, #18
   d441a:	f003 fa41 	bl	d78a0 <analogRead>
   d441e:	42a0      	cmp	r0, r4
   d4420:	4606      	mov	r6, r0
                bool index = analogRead(QUASAR_INDEX) > QUASAR_SENSOR_FLEXED;
   d4422:	f04f 0013 	mov.w	r0, #19
                bool thumb = analogRead(QUASAR_THUMB) > QUASAR_SENSOR_FLEXED;
   d4426:	bfd4      	ite	le
   d4428:	f04f 0900 	movle.w	r9, #0
   d442c:	f04f 0901 	movgt.w	r9, #1
                bool index = analogRead(QUASAR_INDEX) > QUASAR_SENSOR_FLEXED;
   d4430:	f003 fa36 	bl	d78a0 <analogRead>
   d4434:	42a0      	cmp	r0, r4
   d4436:	bfd4      	ite	le
   d4438:	f04f 0b00 	movle.w	fp, #0
   d443c:	f04f 0b01 	movgt.w	fp, #1
                if (thumb == false && index == false) break;
   d4440:	42a6      	cmp	r6, r4
   d4442:	f10a 0601 	add.w	r6, sl, #1
   d4446:	dc01      	bgt.n	d444c <_ZN6Quasar13GestureThreadEv+0x80>
   d4448:	42a0      	cmp	r0, r4
   d444a:	dd17      	ble.n	d447c <_ZN6Quasar13GestureThreadEv+0xb0>
                if (gestureId == 9) break;
   d444c:	f1ba 0f09 	cmp.w	sl, #9
   d4450:	f105 0505 	add.w	r5, r5, #5
   d4454:	d012      	beq.n	d447c <_ZN6Quasar13GestureThreadEv+0xb0>
                gestures[gestureId].Thumb = thumb;
   d4456:	f805 9c05 	strb.w	r9, [r5, #-5]
                gestures[gestureId].Index = index; 
   d445a:	f805 bc04 	strb.w	fp, [r5, #-4]
                Serial.printf("%d %d\n", thumb, index);
   d445e:	f002 ffcf 	bl	d7400 <_Z16_fetch_usbserialv>
   d4462:	465b      	mov	r3, fp
   d4464:	464a      	mov	r2, r9
   d4466:	4641      	mov	r1, r8
   d4468:	f7ff feae 	bl	d41c8 <_ZN5Print6printfEPKcz>

                gestureId++;
                
		        delay(500);
   d446c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
                gestureId++;
   d4470:	46b2      	mov	sl, r6
		        delay(500);
   d4472:	f002 fe37 	bl	d70e4 <delay>
            while (gesturePending)
   d4476:	e7ce      	b.n	d4416 <_ZN6Quasar13GestureThreadEv+0x4a>
   d4478:	2701      	movs	r7, #1
   d447a:	e7c9      	b.n	d4410 <_ZN6Quasar13GestureThreadEv+0x44>

        
            if (gesturePending)
	        {
		        gesturePending = false;
                SetGestureChar(gestures, sizeof(GestureData) * (gestureId + 1));
   d447c:	eb06 0186 	add.w	r1, r6, r6, lsl #2
   d4480:	a803      	add	r0, sp, #12
   d4482:	f000 f8d3 	bl	d462c <_ZN6Quasar14SetGestureCharEPvj>
   d4486:	e7c3      	b.n	d4410 <_ZN6Quasar13GestureThreadEv+0x44>
   d4488:	000d7e52 	.word	0x000d7e52

000d448c <_GLOBAL__sub_I__ZN6Quasar13GestureThreadEv>:

            gesturePending = true;
        }
    } 
    static Thread s_GestureThread("gesture_thread", GestureThread);
}
   d448c:	b510      	push	{r4, lr}
   d448e:	b086      	sub	sp, #24
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d4490:	4b0c      	ldr	r3, [pc, #48]	; (d44c4 <_GLOBAL__sub_I__ZN6Quasar13GestureThreadEv+0x38>)
   d4492:	9302      	str	r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d4494:	4b0c      	ldr	r3, [pc, #48]	; (d44c8 <_GLOBAL__sub_I__ZN6Quasar13GestureThreadEv+0x3c>)
    static Thread s_GestureThread("gesture_thread", GestureThread);
   d4496:	4c0d      	ldr	r4, [pc, #52]	; (d44cc <_GLOBAL__sub_I__ZN6Quasar13GestureThreadEv+0x40>)
   d4498:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d449a:	4b0d      	ldr	r3, [pc, #52]	; (d44d0 <_GLOBAL__sub_I__ZN6Quasar13GestureThreadEv+0x44>)
   d449c:	9304      	str	r3, [sp, #16]
   d449e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d44a2:	aa02      	add	r2, sp, #8
   d44a4:	490b      	ldr	r1, [pc, #44]	; (d44d4 <_GLOBAL__sub_I__ZN6Quasar13GestureThreadEv+0x48>)
   d44a6:	9300      	str	r3, [sp, #0]
   d44a8:	4620      	mov	r0, r4
   d44aa:	2302      	movs	r3, #2
   d44ac:	f7ff fee2 	bl	d4274 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
    class function<_Res(_ArgTypes...)>
   d44b0:	a802      	add	r0, sp, #8
   d44b2:	f7ff fea7 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
   d44b6:	4a08      	ldr	r2, [pc, #32]	; (d44d8 <_GLOBAL__sub_I__ZN6Quasar13GestureThreadEv+0x4c>)
   d44b8:	4908      	ldr	r1, [pc, #32]	; (d44dc <_GLOBAL__sub_I__ZN6Quasar13GestureThreadEv+0x50>)
   d44ba:	4620      	mov	r0, r4
   d44bc:	f003 fa6a 	bl	d7994 <__aeabi_atexit>
}
   d44c0:	b006      	add	sp, #24
   d44c2:	bd10      	pop	{r4, pc}
   d44c4:	000d43cd 	.word	0x000d43cd
   d44c8:	000d4135 	.word	0x000d4135
   d44cc:	2003e604 	.word	0x2003e604
   d44d0:	000d4139 	.word	0x000d4139
   d44d4:	000d7e59 	.word	0x000d7e59
   d44d8:	2003e5e4 	.word	0x2003e5e4
   d44dc:	000d4239 	.word	0x000d4239

000d44e0 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d44e0:	4770      	bx	lr
	...

000d44e4 <_ZN6Quasar11InitDisplayEv>:
{
    static Adafruit_SSD1306 sDisplay(QUASAR_OLED_RESET);
    static DisplayPresenter spPresenter = nullptr;

    void InitDisplay()
    {
   d44e4:	b508      	push	{r3, lr}
        sDisplay.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d44e6:	4805      	ldr	r0, [pc, #20]	; (d44fc <_ZN6Quasar11InitDisplayEv+0x18>)
   d44e8:	223c      	movs	r2, #60	; 0x3c
   d44ea:	2102      	movs	r1, #2
   d44ec:	f000 fcdc 	bl	d4ea8 <_ZN16Adafruit_SSD13065beginEhh>
        sDisplay.clearDisplay();
    }
   d44f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        sDisplay.clearDisplay();
   d44f4:	4801      	ldr	r0, [pc, #4]	; (d44fc <_ZN6Quasar11InitDisplayEv+0x18>)
   d44f6:	f000 bbef 	b.w	d4cd8 <_ZN16Adafruit_SSD130612clearDisplayEv>
   d44fa:	bf00      	nop
   d44fc:	2003e60c 	.word	0x2003e60c

000d4500 <_ZN6Quasar14PresentDisplayEv>:

    void PresentDisplay()
    {
   d4500:	b508      	push	{r3, lr}
        sDisplay.clearDisplay();
   d4502:	480d      	ldr	r0, [pc, #52]	; (d4538 <_ZN6Quasar14PresentDisplayEv+0x38>)
   d4504:	f000 fbe8 	bl	d4cd8 <_ZN16Adafruit_SSD130612clearDisplayEv>
        sDisplay.setTextSize(2);
   d4508:	480b      	ldr	r0, [pc, #44]	; (d4538 <_ZN6Quasar14PresentDisplayEv+0x38>)
   d450a:	2102      	movs	r1, #2
   d450c:	f000 ff4d 	bl	d53aa <_ZN12Adafruit_GFX11setTextSizeEh>
        sDisplay.setTextColor(WHITE);
   d4510:	4809      	ldr	r0, [pc, #36]	; (d4538 <_ZN6Quasar14PresentDisplayEv+0x38>)
   d4512:	2101      	movs	r1, #1
   d4514:	f000 ff4e 	bl	d53b4 <_ZN12Adafruit_GFX12setTextColorEt>
        sDisplay.setCursor(0, 0);
   d4518:	2200      	movs	r2, #0
   d451a:	4807      	ldr	r0, [pc, #28]	; (d4538 <_ZN6Quasar14PresentDisplayEv+0x38>)
   d451c:	4611      	mov	r1, r2
   d451e:	f000 ff41 	bl	d53a4 <_ZN12Adafruit_GFX9setCursorEss>

        // TODO: Display stuff here

        if (spPresenter != nullptr)
   d4522:	4b06      	ldr	r3, [pc, #24]	; (d453c <_ZN6Quasar14PresentDisplayEv+0x3c>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	b10b      	cbz	r3, d452c <_ZN6Quasar14PresentDisplayEv+0x2c>
        {
            spPresenter(&sDisplay);
   d4528:	4803      	ldr	r0, [pc, #12]	; (d4538 <_ZN6Quasar14PresentDisplayEv+0x38>)
   d452a:	4798      	blx	r3
        }

        sDisplay.display();
    }
   d452c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        sDisplay.display();
   d4530:	4801      	ldr	r0, [pc, #4]	; (d4538 <_ZN6Quasar14PresentDisplayEv+0x38>)
   d4532:	f000 bc49 	b.w	d4dc8 <_ZN16Adafruit_SSD13067displayEv>
   d4536:	bf00      	nop
   d4538:	2003e60c 	.word	0x2003e60c
   d453c:	2003e608 	.word	0x2003e608

000d4540 <_ZN6Quasar12SetPresenterEPFvP16Adafruit_SSD1306E>:

    void SetPresenter(DisplayPresenter pPresenter)
    {
        spPresenter = pPresenter;
   d4540:	4b01      	ldr	r3, [pc, #4]	; (d4548 <_ZN6Quasar12SetPresenterEPFvP16Adafruit_SSD1306E+0x8>)
   d4542:	6018      	str	r0, [r3, #0]
    }
   d4544:	4770      	bx	lr
   d4546:	bf00      	nop
   d4548:	2003e608 	.word	0x2003e608

000d454c <_ZN16Adafruit_SSD1306D0Ev>:
   d454c:	b510      	push	{r4, lr}
   d454e:	2124      	movs	r1, #36	; 0x24
   d4550:	4604      	mov	r4, r0
   d4552:	f003 fa24 	bl	d799e <_ZdlPvj>
   d4556:	4620      	mov	r0, r4
   d4558:	bd10      	pop	{r4, pc}
	...

000d455c <_GLOBAL__sub_I__ZN6Quasar11InitDisplayEv>:
   d455c:	b510      	push	{r4, lr}
    static Adafruit_SSD1306 sDisplay(QUASAR_OLED_RESET);
   d455e:	4c06      	ldr	r4, [pc, #24]	; (d4578 <_GLOBAL__sub_I__ZN6Quasar11InitDisplayEv+0x1c>)
   d4560:	2104      	movs	r1, #4
   d4562:	4620      	mov	r0, r4
   d4564:	f000 fba2 	bl	d4cac <_ZN16Adafruit_SSD1306C1Ea>
   d4568:	4620      	mov	r0, r4
   d456a:	4a04      	ldr	r2, [pc, #16]	; (d457c <_GLOBAL__sub_I__ZN6Quasar11InitDisplayEv+0x20>)
   d456c:	4904      	ldr	r1, [pc, #16]	; (d4580 <_GLOBAL__sub_I__ZN6Quasar11InitDisplayEv+0x24>)
   d456e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    static Adafruit_SSD1306 sDisplay(QUASAR_OLED_RESET);
   d4572:	f003 ba0f 	b.w	d7994 <__aeabi_atexit>
   d4576:	bf00      	nop
   d4578:	2003e60c 	.word	0x2003e60c
   d457c:	2003e5e4 	.word	0x2003e5e4
   d4580:	000d44e1 	.word	0x000d44e1

000d4584 <_ZNSt23_Sp_counted_ptr_inplaceIN6Quasar7BleDataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4584:	4770      	bx	lr

000d4586 <_ZNSt23_Sp_counted_ptr_inplaceIN6Quasar7BleDataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4586:	b510      	push	{r4, lr}
   d4588:	4604      	mov	r4, r0
{
    // Data recieved callbacks via BLE
    void TimeDataReceived(const uint8_t* pData, size_t len, const BlePeerDevice& peer, void* pContext);
    void DateDataReceived(const uint8_t* pData, size_t len, const BlePeerDevice& peer, void* pContext);

    struct BleData
   d458a:	3068      	adds	r0, #104	; 0x68
   d458c:	f002 f897 	bl	d66be <_ZN8particle17BleCharacteristicD1Ev>
   d4590:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d4594:	f002 f893 	bl	d66be <_ZN8particle17BleCharacteristicD1Ev>
   d4598:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d459c:	f002 f88f 	bl	d66be <_ZN8particle17BleCharacteristicD1Ev>
   d45a0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d45a4:	f002 f88b 	bl	d66be <_ZN8particle17BleCharacteristicD1Ev>
   d45a8:	f104 0020 	add.w	r0, r4, #32
      }
   d45ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d45b0:	f002 b885 	b.w	d66be <_ZN8particle17BleCharacteristicD1Ev>

000d45b4 <_ZNSt23_Sp_counted_ptr_inplaceIN6Quasar7BleDataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d45b4:	4b06      	ldr	r3, [pc, #24]	; (d45d0 <_ZNSt23_Sp_counted_ptr_inplaceIN6Quasar7BleDataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d45b6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d45b8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d45ba:	f100 040c 	add.w	r4, r0, #12
	    ||
   d45be:	d005      	beq.n	d45cc <_ZNSt23_Sp_counted_ptr_inplaceIN6Quasar7BleDataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d45c0:	4608      	mov	r0, r1
   d45c2:	f003 f9f5 	bl	d79b0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d45c6:	2800      	cmp	r0, #0
	return nullptr;
   d45c8:	bf08      	it	eq
   d45ca:	2400      	moveq	r4, #0
      }
   d45cc:	4620      	mov	r0, r4
   d45ce:	bd10      	pop	{r4, pc}
   d45d0:	000d7fb0 	.word	0x000d7fb0

000d45d4 <_ZNSt23_Sp_counted_ptr_inplaceIN6Quasar7BleDataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d45d4:	b510      	push	{r4, lr}
   d45d6:	2170      	movs	r1, #112	; 0x70
   d45d8:	4604      	mov	r4, r0
   d45da:	f003 f9e0 	bl	d799e <_ZdlPvj>
   d45de:	4620      	mov	r0, r4
   d45e0:	bd10      	pop	{r4, pc}

000d45e2 <_ZNSt23_Sp_counted_ptr_inplaceIN6Quasar7BleDataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d45e2:	f7ff bd5a 	b.w	d409a <_ZdlPv>

000d45e6 <_ZNSt10shared_ptrIN6Quasar7BleDataEED1Ev>:
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d45e6:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d45e8:	6844      	ldr	r4, [r0, #4]
   d45ea:	4605      	mov	r5, r0
   d45ec:	b17c      	cbz	r4, d460e <_ZNSt10shared_ptrIN6Quasar7BleDataEED1Ev+0x28>
      if (--_M_use_count == 0)
   d45ee:	6863      	ldr	r3, [r4, #4]
   d45f0:	3b01      	subs	r3, #1
   d45f2:	6063      	str	r3, [r4, #4]
   d45f4:	b95b      	cbnz	r3, d460e <_ZNSt10shared_ptrIN6Quasar7BleDataEED1Ev+0x28>
          _M_dispose();
   d45f6:	6823      	ldr	r3, [r4, #0]
   d45f8:	4620      	mov	r0, r4
   d45fa:	689b      	ldr	r3, [r3, #8]
   d45fc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d45fe:	68a3      	ldr	r3, [r4, #8]
   d4600:	3b01      	subs	r3, #1
   d4602:	60a3      	str	r3, [r4, #8]
   d4604:	b91b      	cbnz	r3, d460e <_ZNSt10shared_ptrIN6Quasar7BleDataEED1Ev+0x28>
            _M_destroy();
   d4606:	6823      	ldr	r3, [r4, #0]
   d4608:	4620      	mov	r0, r4
   d460a:	68db      	ldr	r3, [r3, #12]
   d460c:	4798      	blx	r3
   d460e:	4628      	mov	r0, r5
   d4610:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4614 <_ZN6Quasar10GetBleDataEv>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4614:	4b04      	ldr	r3, [pc, #16]	; (d4628 <_ZN6Quasar10GetBleDataEv+0x14>)
   d4616:	681a      	ldr	r2, [r3, #0]
   d4618:	6002      	str	r2, [r0, #0]
      : _M_pi(__r._M_pi)
   d461a:	685b      	ldr	r3, [r3, #4]
   d461c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   d461e:	b113      	cbz	r3, d4626 <_ZN6Quasar10GetBleDataEv+0x12>
    { ++_M_use_count; }
   d4620:	685a      	ldr	r2, [r3, #4]
   d4622:	3201      	adds	r2, #1
   d4624:	605a      	str	r2, [r3, #4]
    }

    SharedInstance<BleData> GetBleData()
    {
        return s_BleData;
    }
   d4626:	4770      	bx	lr
   d4628:	2003e630 	.word	0x2003e630

000d462c <_ZN6Quasar14SetGestureCharEPvj>:

    void SetGestureChar(void* pData, size_t size)
    {
   d462c:	b410      	push	{r4}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d462e:	4b05      	ldr	r3, [pc, #20]	; (d4644 <_ZN6Quasar14SetGestureCharEPvj+0x18>)
        s_BleData->GestureCharacteristic.setValue((uint8_t*) pData, size);
   d4630:	681c      	ldr	r4, [r3, #0]
    {
   d4632:	460a      	mov	r2, r1
        s_BleData->GestureCharacteristic.setValue((uint8_t*) pData, size);
   d4634:	2300      	movs	r3, #0
   d4636:	4601      	mov	r1, r0
   d4638:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    }
   d463c:	f85d 4b04 	ldr.w	r4, [sp], #4
        s_BleData->GestureCharacteristic.setValue((uint8_t*) pData, size);
   d4640:	f001 be66 	b.w	d6310 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   d4644:	2003e630 	.word	0x2003e630

000d4648 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4648:	b5f0      	push	{r4, r5, r6, r7, lr}
   d464a:	4616      	mov	r6, r2
   d464c:	b091      	sub	sp, #68	; 0x44
      : _M_ptr(0), _M_refcount()
   d464e:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d4650:	e9c0 2200 	strd	r2, r2, [r0]
   d4654:	4604      	mov	r4, r0
   d4656:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4658:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d465a:	4619      	mov	r1, r3
   d465c:	a806      	add	r0, sp, #24
   d465e:	f001 fdc7 	bl	d61f0 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d4662:	9916      	ldr	r1, [sp, #88]	; 0x58
   d4664:	4638      	mov	r0, r7
   d4666:	f001 fdc3 	bl	d61f0 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d466a:	7833      	ldrb	r3, [r6, #0]
   d466c:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4670:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d4672:	9302      	str	r3, [sp, #8]
   d4674:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d4676:	4620      	mov	r0, r4
   d4678:	e9cd 7300 	strd	r7, r3, [sp]
   d467c:	aa05      	add	r2, sp, #20
   d467e:	ab06      	add	r3, sp, #24
   d4680:	4629      	mov	r1, r5
   d4682:	f002 fa53 	bl	d6b2c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d4686:	4620      	mov	r0, r4
   d4688:	b011      	add	sp, #68	; 0x44
   d468a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d468c <_ZN8particle17BleCharacteristicC1IPKcNS_7BleUuidEEES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d468c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d468e:	4616      	mov	r6, r2
   d4690:	b091      	sub	sp, #68	; 0x44
      : _M_ptr(0), _M_refcount()
   d4692:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d4694:	e9c0 2200 	strd	r2, r2, [r0]
   d4698:	4604      	mov	r4, r0
   d469a:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   d469c:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d469e:	4619      	mov	r1, r3
   d46a0:	a806      	add	r0, sp, #24
   d46a2:	f001 fda5 	bl	d61f0 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d46a6:	9916      	ldr	r1, [sp, #88]	; 0x58
   d46a8:	4638      	mov	r0, r7
   d46aa:	f001 fcbb 	bl	d6024 <_ZN8particle7BleUuidC1ERKS0_>
   d46ae:	7833      	ldrb	r3, [r6, #0]
   d46b0:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d46b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d46b6:	9302      	str	r3, [sp, #8]
   d46b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d46ba:	4620      	mov	r0, r4
   d46bc:	e9cd 7300 	strd	r7, r3, [sp]
   d46c0:	aa05      	add	r2, sp, #20
   d46c2:	ab06      	add	r3, sp, #24
   d46c4:	4629      	mov	r1, r5
   d46c6:	f002 fa31 	bl	d6b2c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d46ca:	4620      	mov	r0, r4
   d46cc:	b011      	add	sp, #68	; 0x44
   d46ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d46d0 <_ZN6Quasar7BleDataC1Ev>:
        BleUuid GestureService;
        BleCharacteristic GestureCharacteristic;

        #pragma endregion

        BleData()
   d46d0:	b5f0      	push	{r4, r5, r6, r7, lr}
              GestureService(Uuid::GestureService),
              GestureCharacteristic("gesture", BleCharacteristicProperty::NOTIFY, Uuid::GestureCharacteristic, GestureService),

              DeviceInfoService(Uuid::DeviceInfoService),
              DeviceGenerationCharacteristic("generation", BleCharacteristicProperty::READ, Uuid::DeviceGenerationCharacteristic, DeviceInfoService),
              DeviceTypeCharacteristic("type", BleCharacteristicProperty::READ, Uuid::DeviceTypeCharacteristic, DeviceInfoService)
   d46d2:	4d33      	ldr	r5, [pc, #204]	; (d47a0 <_ZN6Quasar7BleDataC1Ev+0xd0>)
        BleData()
   d46d4:	b08b      	sub	sp, #44	; 0x2c
              DeviceTypeCharacteristic("type", BleCharacteristicProperty::READ, Uuid::DeviceTypeCharacteristic, DeviceInfoService)
   d46d6:	4629      	mov	r1, r5
        BleData()
   d46d8:	4604      	mov	r4, r0
              DeviceTypeCharacteristic("type", BleCharacteristicProperty::READ, Uuid::DeviceTypeCharacteristic, DeviceInfoService)
   d46da:	f001 fd89 	bl	d61f0 <_ZN8particle7BleUuidC1EPKc>
   d46de:	4a31      	ldr	r2, [pc, #196]	; (d47a4 <_ZN6Quasar7BleDataC1Ev+0xd4>)
   d46e0:	4b31      	ldr	r3, [pc, #196]	; (d47a8 <_ZN6Quasar7BleDataC1Ev+0xd8>)
   d46e2:	9302      	str	r3, [sp, #8]
   d46e4:	e9cd 5200 	strd	r5, r2, [sp]
    value_ = static_cast<ValueType>(value);
   d46e8:	2604      	movs	r6, #4
   d46ea:	aa05      	add	r2, sp, #20
   d46ec:	492f      	ldr	r1, [pc, #188]	; (d47ac <_ZN6Quasar7BleDataC1Ev+0xdc>)
   d46ee:	f88d 6014 	strb.w	r6, [sp, #20]
   d46f2:	f104 0014 	add.w	r0, r4, #20
   d46f6:	f7ff ffa7 	bl	d4648 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d46fa:	4a2d      	ldr	r2, [pc, #180]	; (d47b0 <_ZN6Quasar7BleDataC1Ev+0xe0>)
   d46fc:	4b2d      	ldr	r3, [pc, #180]	; (d47b4 <_ZN6Quasar7BleDataC1Ev+0xe4>)
   d46fe:	9302      	str	r3, [sp, #8]
   d4700:	e9cd 5200 	strd	r5, r2, [sp]
   d4704:	f88d 6014 	strb.w	r6, [sp, #20]
   d4708:	aa05      	add	r2, sp, #20
   d470a:	f104 0624 	add.w	r6, r4, #36	; 0x24
   d470e:	492a      	ldr	r1, [pc, #168]	; (d47b8 <_ZN6Quasar7BleDataC1Ev+0xe8>)
   d4710:	f104 001c 	add.w	r0, r4, #28
   d4714:	f7ff ff98 	bl	d4648 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d4718:	4928      	ldr	r1, [pc, #160]	; (d47bc <_ZN6Quasar7BleDataC1Ev+0xec>)
   d471a:	4630      	mov	r0, r6
   d471c:	f001 fd68 	bl	d61f0 <_ZN8particle7BleUuidC1EPKc>
   d4720:	2702      	movs	r7, #2
   d4722:	4631      	mov	r1, r6
   d4724:	a805      	add	r0, sp, #20
   d4726:	2500      	movs	r5, #0
   d4728:	f88d 7010 	strb.w	r7, [sp, #16]
   d472c:	f001 fc7a 	bl	d6024 <_ZN8particle7BleUuidC1ERKS0_>
   d4730:	ab05      	add	r3, sp, #20
   d4732:	aa04      	add	r2, sp, #16
   d4734:	9300      	str	r3, [sp, #0]
   d4736:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d473a:	4b21      	ldr	r3, [pc, #132]	; (d47c0 <_ZN6Quasar7BleDataC1Ev+0xf0>)
   d473c:	4921      	ldr	r1, [pc, #132]	; (d47c4 <_ZN6Quasar7BleDataC1Ev+0xf4>)
   d473e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4742:	f7ff ffa3 	bl	d468c <_ZN8particle17BleCharacteristicC1IPKcNS_7BleUuidEEES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4746:	4631      	mov	r1, r6
   d4748:	a805      	add	r0, sp, #20
   d474a:	f88d 7010 	strb.w	r7, [sp, #16]
   d474e:	f001 fc69 	bl	d6024 <_ZN8particle7BleUuidC1ERKS0_>
   d4752:	ab05      	add	r3, sp, #20
   d4754:	aa04      	add	r2, sp, #16
   d4756:	9300      	str	r3, [sp, #0]
   d4758:	f104 0648 	add.w	r6, r4, #72	; 0x48
   d475c:	4b1a      	ldr	r3, [pc, #104]	; (d47c8 <_ZN6Quasar7BleDataC1Ev+0xf8>)
   d475e:	491b      	ldr	r1, [pc, #108]	; (d47cc <_ZN6Quasar7BleDataC1Ev+0xfc>)
   d4760:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d4764:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d4768:	f7ff ff90 	bl	d468c <_ZN8particle17BleCharacteristicC1IPKcNS_7BleUuidEEES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d476c:	4918      	ldr	r1, [pc, #96]	; (d47d0 <_ZN6Quasar7BleDataC1Ev+0x100>)
   d476e:	4630      	mov	r0, r6
   d4770:	f001 fd3e 	bl	d61f0 <_ZN8particle7BleUuidC1EPKc>
   d4774:	2310      	movs	r3, #16
   d4776:	4631      	mov	r1, r6
   d4778:	a805      	add	r0, sp, #20
   d477a:	f88d 3010 	strb.w	r3, [sp, #16]
   d477e:	f001 fc51 	bl	d6024 <_ZN8particle7BleUuidC1ERKS0_>
   d4782:	ab05      	add	r3, sp, #20
   d4784:	9300      	str	r3, [sp, #0]
   d4786:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d478a:	4b12      	ldr	r3, [pc, #72]	; (d47d4 <_ZN6Quasar7BleDataC1Ev+0x104>)
   d478c:	4912      	ldr	r1, [pc, #72]	; (d47d8 <_ZN6Quasar7BleDataC1Ev+0x108>)
   d478e:	aa04      	add	r2, sp, #16
   d4790:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   d4794:	f7ff ff7a 	bl	d468c <_ZN8particle17BleCharacteristicC1IPKcNS_7BleUuidEEES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
        {
            
        }
   d4798:	4620      	mov	r0, r4
   d479a:	b00b      	add	sp, #44	; 0x2c
   d479c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d479e:	bf00      	nop
   d47a0:	000d7e68 	.word	0x000d7e68
   d47a4:	000d4331 	.word	0x000d4331
   d47a8:	000d7e21 	.word	0x000d7e21
   d47ac:	000d86fb 	.word	0x000d86fb
   d47b0:	000d4375 	.word	0x000d4375
   d47b4:	000d7e8d 	.word	0x000d7e8d
   d47b8:	000d7eb2 	.word	0x000d7eb2
   d47bc:	000d7eb7 	.word	0x000d7eb7
   d47c0:	000d7edc 	.word	0x000d7edc
   d47c4:	000d7f01 	.word	0x000d7f01
   d47c8:	000d7f0c 	.word	0x000d7f0c
   d47cc:	000d7f31 	.word	0x000d7f31
   d47d0:	000d7f36 	.word	0x000d7f36
   d47d4:	000d7f5b 	.word	0x000d7f5b
   d47d8:	000d7f80 	.word	0x000d7f80

000d47dc <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b>:
    size_t appendServiceUUID(T uuid, bool force = false) {
   d47dc:	b530      	push	{r4, r5, lr}
   d47de:	b089      	sub	sp, #36	; 0x24
   d47e0:	4604      	mov	r4, r0
        BleUuid tempUUID(uuid);
   d47e2:	a803      	add	r0, sp, #12
    size_t appendServiceUUID(T uuid, bool force = false) {
   d47e4:	4615      	mov	r5, r2
        BleUuid tempUUID(uuid);
   d47e6:	f001 fc1d 	bl	d6024 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d47ea:	a803      	add	r0, sp, #12
   d47ec:	f001 fc60 	bl	d60b0 <_ZNK8particle7BleUuid4typeEv>
   d47f0:	b970      	cbnz	r0, d4810 <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b+0x34>
            uint16_t uuid16 = tempUUID.shorted();
   d47f2:	a803      	add	r0, sp, #12
   d47f4:	f001 fc7b 	bl	d60ee <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d47f8:	9500      	str	r5, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d47fa:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d47fe:	2302      	movs	r3, #2
   d4800:	f10d 020a 	add.w	r2, sp, #10
   d4804:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d4806:	4620      	mov	r0, r4
   d4808:	f001 fcfe 	bl	d6208 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    }
   d480c:	b009      	add	sp, #36	; 0x24
   d480e:	bd30      	pop	{r4, r5, pc}
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d4810:	a803      	add	r0, sp, #12
   d4812:	f001 fc71 	bl	d60f8 <_ZNK8particle7BleUuid8rawBytesEv>
   d4816:	9500      	str	r5, [sp, #0]
   d4818:	4602      	mov	r2, r0
   d481a:	2310      	movs	r3, #16
   d481c:	2107      	movs	r1, #7
   d481e:	e7f2      	b.n	d4806 <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b+0x2a>

000d4820 <_ZN6Quasar7InitBleEv>:
    {
   d4820:	b510      	push	{r4, lr}
   d4822:	b08e      	sub	sp, #56	; 0x38
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4824:	4c33      	ldr	r4, [pc, #204]	; (d48f4 <_ZN6Quasar7InitBleEv+0xd4>)
        BLE.on();
   d4826:	f001 fe7b 	bl	d6520 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d482a:	f001 fec7 	bl	d65bc <_ZNK8particle14BleLocalDevice2onEv>
        BLE.addCharacteristic(s_BleData->TimeCharacteristic);
   d482e:	f001 fe77 	bl	d6520 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4832:	6822      	ldr	r2, [r4, #0]
   d4834:	4601      	mov	r1, r0
   d4836:	3214      	adds	r2, #20
   d4838:	a805      	add	r0, sp, #20
   d483a:	f002 fa99 	bl	d6d70 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d483e:	a805      	add	r0, sp, #20
   d4840:	f001 ff3d 	bl	d66be <_ZN8particle17BleCharacteristicD1Ev>
        BLE.addCharacteristic(s_BleData->DateCharacteristic);
   d4844:	f001 fe6c 	bl	d6520 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4848:	6822      	ldr	r2, [r4, #0]
   d484a:	4601      	mov	r1, r0
   d484c:	321c      	adds	r2, #28
   d484e:	a805      	add	r0, sp, #20
   d4850:	f002 fa8e 	bl	d6d70 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4854:	a805      	add	r0, sp, #20
   d4856:	f001 ff32 	bl	d66be <_ZN8particle17BleCharacteristicD1Ev>
        BLE.addCharacteristic(s_BleData->GestureCharacteristic);
   d485a:	f001 fe61 	bl	d6520 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d485e:	6822      	ldr	r2, [r4, #0]
   d4860:	4601      	mov	r1, r0
   d4862:	325c      	adds	r2, #92	; 0x5c
   d4864:	a805      	add	r0, sp, #20
   d4866:	f002 fa83 	bl	d6d70 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d486a:	a805      	add	r0, sp, #20
   d486c:	f001 ff27 	bl	d66be <_ZN8particle17BleCharacteristicD1Ev>
        BLE.addCharacteristic(s_BleData->DeviceGenerationCharacteristic);
   d4870:	f001 fe56 	bl	d6520 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4874:	6822      	ldr	r2, [r4, #0]
   d4876:	4601      	mov	r1, r0
   d4878:	3238      	adds	r2, #56	; 0x38
   d487a:	a805      	add	r0, sp, #20
   d487c:	f002 fa78 	bl	d6d70 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4880:	a805      	add	r0, sp, #20
   d4882:	f001 ff1c 	bl	d66be <_ZN8particle17BleCharacteristicD1Ev>
        BLE.addCharacteristic(s_BleData->DeviceTypeCharacteristic);
   d4886:	f001 fe4b 	bl	d6520 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d488a:	6822      	ldr	r2, [r4, #0]
   d488c:	4601      	mov	r1, r0
   d488e:	3240      	adds	r2, #64	; 0x40
   d4890:	a805      	add	r0, sp, #20
   d4892:	f002 fa6d 	bl	d6d70 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4896:	a805      	add	r0, sp, #20
   d4898:	f001 ff11 	bl	d66be <_ZN8particle17BleCharacteristicD1Ev>
        BleAdvertisingData advData;
   d489c:	a805      	add	r0, sp, #20
   d489e:	f001 fcbe 	bl	d621e <_ZN8particle18BleAdvertisingDataC1Ev>
        advData.appendLocalName("gen1qwatch");
   d48a2:	4915      	ldr	r1, [pc, #84]	; (d48f8 <_ZN6Quasar7InitBleEv+0xd8>)
   d48a4:	a805      	add	r0, sp, #20
   d48a6:	f001 fcd3 	bl	d6250 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
        advData.appendServiceUUID(s_BleData->DateAndTimeService);
   d48aa:	6821      	ldr	r1, [r4, #0]
   d48ac:	4668      	mov	r0, sp
   d48ae:	f001 fbb9 	bl	d6024 <_ZN8particle7BleUuidC1ERKS0_>
   d48b2:	2200      	movs	r2, #0
   d48b4:	4669      	mov	r1, sp
   d48b6:	a805      	add	r0, sp, #20
   d48b8:	f7ff ff90 	bl	d47dc <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b>
        advData.appendServiceUUID(s_BleData->GestureService);
   d48bc:	6821      	ldr	r1, [r4, #0]
   d48be:	4668      	mov	r0, sp
   d48c0:	3148      	adds	r1, #72	; 0x48
   d48c2:	f001 fbaf 	bl	d6024 <_ZN8particle7BleUuidC1ERKS0_>
   d48c6:	2200      	movs	r2, #0
   d48c8:	4669      	mov	r1, sp
   d48ca:	a805      	add	r0, sp, #20
   d48cc:	f7ff ff86 	bl	d47dc <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b>
        advData.appendServiceUUID(s_BleData->DeviceInfoService);
   d48d0:	6821      	ldr	r1, [r4, #0]
   d48d2:	4668      	mov	r0, sp
   d48d4:	3124      	adds	r1, #36	; 0x24
   d48d6:	f001 fba5 	bl	d6024 <_ZN8particle7BleUuidC1ERKS0_>
   d48da:	4669      	mov	r1, sp
   d48dc:	2200      	movs	r2, #0
   d48de:	a805      	add	r0, sp, #20
   d48e0:	f7ff ff7c 	bl	d47dc <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b>
        BLE.advertise(&advData);
   d48e4:	f001 fe1c 	bl	d6520 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d48e8:	2200      	movs	r2, #0
   d48ea:	a905      	add	r1, sp, #20
   d48ec:	f001 fe86 	bl	d65fc <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    }
   d48f0:	b00e      	add	sp, #56	; 0x38
   d48f2:	bd10      	pop	{r4, pc}
   d48f4:	2003e630 	.word	0x2003e630
   d48f8:	000d7f88 	.word	0x000d7f88

000d48fc <_GLOBAL__sub_I__ZN6Quasar7InitBleEv>:
   d48fc:	b570      	push	{r4, r5, r6, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d48fe:	4d0d      	ldr	r5, [pc, #52]	; (d4934 <_GLOBAL__sub_I__ZN6Quasar7InitBleEv+0x38>)
   d4900:	2300      	movs	r3, #0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4902:	2070      	movs	r0, #112	; 0x70
   d4904:	602b      	str	r3, [r5, #0]
   d4906:	f7ff fbc4 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d490a:	1e04      	subs	r4, r0, #0
   d490c:	f104 060c 	add.w	r6, r4, #12
   d4910:	d007      	beq.n	d4922 <_GLOBAL__sub_I__ZN6Quasar7InitBleEv+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   d4912:	2301      	movs	r3, #1
   d4914:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   d4918:	4b07      	ldr	r3, [pc, #28]	; (d4938 <_GLOBAL__sub_I__ZN6Quasar7InitBleEv+0x3c>)
   d491a:	6023      	str	r3, [r4, #0]
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d491c:	4630      	mov	r0, r6
   d491e:	f7ff fed7 	bl	d46d0 <_ZN6Quasar7BleDataC1Ev>
	  __p = __pi->_M_ptr();
   d4922:	e9c5 6400 	strd	r6, r4, [r5]
    static auto s_BleData = CreateSharedInstance<BleData>();
   d4926:	4a05      	ldr	r2, [pc, #20]	; (d493c <_GLOBAL__sub_I__ZN6Quasar7InitBleEv+0x40>)
   d4928:	4905      	ldr	r1, [pc, #20]	; (d4940 <_GLOBAL__sub_I__ZN6Quasar7InitBleEv+0x44>)
   d492a:	4802      	ldr	r0, [pc, #8]	; (d4934 <_GLOBAL__sub_I__ZN6Quasar7InitBleEv+0x38>)
   d492c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    static auto s_BleData = CreateSharedInstance<BleData>();
   d4930:	f003 b830 	b.w	d7994 <__aeabi_atexit>
   d4934:	2003e630 	.word	0x2003e630
   d4938:	000d7f9c 	.word	0x000d7f9c
   d493c:	2003e5e4 	.word	0x2003e5e4
   d4940:	000d45e7 	.word	0x000d45e7

000d4944 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4944:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4946:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4948:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   d494c:	2d02      	cmp	r5, #2
   d494e:	d067      	beq.n	d4a20 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xdc>
   d4950:	2d03      	cmp	r5, #3
   d4952:	f000 8097 	beq.w	d4a84 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x140>
   d4956:	2d01      	cmp	r5, #1
   d4958:	d16a      	bne.n	d4a30 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xec>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d495a:	8905      	ldrh	r5, [r0, #8]
   d495c:	43d2      	mvns	r2, r2
   d495e:	442a      	add	r2, r5
   d4960:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4962:	2a00      	cmp	r2, #0
   d4964:	db5b      	blt.n	d4a1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d4966:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d496a:	4295      	cmp	r5, r2
   d496c:	dd57      	ble.n	d4a1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d496e:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4970:	bfbe      	ittt	lt
   d4972:	185b      	addlt	r3, r3, r1
   d4974:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4976:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4978:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d497c:	18cd      	adds	r5, r1, r3
   d497e:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   d4980:	bfc4      	itt	gt
   d4982:	1a43      	subgt	r3, r0, r1
   d4984:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4986:	2b00      	cmp	r3, #0
   d4988:	dd49      	ble.n	d4a1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d498a:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   d498e:	f8df c11c 	ldr.w	ip, [pc, #284]	; d4aac <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>
   d4992:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4996:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   d499a:	b2db      	uxtb	r3, r3
  pBuf += x;
   d499c:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   d49a0:	d01a      	beq.n	d49d8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d49a2:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d49a6:	4e3f      	ldr	r6, [pc, #252]	; (d4aa4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x160>)
    mod = 8-mod;
   d49a8:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d49aa:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   d49ac:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   d49ae:	bf3f      	itttt	cc
   d49b0:	eba5 0e03 	subcc.w	lr, r5, r3
   d49b4:	26ff      	movcc	r6, #255	; 0xff
   d49b6:	fa46 f60e 	asrcc.w	r6, r6, lr
   d49ba:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
   d49bc:	f81c 6002 	ldrb.w	r6, [ip, r2]
   d49c0:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d49c2:	bf0c      	ite	eq
   d49c4:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   d49c6:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d49c8:	42ab      	cmp	r3, r5
   d49ca:	f80c 6002 	strb.w	r6, [ip, r2]
   d49ce:	d326      	bcc.n	d4a1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>

    h -= mod;
   d49d0:	3908      	subs	r1, #8
   d49d2:	440b      	add	r3, r1
   d49d4:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   d49d6:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d49d8:	2b07      	cmp	r3, #7
   d49da:	d917      	bls.n	d4a0c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xc8>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d49dc:	2c01      	cmp	r4, #1
   d49de:	bf0c      	ite	eq
   d49e0:	25ff      	moveq	r5, #255	; 0xff
   d49e2:	2500      	movne	r5, #0
   d49e4:	f100 0180 	add.w	r1, r0, #128	; 0x80
   d49e8:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d49ea:	3a08      	subs	r2, #8
   d49ec:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d49ee:	2a07      	cmp	r2, #7
      *pBuf = val;
   d49f0:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   d49f4:	f101 0180 	add.w	r1, r1, #128	; 0x80
   d49f8:	d8f7      	bhi.n	d49ea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xa6>
   d49fa:	f1a3 0208 	sub.w	r2, r3, #8
   d49fe:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4a02:	3201      	adds	r2, #1
   d4a04:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
   d4a08:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4a0c:	b13b      	cbz	r3, d4a1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4a0e:	4a26      	ldr	r2, [pc, #152]	; (d4aa8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
   d4a10:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
   d4a12:	7803      	ldrb	r3, [r0, #0]
   d4a14:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d4a16:	bf0c      	ite	eq
   d4a18:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d4a1a:	4393      	bicne	r3, r2
   d4a1c:	7003      	strb	r3, [r0, #0]
}
   d4a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   d4a20:	8945      	ldrh	r5, [r0, #10]
   d4a22:	43d2      	mvns	r2, r2
   d4a24:	442a      	add	r2, r5
      x -= (w-1);
   d4a26:	18cd      	adds	r5, r1, r3
   d4a28:	8901      	ldrh	r1, [r0, #8]
   d4a2a:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   d4a2c:	b212      	sxth	r2, r2
      x -= (w-1);
   d4a2e:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   d4a30:	2a00      	cmp	r2, #0
   d4a32:	dbf4      	blt.n	d4a1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d4a34:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   d4a38:	4295      	cmp	r5, r2
   d4a3a:	ddf0      	ble.n	d4a1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  if(x < 0) { 
   d4a3c:	2900      	cmp	r1, #0
    w += x;
   d4a3e:	bfbe      	ittt	lt
   d4a40:	185b      	addlt	r3, r3, r1
   d4a42:	b21b      	sxthlt	r3, r3
    x = 0;
   d4a44:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   d4a46:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   d4a4a:	18ce      	adds	r6, r1, r3
   d4a4c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4a4e:	bfc4      	itt	gt
   d4a50:	1a6b      	subgt	r3, r5, r1
   d4a52:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   d4a54:	2b00      	cmp	r3, #0
   d4a56:	dde2      	ble.n	d4a1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4a58:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   d4a5a:	2580      	movs	r5, #128	; 0x80
   d4a5c:	fb10 1105 	smlabb	r1, r0, r5, r1
   d4a60:	4812      	ldr	r0, [pc, #72]	; (d4aac <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4a62:	4408      	add	r0, r1
  register uint8_t mask = 1 << (y&7);
   d4a64:	f002 0107 	and.w	r1, r2, #7
   d4a68:	2201      	movs	r2, #1
   d4a6a:	408a      	lsls	r2, r1
  if(color == WHITE) { 
   d4a6c:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   d4a6e:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   d4a70:	4403      	add	r3, r0
   d4a72:	d10c      	bne.n	d4a8e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14a>
    while(w--) { *pBuf++ |= mask; }
   d4a74:	4283      	cmp	r3, r0
   d4a76:	d0d2      	beq.n	d4a1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d4a78:	f810 4b01 	ldrb.w	r4, [r0], #1
   d4a7c:	4314      	orrs	r4, r2
   d4a7e:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4a82:	e7f7      	b.n	d4a74 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x130>
      y -= (w-1);
   d4a84:	18cd      	adds	r5, r1, r3
   d4a86:	8941      	ldrh	r1, [r0, #10]
   d4a88:	1b49      	subs	r1, r1, r5
   d4a8a:	b209      	sxth	r1, r1
      break;
   d4a8c:	e769      	b.n	d4962 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   d4a8e:	43d2      	mvns	r2, r2
   d4a90:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   d4a92:	4283      	cmp	r3, r0
   d4a94:	d0c3      	beq.n	d4a1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d4a96:	f810 4b01 	ldrb.w	r4, [r0], #1
   d4a9a:	4014      	ands	r4, r2
   d4a9c:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4aa0:	e7f7      	b.n	d4a92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d4aa2:	bf00      	nop
   d4aa4:	2003e174 	.word	0x2003e174
   d4aa8:	2003e16c 	.word	0x2003e16c
   d4aac:	2003e17c 	.word	0x2003e17c

000d4ab0 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   d4ab2:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4ab4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   d4ab8:	2d02      	cmp	r5, #2
   d4aba:	d034      	beq.n	d4b26 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   d4abc:	2d03      	cmp	r5, #3
   d4abe:	f000 8099 	beq.w	d4bf4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x144>
   d4ac2:	2d01      	cmp	r5, #1
   d4ac4:	d137      	bne.n	d4b36 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   d4ac6:	18d5      	adds	r5, r2, r3
   d4ac8:	8902      	ldrh	r2, [r0, #8]
   d4aca:	1b52      	subs	r2, r2, r5
   d4acc:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   d4ace:	2900      	cmp	r1, #0
   d4ad0:	f2c0 808f 	blt.w	d4bf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d4ad4:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   d4ad8:	428d      	cmp	r5, r1
   d4ada:	f340 808a 	ble.w	d4bf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  if(x < 0) { 
   d4ade:	2a00      	cmp	r2, #0
    w += x;
   d4ae0:	bfbe      	ittt	lt
   d4ae2:	189b      	addlt	r3, r3, r2
   d4ae4:	b21b      	sxthlt	r3, r3
    x = 0;
   d4ae6:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   d4ae8:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   d4aec:	18d6      	adds	r6, r2, r3
   d4aee:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4af0:	bfc4      	itt	gt
   d4af2:	1aab      	subgt	r3, r5, r2
   d4af4:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   d4af6:	2b00      	cmp	r3, #0
   d4af8:	dd7b      	ble.n	d4bf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4afa:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   d4afc:	2580      	movs	r5, #128	; 0x80
   d4afe:	fb10 2205 	smlabb	r2, r0, r5, r2
   d4b02:	4844      	ldr	r0, [pc, #272]	; (d4c14 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x164>)
   d4b04:	4410      	add	r0, r2
  register uint8_t mask = 1 << (y&7);
   d4b06:	f001 0207 	and.w	r2, r1, #7
   d4b0a:	2101      	movs	r1, #1
   d4b0c:	4091      	lsls	r1, r2
  if(color == WHITE) { 
   d4b0e:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   d4b10:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   d4b12:	4403      	add	r3, r0
   d4b14:	d173      	bne.n	d4bfe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   d4b16:	4298      	cmp	r0, r3
   d4b18:	d06b      	beq.n	d4bf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d4b1a:	f810 4b01 	ldrb.w	r4, [r0], #1
   d4b1e:	430c      	orrs	r4, r1
   d4b20:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4b24:	e7f7      	b.n	d4b16 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   d4b26:	8905      	ldrh	r5, [r0, #8]
   d4b28:	43c9      	mvns	r1, r1
   d4b2a:	4429      	add	r1, r5
      y -= (h-1);
   d4b2c:	18d5      	adds	r5, r2, r3
   d4b2e:	8942      	ldrh	r2, [r0, #10]
   d4b30:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   d4b32:	b209      	sxth	r1, r1
      y -= (h-1);
   d4b34:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   d4b36:	2900      	cmp	r1, #0
   d4b38:	db5b      	blt.n	d4bf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d4b3a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d4b3e:	428d      	cmp	r5, r1
   d4b40:	dd57      	ble.n	d4bf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  if(__y < 0) { 
   d4b42:	2a00      	cmp	r2, #0
    __h += __y;
   d4b44:	bfbe      	ittt	lt
   d4b46:	189b      	addlt	r3, r3, r2
   d4b48:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4b4a:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   d4b4c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4b50:	18d5      	adds	r5, r2, r3
   d4b52:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   d4b54:	bfc4      	itt	gt
   d4b56:	1a83      	subgt	r3, r0, r2
   d4b58:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   d4b5a:	2b00      	cmp	r3, #0
   d4b5c:	dd49      	ble.n	d4bf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  pBuf += x;
   d4b5e:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   d4b62:	f8df c0b0 	ldr.w	ip, [pc, #176]	; d4c14 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x164>
   d4b66:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   d4b6a:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   d4b6e:	b2db      	uxtb	r3, r3
  pBuf += x;
   d4b70:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   d4b74:	d01a      	beq.n	d4bac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   d4b76:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   d4b7a:	4e27      	ldr	r6, [pc, #156]	; (d4c18 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
    mod = 8-mod;
   d4b7c:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   d4b7e:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   d4b80:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   d4b82:	bf3f      	itttt	cc
   d4b84:	eba5 0e03 	subcc.w	lr, r5, r3
   d4b88:	26ff      	movcc	r6, #255	; 0xff
   d4b8a:	fa46 f60e 	asrcc.w	r6, r6, lr
   d4b8e:	4037      	andcc	r7, r6
    if(color == WHITE) { 
   d4b90:	f81c 6001 	ldrb.w	r6, [ip, r1]
   d4b94:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d4b96:	bf0c      	ite	eq
   d4b98:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   d4b9a:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   d4b9c:	42ab      	cmp	r3, r5
   d4b9e:	f80c 6001 	strb.w	r6, [ip, r1]
   d4ba2:	d326      	bcc.n	d4bf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
    h -= mod;
   d4ba4:	3a08      	subs	r2, #8
   d4ba6:	4413      	add	r3, r2
   d4ba8:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   d4baa:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   d4bac:	2b07      	cmp	r3, #7
   d4bae:	d917      	bls.n	d4be0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x130>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4bb0:	2c01      	cmp	r4, #1
   d4bb2:	bf0c      	ite	eq
   d4bb4:	25ff      	moveq	r5, #255	; 0xff
   d4bb6:	2500      	movne	r5, #0
   d4bb8:	f100 0180 	add.w	r1, r0, #128	; 0x80
   d4bbc:	461a      	mov	r2, r3
      h -= 8;
   d4bbe:	3a08      	subs	r2, #8
   d4bc0:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4bc2:	2a07      	cmp	r2, #7
      *pBuf = val;
   d4bc4:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   d4bc8:	f101 0180 	add.w	r1, r1, #128	; 0x80
   d4bcc:	d8f7      	bhi.n	d4bbe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x10e>
   d4bce:	f1a3 0208 	sub.w	r2, r3, #8
   d4bd2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4bd6:	3201      	adds	r2, #1
   d4bd8:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
   d4bdc:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   d4be0:	b13b      	cbz	r3, d4bf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
    register uint8_t mask = postmask[mod];
   d4be2:	4a0e      	ldr	r2, [pc, #56]	; (d4c1c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
   d4be4:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
   d4be6:	7803      	ldrb	r3, [r0, #0]
   d4be8:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d4bea:	bf0c      	ite	eq
   d4bec:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   d4bee:	4393      	bicne	r3, r2
   d4bf0:	7003      	strb	r3, [r0, #0]
}
   d4bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   d4bf4:	8945      	ldrh	r5, [r0, #10]
   d4bf6:	43c9      	mvns	r1, r1
   d4bf8:	4429      	add	r1, r5
   d4bfa:	b209      	sxth	r1, r1
      break;
   d4bfc:	e767      	b.n	d4ace <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   d4bfe:	43c9      	mvns	r1, r1
   d4c00:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   d4c02:	4298      	cmp	r0, r3
   d4c04:	d0f5      	beq.n	d4bf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d4c06:	f810 4b01 	ldrb.w	r4, [r0], #1
   d4c0a:	400c      	ands	r4, r1
   d4c0c:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4c10:	e7f7      	b.n	d4c02 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d4c12:	bf00      	nop
   d4c14:	2003e17c 	.word	0x2003e17c
   d4c18:	2003e174 	.word	0x2003e174
   d4c1c:	2003e16c 	.word	0x2003e16c

000d4c20 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4c22:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4c24:	4606      	mov	r6, r0
   d4c26:	4614      	mov	r4, r2
   d4c28:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4c2a:	db2d      	blt.n	d4c88 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d4c2c:	f000 fbc7 	bl	d53be <_ZN12Adafruit_GFX5widthEv>
   d4c30:	42a8      	cmp	r0, r5
   d4c32:	dd29      	ble.n	d4c88 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d4c34:	2c00      	cmp	r4, #0
   d4c36:	db27      	blt.n	d4c88 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d4c38:	4630      	mov	r0, r6
   d4c3a:	f000 fbc3 	bl	d53c4 <_ZN12Adafruit_GFX6heightEv>
   d4c3e:	42a0      	cmp	r0, r4
   d4c40:	dd22      	ble.n	d4c88 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   d4c42:	4630      	mov	r0, r6
   d4c44:	f000 fbb9 	bl	d53ba <_ZN12Adafruit_GFX11getRotationEv>
   d4c48:	2802      	cmp	r0, #2
   d4c4a:	d01e      	beq.n	d4c8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   d4c4c:	2803      	cmp	r0, #3
   d4c4e:	d025      	beq.n	d4c9c <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   d4c50:	2801      	cmp	r0, #1
   d4c52:	d104      	bne.n	d4c5e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   d4c54:	8932      	ldrh	r2, [r6, #8]
   d4c56:	43e4      	mvns	r4, r4
   d4c58:	4422      	add	r2, r4
    break;
   d4c5a:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   d4c5c:	b215      	sxth	r5, r2
  if (color == WHITE) 
   d4c5e:	2c00      	cmp	r4, #0
   d4c60:	4621      	mov	r1, r4
   d4c62:	bfb8      	it	lt
   d4c64:	1de1      	addlt	r1, r4, #7
   d4c66:	10c9      	asrs	r1, r1, #3
   d4c68:	2380      	movs	r3, #128	; 0x80
   d4c6a:	fb11 5503 	smlabb	r5, r1, r3, r5
   d4c6e:	490e      	ldr	r1, [pc, #56]	; (d4ca8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   d4c70:	2201      	movs	r2, #1
   d4c72:	f004 0407 	and.w	r4, r4, #7
   d4c76:	574b      	ldrsb	r3, [r1, r5]
   d4c78:	fa02 f404 	lsl.w	r4, r2, r4
   d4c7c:	b264      	sxtb	r4, r4
   d4c7e:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4c80:	bf0c      	ite	eq
   d4c82:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d4c84:	43a3      	bicne	r3, r4
   d4c86:	554b      	strb	r3, [r1, r5]
}
   d4c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   d4c8a:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d4c8c:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   d4c8e:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d4c90:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   d4c92:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   d4c94:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   d4c96:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   d4c98:	b224      	sxth	r4, r4
    break;
   d4c9a:	e7e0      	b.n	d4c5e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   d4c9c:	8973      	ldrh	r3, [r6, #10]
   d4c9e:	3b01      	subs	r3, #1
   d4ca0:	1b5b      	subs	r3, r3, r5
    break;
   d4ca2:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   d4ca4:	b21c      	sxth	r4, r3
    break;
   d4ca6:	e7da      	b.n	d4c5e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   d4ca8:	2003e17c 	.word	0x2003e17c

000d4cac <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4cac:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4cae:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4cb0:	4604      	mov	r4, r0
   d4cb2:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4cb4:	2180      	movs	r1, #128	; 0x80
   d4cb6:	f000 faa7 	bl	d5208 <_ZN12Adafruit_GFXC1Ess>
   d4cba:	4b06      	ldr	r3, [pc, #24]	; (d4cd4 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d4cbc:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d4cbe:	23ff      	movs	r3, #255	; 0xff
   d4cc0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d4cc4:	7763      	strb	r3, [r4, #29]
   d4cc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4cca:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   d4ccc:	f884 5020 	strb.w	r5, [r4, #32]
}
   d4cd0:	4620      	mov	r0, r4
   d4cd2:	bd38      	pop	{r3, r4, r5, pc}
   d4cd4:	000d7fc0 	.word	0x000d7fc0

000d4cd8 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d4cd8:	4802      	ldr	r0, [pc, #8]	; (d4ce4 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d4cda:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4cde:	2100      	movs	r1, #0
   d4ce0:	f002 bfc0 	b.w	d7c64 <memset>
   d4ce4:	2003e17c 	.word	0x2003e17c

000d4ce8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4ce8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4cea:	4c0b      	ldr	r4, [pc, #44]	; (d4d18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4cec:	7821      	ldrb	r1, [r4, #0]
   d4cee:	f3bf 8f5b 	dmb	ish
   d4cf2:	f011 0101 	ands.w	r1, r1, #1
   d4cf6:	d10b      	bne.n	d4d10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4cf8:	4620      	mov	r0, r4
   d4cfa:	9101      	str	r1, [sp, #4]
   d4cfc:	f7ff f9da 	bl	d40b4 <__cxa_guard_acquire>
   d4d00:	9901      	ldr	r1, [sp, #4]
   d4d02:	b128      	cbz	r0, d4d10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4d04:	4805      	ldr	r0, [pc, #20]	; (d4d1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4d06:	f000 fecb 	bl	d5aa0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4d0a:	4620      	mov	r0, r4
   d4d0c:	f7ff f9d7 	bl	d40be <__cxa_guard_release>
        return instance;
    }
   d4d10:	4802      	ldr	r0, [pc, #8]	; (d4d1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4d12:	b002      	add	sp, #8
   d4d14:	bd10      	pop	{r4, pc}
   d4d16:	bf00      	nop
   d4d18:	2003e638 	.word	0x2003e638
   d4d1c:	2003e63c 	.word	0x2003e63c

000d4d20 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   d4d20:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   d4d22:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   d4d26:	b143      	cbz	r3, d4d3a <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   d4d28:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4d2a:	f7ff ffdd 	bl	d4ce8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4d2e:	9901      	ldr	r1, [sp, #4]
}
   d4d30:	b003      	add	sp, #12
   d4d32:	f85d eb04 	ldr.w	lr, [sp], #4
   d4d36:	f000 bf63 	b.w	d5c00 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4d3a:	460b      	mov	r3, r1
   d4d3c:	7f81      	ldrb	r1, [r0, #30]
   d4d3e:	7f40      	ldrb	r0, [r0, #29]
   d4d40:	2201      	movs	r2, #1
}
   d4d42:	b003      	add	sp, #12
   d4d44:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4d48:	f002 bdc1 	b.w	d78ce <shiftOut>

000d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4d4c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d4d4e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4d52:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4d54:	4604      	mov	r4, r0
   d4d56:	460d      	mov	r5, r1
  if (sid != -1)
   d4d58:	d01d      	beq.n	d4d96 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   d4d5a:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d4d5e:	2101      	movs	r1, #1
   d4d60:	b280      	uxth	r0, r0
   d4d62:	f002 fd84 	bl	d786e <digitalWrite>
    digitalWrite(dc, LOW);
   d4d66:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4d6a:	2100      	movs	r1, #0
   d4d6c:	b280      	uxth	r0, r0
   d4d6e:	f002 fd7e 	bl	d786e <digitalWrite>
    digitalWrite(cs, LOW);
   d4d72:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4d76:	2100      	movs	r1, #0
   d4d78:	b280      	uxth	r0, r0
   d4d7a:	f002 fd78 	bl	d786e <digitalWrite>
    fastSPIwrite(c);
   d4d7e:	4629      	mov	r1, r5
   d4d80:	4620      	mov	r0, r4
   d4d82:	f7ff ffcd 	bl	d4d20 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   d4d86:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4d8a:	2101      	movs	r1, #1
}
   d4d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   d4d90:	b280      	uxth	r0, r0
   d4d92:	f002 bd6c 	b.w	d786e <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   d4d96:	f002 fdd5 	bl	d7944 <_Z19__fetch_global_Wirev>
   d4d9a:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4d9e:	f002 fc1f 	bl	d75e0 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d4da2:	f002 fdcf 	bl	d7944 <_Z19__fetch_global_Wirev>
   d4da6:	6803      	ldr	r3, [r0, #0]
   d4da8:	2100      	movs	r1, #0
   d4daa:	689b      	ldr	r3, [r3, #8]
   d4dac:	4798      	blx	r3
    Wire.write(c);
   d4dae:	f002 fdc9 	bl	d7944 <_Z19__fetch_global_Wirev>
   d4db2:	6803      	ldr	r3, [r0, #0]
   d4db4:	4629      	mov	r1, r5
   d4db6:	689b      	ldr	r3, [r3, #8]
   d4db8:	4798      	blx	r3
    Wire.endTransmission();
   d4dba:	f002 fdc3 	bl	d7944 <_Z19__fetch_global_Wirev>
}
   d4dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   d4dc2:	f002 bc14 	b.w	d75ee <_ZN7TwoWire15endTransmissionEv>
	...

000d4dc8 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d4dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d4dca:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   d4dcc:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d4dce:	f7ff ffbd 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d4dd2:	2100      	movs	r1, #0
   d4dd4:	4620      	mov	r0, r4
   d4dd6:	f7ff ffb9 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d4dda:	217f      	movs	r1, #127	; 0x7f
   d4ddc:	4620      	mov	r0, r4
   d4dde:	f7ff ffb5 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   d4de2:	2122      	movs	r1, #34	; 0x22
   d4de4:	4620      	mov	r0, r4
   d4de6:	f7ff ffb1 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d4dea:	2100      	movs	r1, #0
   d4dec:	4620      	mov	r0, r4
   d4dee:	f7ff ffad 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d4df2:	2107      	movs	r1, #7
   d4df4:	4620      	mov	r0, r4
   d4df6:	f7ff ffa9 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   d4dfa:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d4dfe:	4f29      	ldr	r7, [pc, #164]	; (d4ea4 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   d4e00:	3301      	adds	r3, #1
   d4e02:	d02a      	beq.n	d4e5a <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   d4e04:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4e08:	2101      	movs	r1, #1
   d4e0a:	b280      	uxth	r0, r0
   d4e0c:	f002 fd2f 	bl	d786e <digitalWrite>
    digitalWrite(dc, HIGH);
   d4e10:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4e14:	2101      	movs	r1, #1
   d4e16:	b280      	uxth	r0, r0
   d4e18:	f002 fd29 	bl	d786e <digitalWrite>
    digitalWrite(cs, LOW);
   d4e1c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4e20:	2100      	movs	r1, #0
   d4e22:	b280      	uxth	r0, r0
   d4e24:	f002 fd23 	bl	d786e <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4e28:	2001      	movs	r0, #1
   d4e2a:	f000 fb17 	bl	d545c <HAL_Delay_Microseconds>
   d4e2e:	f44f 6580 	mov.w	r5, #1024	; 0x400
      fastSPIwrite(buffer[i]);
   d4e32:	3d01      	subs	r5, #1
   d4e34:	f817 1b01 	ldrb.w	r1, [r7], #1
   d4e38:	4620      	mov	r0, r4
   d4e3a:	b2ad      	uxth	r5, r5
   d4e3c:	f7ff ff70 	bl	d4d20 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4e40:	2d00      	cmp	r5, #0
   d4e42:	d1f6      	bne.n	d4e32 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   d4e44:	2001      	movs	r0, #1
   d4e46:	f000 fb09 	bl	d545c <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   d4e4a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4e4e:	2101      	movs	r1, #1
}
   d4e50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   d4e54:	b280      	uxth	r0, r0
   d4e56:	f002 bd0a 	b.w	d786e <digitalWrite>
   d4e5a:	2610      	movs	r6, #16
      Wire.beginTransmission(_i2caddr);
   d4e5c:	f002 fd72 	bl	d7944 <_Z19__fetch_global_Wirev>
   d4e60:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4e64:	f002 fbbc 	bl	d75e0 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d4e68:	f002 fd6c 	bl	d7944 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4e6c:	6803      	ldr	r3, [r0, #0]
   d4e6e:	f1a6 0510 	sub.w	r5, r6, #16
   d4e72:	689b      	ldr	r3, [r3, #8]
   d4e74:	2140      	movs	r1, #64	; 0x40
   d4e76:	b2ad      	uxth	r5, r5
   d4e78:	4798      	blx	r3
		Wire.write(buffer[i]);
   d4e7a:	f002 fd63 	bl	d7944 <_Z19__fetch_global_Wirev>
   d4e7e:	6803      	ldr	r3, [r0, #0]
   d4e80:	5d79      	ldrb	r1, [r7, r5]
   d4e82:	689b      	ldr	r3, [r3, #8]
		i++;
   d4e84:	3501      	adds	r5, #1
   d4e86:	b2ad      	uxth	r5, r5
		Wire.write(buffer[i]);
   d4e88:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   d4e8a:	42ae      	cmp	r6, r5
   d4e8c:	d1f5      	bne.n	d4e7a <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   d4e8e:	f002 fd59 	bl	d7944 <_Z19__fetch_global_Wirev>
   d4e92:	f002 fbac 	bl	d75ee <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4e96:	f106 0310 	add.w	r3, r6, #16
   d4e9a:	b29e      	uxth	r6, r3
   d4e9c:	f5b6 6f82 	cmp.w	r6, #1040	; 0x410
   d4ea0:	d1dc      	bne.n	d4e5c <_ZN16Adafruit_SSD13067displayEv+0x94>
}
   d4ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4ea4:	2003e17c 	.word	0x2003e17c

000d4ea8 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d4ea8:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   d4eaa:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   d4eae:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   d4eb0:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d4eb2:	4604      	mov	r4, r0
   d4eb4:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   d4eb6:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   d4eb8:	f000 80c9 	beq.w	d504e <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   d4ebc:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d4ec0:	2101      	movs	r1, #1
   d4ec2:	b280      	uxth	r0, r0
   d4ec4:	f002 fcc2 	bl	d784c <pinMode>
    pinMode(cs, OUTPUT);
   d4ec8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4ecc:	2101      	movs	r1, #1
   d4ece:	b280      	uxth	r0, r0
   d4ed0:	f002 fcbc 	bl	d784c <pinMode>
    if (!hwSPI){
   d4ed4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4ed8:	2b00      	cmp	r3, #0
   d4eda:	f000 80a6 	beq.w	d502a <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   d4ede:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4ee2:	2101      	movs	r1, #1
   d4ee4:	b280      	uxth	r0, r0
   d4ee6:	f002 fcc2 	bl	d786e <digitalWrite>
        instance().setBitOrder(order);
   d4eea:	f7ff fefd 	bl	d4ce8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4eee:	2101      	movs	r1, #1
   d4ef0:	f000 fdf1 	bl	d5ad6 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   d4ef4:	f7ff fef8 	bl	d4ce8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4ef8:	2110      	movs	r1, #16
   d4efa:	f000 fe5b 	bl	d5bb4 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   d4efe:	f7ff fef3 	bl	d4ce8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4f02:	2100      	movs	r1, #0
   d4f04:	f000 fdfa 	bl	d5afc <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   d4f08:	f7ff feee 	bl	d4ce8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4f0c:	f000 fdd2 	bl	d5ab4 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   d4f10:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4f14:	2101      	movs	r1, #1
   d4f16:	b280      	uxth	r0, r0
   d4f18:	f002 fc98 	bl	d784c <pinMode>
  digitalWrite(rst, HIGH);
   d4f1c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4f20:	2101      	movs	r1, #1
   d4f22:	b280      	uxth	r0, r0
   d4f24:	f002 fca3 	bl	d786e <digitalWrite>
  delay(1);
   d4f28:	2001      	movs	r0, #1
   d4f2a:	f002 f8db 	bl	d70e4 <delay>
  digitalWrite(rst, LOW);
   d4f2e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4f32:	2100      	movs	r1, #0
   d4f34:	b280      	uxth	r0, r0
   d4f36:	f002 fc9a 	bl	d786e <digitalWrite>
  delay(10);
   d4f3a:	200a      	movs	r0, #10
   d4f3c:	f002 f8d2 	bl	d70e4 <delay>
  digitalWrite(rst, HIGH);
   d4f40:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4f44:	2101      	movs	r1, #1
   d4f46:	b280      	uxth	r0, r0
   d4f48:	f002 fc91 	bl	d786e <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d4f4c:	4620      	mov	r0, r4
   d4f4e:	21ae      	movs	r1, #174	; 0xae
   d4f50:	f7ff fefc 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d4f54:	4620      	mov	r0, r4
   d4f56:	21d5      	movs	r1, #213	; 0xd5
   d4f58:	f7ff fef8 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d4f5c:	4620      	mov	r0, r4
   d4f5e:	2180      	movs	r1, #128	; 0x80
   d4f60:	f7ff fef4 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d4f64:	4620      	mov	r0, r4
   d4f66:	21a8      	movs	r1, #168	; 0xa8
   d4f68:	f7ff fef0 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d4f6c:	4620      	mov	r0, r4
   d4f6e:	213f      	movs	r1, #63	; 0x3f
   d4f70:	f7ff feec 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d4f74:	4620      	mov	r0, r4
   d4f76:	21d3      	movs	r1, #211	; 0xd3
   d4f78:	f7ff fee8 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d4f7c:	4620      	mov	r0, r4
   d4f7e:	2100      	movs	r1, #0
   d4f80:	f7ff fee4 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d4f84:	4620      	mov	r0, r4
   d4f86:	2140      	movs	r1, #64	; 0x40
   d4f88:	f7ff fee0 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d4f8c:	218d      	movs	r1, #141	; 0x8d
   d4f8e:	4620      	mov	r0, r4
   d4f90:	f7ff fedc 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4f94:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d4f96:	bf0c      	ite	eq
   d4f98:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   d4f9a:	2114      	movne	r1, #20
   d4f9c:	4620      	mov	r0, r4
   d4f9e:	f7ff fed5 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d4fa2:	4620      	mov	r0, r4
   d4fa4:	2120      	movs	r1, #32
   d4fa6:	f7ff fed1 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d4faa:	4620      	mov	r0, r4
   d4fac:	2100      	movs	r1, #0
   d4fae:	f7ff fecd 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d4fb2:	4620      	mov	r0, r4
   d4fb4:	21a1      	movs	r1, #161	; 0xa1
   d4fb6:	f7ff fec9 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d4fba:	4620      	mov	r0, r4
   d4fbc:	21c8      	movs	r1, #200	; 0xc8
   d4fbe:	f7ff fec5 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d4fc2:	4620      	mov	r0, r4
   d4fc4:	21da      	movs	r1, #218	; 0xda
   d4fc6:	f7ff fec1 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d4fca:	4620      	mov	r0, r4
   d4fcc:	2112      	movs	r1, #18
   d4fce:	f7ff febd 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d4fd2:	2181      	movs	r1, #129	; 0x81
   d4fd4:	4620      	mov	r0, r4
   d4fd6:	f7ff feb9 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4fda:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d4fdc:	bf0c      	ite	eq
   d4fde:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   d4fe0:	21cf      	movne	r1, #207	; 0xcf
   d4fe2:	4620      	mov	r0, r4
   d4fe4:	f7ff feb2 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d4fe8:	21d9      	movs	r1, #217	; 0xd9
   d4fea:	4620      	mov	r0, r4
   d4fec:	f7ff feae 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4ff0:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d4ff2:	bf0c      	ite	eq
   d4ff4:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   d4ff6:	21f1      	movne	r1, #241	; 0xf1
   d4ff8:	4620      	mov	r0, r4
   d4ffa:	f7ff fea7 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d4ffe:	4620      	mov	r0, r4
   d5000:	21db      	movs	r1, #219	; 0xdb
   d5002:	f7ff fea3 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d5006:	4620      	mov	r0, r4
   d5008:	2140      	movs	r1, #64	; 0x40
   d500a:	f7ff fe9f 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d500e:	4620      	mov	r0, r4
   d5010:	21a4      	movs	r1, #164	; 0xa4
   d5012:	f7ff fe9b 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d5016:	4620      	mov	r0, r4
   d5018:	21a6      	movs	r1, #166	; 0xa6
   d501a:	f7ff fe97 	bl	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d501e:	4620      	mov	r0, r4
   d5020:	21af      	movs	r1, #175	; 0xaf
}
   d5022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5026:	f7ff be91 	b.w	d4d4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   d502a:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d502e:	2101      	movs	r1, #1
   d5030:	b280      	uxth	r0, r0
   d5032:	f002 fc0b 	bl	d784c <pinMode>
    	pinMode(sclk, OUTPUT);
   d5036:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d503a:	2101      	movs	r1, #1
   d503c:	b280      	uxth	r0, r0
   d503e:	f002 fc05 	bl	d784c <pinMode>
    if (hwSPI){
   d5042:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5046:	2b00      	cmp	r3, #0
   d5048:	f43f af62 	beq.w	d4f10 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   d504c:	e747      	b.n	d4ede <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   d504e:	f002 fc79 	bl	d7944 <_Z19__fetch_global_Wirev>
   d5052:	f002 fabb 	bl	d75cc <_ZN7TwoWire5beginEv>
   d5056:	e75b      	b.n	d4f10 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000d5058 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d5058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d505c:	b085      	sub	sp, #20
   d505e:	461f      	mov	r7, r3
   d5060:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d5064:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d5068:	eba8 0902 	sub.w	r9, r8, r2
   d506c:	eba7 0a01 	sub.w	sl, r7, r1
   d5070:	f1b9 0f00 	cmp.w	r9, #0
   d5074:	bfb8      	it	lt
   d5076:	f1c9 0900 	rsblt	r9, r9, #0
   d507a:	f1ba 0f00 	cmp.w	sl, #0
   d507e:	bfb8      	it	lt
   d5080:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   d5084:	45d1      	cmp	r9, sl
			    uint16_t color) {
   d5086:	4683      	mov	fp, r0
   d5088:	460c      	mov	r4, r1
   d508a:	4615      	mov	r5, r2
  if (steep) {
   d508c:	dd04      	ble.n	d5098 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   d508e:	463a      	mov	r2, r7
    swap(x0, y0);
   d5090:	462c      	mov	r4, r5
    swap(x1, y1);
   d5092:	4647      	mov	r7, r8
    swap(x0, y0);
   d5094:	460d      	mov	r5, r1
    swap(x1, y1);
   d5096:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   d5098:	42bc      	cmp	r4, r7
   d509a:	dd05      	ble.n	d50a8 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   d509c:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d509e:	4645      	mov	r5, r8
   d50a0:	4690      	mov	r8, r2
  if (x0 > x1) {
   d50a2:	4622      	mov	r2, r4
   d50a4:	463c      	mov	r4, r7
   d50a6:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d50a8:	1b3e      	subs	r6, r7, r4
   d50aa:	b2b2      	uxth	r2, r6
   d50ac:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   d50ae:	eba8 0205 	sub.w	r2, r8, r5
   d50b2:	2a00      	cmp	r2, #0
   d50b4:	bfb8      	it	lt
   d50b6:	4252      	neglt	r2, r2
   d50b8:	9201      	str	r2, [sp, #4]

  int16_t err = dx / 2;
   d50ba:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d50be:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d50c2:	4545      	cmp	r5, r8
   d50c4:	bfb4      	ite	lt
   d50c6:	2201      	movlt	r2, #1
   d50c8:	f04f 32ff 	movge.w	r2, #4294967295
  int16_t err = dx / 2;
   d50cc:	1076      	asrs	r6, r6, #1
    ystep = -1;
   d50ce:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   d50d0:	42bc      	cmp	r4, r7
   d50d2:	dc1c      	bgt.n	d510e <_ZN12Adafruit_GFX8drawLineEsssst+0xb6>
    if (steep) {
   d50d4:	f8db 2000 	ldr.w	r2, [fp]
      drawPixel(y0, x0, color);
   d50d8:	9303      	str	r3, [sp, #12]
    if (steep) {
   d50da:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   d50dc:	f8d2 8010 	ldr.w	r8, [r2, #16]
   d50e0:	bfc7      	ittee	gt
   d50e2:	4629      	movgt	r1, r5
   d50e4:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   d50e6:	462a      	movle	r2, r5
   d50e8:	4621      	movle	r1, r4
   d50ea:	4658      	mov	r0, fp
   d50ec:	47c0      	blx	r8
    }
    err -= dy;
   d50ee:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   d50f0:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   d50f2:	1ab6      	subs	r6, r6, r2
   d50f4:	b2b1      	uxth	r1, r6
   d50f6:	b236      	sxth	r6, r6
    if (err < 0) {
   d50f8:	2e00      	cmp	r6, #0
   d50fa:	da05      	bge.n	d5108 <_ZN12Adafruit_GFX8drawLineEsssst+0xb0>
      y0 += ystep;
   d50fc:	9a02      	ldr	r2, [sp, #8]
   d50fe:	4415      	add	r5, r2
      err += dx;
   d5100:	9a00      	ldr	r2, [sp, #0]
   d5102:	1856      	adds	r6, r2, r1
      y0 += ystep;
   d5104:	b22d      	sxth	r5, r5
      err += dx;
   d5106:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   d5108:	3401      	adds	r4, #1
   d510a:	b224      	sxth	r4, r4
   d510c:	e7e0      	b.n	d50d0 <_ZN12Adafruit_GFX8drawLineEsssst+0x78>
    }
  }
}
   d510e:	b005      	add	sp, #20
   d5110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5114 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5114:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5118:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d511c:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   d511e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d5122:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   d5126:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d5128:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   d512a:	4616      	mov	r6, r2
   d512c:	468a      	mov	sl, r1
   d512e:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   d5130:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d5132:	6823      	ldr	r3, [r4, #0]
   d5134:	f8cd 8000 	str.w	r8, [sp]
   d5138:	f109 32ff 	add.w	r2, r9, #4294967295
   d513c:	4432      	add	r2, r6
   d513e:	69df      	ldr	r7, [r3, #28]
   d5140:	4651      	mov	r1, sl
   d5142:	462b      	mov	r3, r5
   d5144:	4620      	mov	r0, r4
   d5146:	b212      	sxth	r2, r2
   d5148:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d514a:	6823      	ldr	r3, [r4, #0]
   d514c:	f8cd 8000 	str.w	r8, [sp]
   d5150:	699f      	ldr	r7, [r3, #24]
   d5152:	4632      	mov	r2, r6
   d5154:	464b      	mov	r3, r9
   d5156:	4651      	mov	r1, sl
   d5158:	4620      	mov	r0, r4
   d515a:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d515c:	1e6b      	subs	r3, r5, #1
   d515e:	eb03 010a 	add.w	r1, r3, sl
   d5162:	6823      	ldr	r3, [r4, #0]
   d5164:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d5168:	699d      	ldr	r5, [r3, #24]
   d516a:	4632      	mov	r2, r6
   d516c:	464b      	mov	r3, r9
   d516e:	b209      	sxth	r1, r1
   d5170:	4620      	mov	r0, r4
   d5172:	46ac      	mov	ip, r5
}
   d5174:	b002      	add	sp, #8
   d5176:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   d517a:	4760      	bx	ip

000d517c <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d517c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d517e:	3b01      	subs	r3, #1
   d5180:	4413      	add	r3, r2
   d5182:	6804      	ldr	r4, [r0, #0]
   d5184:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d5188:	9501      	str	r5, [sp, #4]
   d518a:	b21b      	sxth	r3, r3
   d518c:	9300      	str	r3, [sp, #0]
   d518e:	6964      	ldr	r4, [r4, #20]
   d5190:	460b      	mov	r3, r1
   d5192:	47a0      	blx	r4
}
   d5194:	b003      	add	sp, #12
   d5196:	bd30      	pop	{r4, r5, pc}

000d5198 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d5198:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d519a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d519e:	6804      	ldr	r4, [r0, #0]
   d51a0:	e9cd 2500 	strd	r2, r5, [sp]
   d51a4:	3b01      	subs	r3, #1
   d51a6:	440b      	add	r3, r1
   d51a8:	6964      	ldr	r4, [r4, #20]
   d51aa:	b21b      	sxth	r3, r3
   d51ac:	47a0      	blx	r4
}
   d51ae:	b003      	add	sp, #12
   d51b0:	bd30      	pop	{r4, r5, pc}

000d51b2 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d51b2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d51b6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d51ba:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d51be:	4605      	mov	r5, r0
   d51c0:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d51c2:	460c      	mov	r4, r1
   d51c4:	18ce      	adds	r6, r1, r3
   d51c6:	42b4      	cmp	r4, r6
   d51c8:	da0b      	bge.n	d51e2 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   d51ca:	682b      	ldr	r3, [r5, #0]
   d51cc:	f8cd 8000 	str.w	r8, [sp]
   d51d0:	699f      	ldr	r7, [r3, #24]
   d51d2:	4621      	mov	r1, r4
   d51d4:	464b      	mov	r3, r9
   d51d6:	4652      	mov	r2, sl
   d51d8:	4628      	mov	r0, r5
   d51da:	3401      	adds	r4, #1
   d51dc:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   d51de:	b224      	sxth	r4, r4
   d51e0:	e7f1      	b.n	d51c6 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   d51e2:	b002      	add	sp, #8
   d51e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d51e8 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d51e8:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d51ea:	6802      	ldr	r2, [r0, #0]
   d51ec:	9101      	str	r1, [sp, #4]
   d51ee:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d51f2:	9100      	str	r1, [sp, #0]
   d51f4:	6a54      	ldr	r4, [r2, #36]	; 0x24
   d51f6:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d51fa:	2200      	movs	r2, #0
   d51fc:	4611      	mov	r1, r2
   d51fe:	47a0      	blx	r4
}
   d5200:	b002      	add	sp, #8
   d5202:	bd10      	pop	{r4, pc}

000d5204 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   d5204:	4770      	bx	lr
	...

000d5208 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d5208:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d520a:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   d520c:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   d520e:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   d5212:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   d5214:	4d05      	ldr	r5, [pc, #20]	; (d522c <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   d5216:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   d5218:	2201      	movs	r2, #1
   d521a:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   d521c:	6005      	str	r5, [r0, #0]
   d521e:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   d5220:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   d5222:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   d5224:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   d5226:	7682      	strb	r2, [r0, #26]
}
   d5228:	bd30      	pop	{r4, r5, pc}
   d522a:	bf00      	nop
   d522c:	000d84f4 	.word	0x000d84f4

000d5230 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5234:	ed2d 8b02 	vpush	{d8}
   d5238:	b08b      	sub	sp, #44	; 0x2c
   d523a:	4606      	mov	r6, r0
   d523c:	9103      	str	r1, [sp, #12]
   d523e:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
   d5242:	9105      	str	r1, [sp, #20]
   d5244:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
   d5248:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   d524a:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d524e:	9803      	ldr	r0, [sp, #12]
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5250:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
  if((x >= _width)            || // Clip right
   d5254:	4281      	cmp	r1, r0
   d5256:	dd51      	ble.n	d52fc <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
   d5258:	f9b6 100e 	ldrsh.w	r1, [r6, #14]
   d525c:	4291      	cmp	r1, r2
   d525e:	dd4d      	ble.n	d52fc <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
     ((x + 6 * size - 1) < 0) || // Clip left
   d5260:	2106      	movs	r1, #6
   d5262:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   d5266:	2c00      	cmp	r4, #0
   d5268:	dd48      	ble.n	d52fc <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
     ((y + 8 * size - 1) < 0))   // Clip top
   d526a:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   d526e:	2c00      	cmp	r4, #0
   d5270:	dd44      	ble.n	d52fc <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
      line = pgm_read_byte(font+(c*5)+i);
   d5272:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5276:	9309      	str	r3, [sp, #36]	; 0x24
   d5278:	b293      	uxth	r3, r2
   d527a:	9107      	str	r1, [sp, #28]
  for (int8_t i=0; i<6; i++ ) {
   d527c:	2400      	movs	r4, #0
   d527e:	9304      	str	r3, [sp, #16]
    if (i == 5) 
   d5280:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   d5282:	bf1c      	itt	ne
   d5284:	4b2d      	ldrne	r3, [pc, #180]	; (d533c <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   d5286:	9a09      	ldrne	r2, [sp, #36]	; 0x24
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5288:	9f04      	ldr	r7, [sp, #16]
      line = pgm_read_byte(font+(c*5)+i);
   d528a:	bf16      	itet	ne
   d528c:	191b      	addne	r3, r3, r4
      line = 0x0;
   d528e:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   d5290:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   d5292:	9302      	str	r3, [sp, #8]
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5294:	9a03      	ldr	r2, [sp, #12]
   d5296:	b2ab      	uxth	r3, r5
   d5298:	9308      	str	r3, [sp, #32]
   d529a:	fb04 f305 	mul.w	r3, r4, r5
   d529e:	fa13 f382 	uxtah	r3, r3, r2
   d52a2:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   d52a4:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   d52a8:	ee08 3a10 	vmov	s16, r3
   d52ac:	f04f 0800 	mov.w	r8, #0
   d52b0:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   d52b4:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   d52b8:	9b02      	ldr	r3, [sp, #8]
   d52ba:	07db      	lsls	r3, r3, #31
   d52bc:	d52f      	bpl.n	d531e <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d52be:	2d01      	cmp	r5, #1
   d52c0:	6833      	ldr	r3, [r6, #0]
   d52c2:	d120      	bne.n	d5306 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, color);
   d52c4:	9a04      	ldr	r2, [sp, #16]
   d52c6:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d52ca:	9b05      	ldr	r3, [sp, #20]
   d52cc:	4442      	add	r2, r8
          drawPixel(x+i, y+j, bg);
   d52ce:	b212      	sxth	r2, r2
   d52d0:	4651      	mov	r1, sl
   d52d2:	4630      	mov	r0, r6
   d52d4:	47d8      	blx	fp
      line >>= 1;
   d52d6:	9b02      	ldr	r3, [sp, #8]
   d52d8:	085b      	lsrs	r3, r3, #1
   d52da:	9302      	str	r3, [sp, #8]
    for (int8_t j = 0; j<8; j++) {
   d52dc:	9b08      	ldr	r3, [sp, #32]
   d52de:	f108 0801 	add.w	r8, r8, #1
   d52e2:	441f      	add	r7, r3
   d52e4:	f1b8 0f08 	cmp.w	r8, #8
   d52e8:	b2bf      	uxth	r7, r7
   d52ea:	d1e5      	bne.n	d52b8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x88>
  for (int8_t i=0; i<6; i++ ) {
   d52ec:	9b07      	ldr	r3, [sp, #28]
   d52ee:	3b01      	subs	r3, #1
   d52f0:	3401      	adds	r4, #1
   d52f2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d52f6:	b264      	sxtb	r4, r4
   d52f8:	9307      	str	r3, [sp, #28]
   d52fa:	d1c1      	bne.n	d5280 <_ZN12Adafruit_GFX8drawCharEsshtth+0x50>
}
   d52fc:	b00b      	add	sp, #44	; 0x2c
   d52fe:	ecbd 8b02 	vpop	{d8}
   d5302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d5306:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5308:	e9cd 9200 	strd	r9, r2, [sp]
   d530c:	ee18 1a10 	vmov	r1, s16
   d5310:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d5314:	b23a      	sxth	r2, r7
   d5316:	464b      	mov	r3, r9
   d5318:	4630      	mov	r0, r6
   d531a:	47d8      	blx	fp
   d531c:	e7db      	b.n	d52d6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   d531e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   d5322:	4293      	cmp	r3, r2
   d5324:	d0d7      	beq.n	d52d6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   d5326:	2d01      	cmp	r5, #1
   d5328:	6833      	ldr	r3, [r6, #0]
   d532a:	d105      	bne.n	d5338 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   d532c:	9a04      	ldr	r2, [sp, #16]
   d532e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5332:	9b06      	ldr	r3, [sp, #24]
   d5334:	4442      	add	r2, r8
   d5336:	e7ca      	b.n	d52ce <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5338:	9a06      	ldr	r2, [sp, #24]
   d533a:	e7e5      	b.n	d5308 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
   d533c:	000d7ff0 	.word	0x000d7ff0

000d5340 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d5340:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   d5342:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   d5344:	b085      	sub	sp, #20
   d5346:	4604      	mov	r4, r0
  if (c == '\n') {
   d5348:	d107      	bne.n	d535a <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   d534a:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   d534c:	8a63      	ldrh	r3, [r4, #18]
   d534e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d5352:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d5354:	2300      	movs	r3, #0
   d5356:	8223      	strh	r3, [r4, #16]
   d5358:	e021      	b.n	d539e <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   d535a:	290d      	cmp	r1, #13
   d535c:	d01f      	beq.n	d539e <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d535e:	7e03      	ldrb	r3, [r0, #24]
   d5360:	9302      	str	r3, [sp, #8]
   d5362:	8ac3      	ldrh	r3, [r0, #22]
   d5364:	9301      	str	r3, [sp, #4]
   d5366:	8a83      	ldrh	r3, [r0, #20]
   d5368:	9300      	str	r3, [sp, #0]
   d536a:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d536e:	460b      	mov	r3, r1
   d5370:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d5374:	f7ff ff5c 	bl	d5230 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d5378:	7e21      	ldrb	r1, [r4, #24]
   d537a:	8a23      	ldrh	r3, [r4, #16]
   d537c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d5380:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d5384:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x += textsize*6;
   d5386:	b21b      	sxth	r3, r3
   d5388:	460a      	mov	r2, r1
   d538a:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d538c:	b138      	cbz	r0, d539e <_ZN12Adafruit_GFX5writeEh+0x5e>
   d538e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d5392:	f06f 0505 	mvn.w	r5, #5
   d5396:	fb05 0101 	mla	r1, r5, r1, r0
   d539a:	428b      	cmp	r3, r1
   d539c:	dcd6      	bgt.n	d534c <_ZN12Adafruit_GFX5writeEh+0xc>
}
   d539e:	2001      	movs	r0, #1
   d53a0:	b005      	add	sp, #20
   d53a2:	bd30      	pop	{r4, r5, pc}

000d53a4 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   d53a4:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d53a6:	8242      	strh	r2, [r0, #18]
}
   d53a8:	4770      	bx	lr

000d53aa <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   d53aa:	2901      	cmp	r1, #1
   d53ac:	bf38      	it	cc
   d53ae:	2101      	movcc	r1, #1
   d53b0:	7601      	strb	r1, [r0, #24]
}
   d53b2:	4770      	bx	lr

000d53b4 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   d53b4:	82c1      	strh	r1, [r0, #22]
   d53b6:	8281      	strh	r1, [r0, #20]
}
   d53b8:	4770      	bx	lr

000d53ba <_ZN12Adafruit_GFX11getRotationEv>:
}
   d53ba:	7e40      	ldrb	r0, [r0, #25]
   d53bc:	4770      	bx	lr

000d53be <_ZN12Adafruit_GFX5widthEv>:
}
   d53be:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d53c2:	4770      	bx	lr

000d53c4 <_ZN12Adafruit_GFX6heightEv>:
}
   d53c4:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d53c8:	4770      	bx	lr
	...

000d53cc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d53cc:	b508      	push	{r3, lr}
   d53ce:	4b02      	ldr	r3, [pc, #8]	; (d53d8 <netdb_freeaddrinfo+0xc>)
   d53d0:	681b      	ldr	r3, [r3, #0]
   d53d2:	689b      	ldr	r3, [r3, #8]
   d53d4:	9301      	str	r3, [sp, #4]
   d53d6:	bd08      	pop	{r3, pc}
   d53d8:	00030268 	.word	0x00030268

000d53dc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <netdb_getaddrinfo+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	68db      	ldr	r3, [r3, #12]
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	00030268 	.word	0x00030268

000d53ec <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <HAL_Validate_Pin_Function+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	685b      	ldr	r3, [r3, #4]
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	0003022c 	.word	0x0003022c

000d53fc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <HAL_Pin_Mode+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	689b      	ldr	r3, [r3, #8]
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	0003022c 	.word	0x0003022c

000d540c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b02      	ldr	r3, [pc, #8]	; (d5418 <HAL_Get_Pin_Mode+0xc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	68db      	ldr	r3, [r3, #12]
   d5414:	9301      	str	r3, [sp, #4]
   d5416:	bd08      	pop	{r3, pc}
   d5418:	0003022c 	.word	0x0003022c

000d541c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d541c:	b508      	push	{r3, lr}
   d541e:	4b02      	ldr	r3, [pc, #8]	; (d5428 <HAL_GPIO_Write+0xc>)
   d5420:	681b      	ldr	r3, [r3, #0]
   d5422:	691b      	ldr	r3, [r3, #16]
   d5424:	9301      	str	r3, [sp, #4]
   d5426:	bd08      	pop	{r3, pc}
   d5428:	0003022c 	.word	0x0003022c

000d542c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d542c:	b508      	push	{r3, lr}
   d542e:	4b02      	ldr	r3, [pc, #8]	; (d5438 <hal_adc_read+0xc>)
   d5430:	681b      	ldr	r3, [r3, #0]
   d5432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	bd08      	pop	{r3, pc}
   d5438:	0003022c 	.word	0x0003022c

000d543c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d543c:	b508      	push	{r3, lr}
   d543e:	4b02      	ldr	r3, [pc, #8]	; (d5448 <HAL_RNG_GetRandomNumber+0xc>)
   d5440:	681b      	ldr	r3, [r3, #0]
   d5442:	685b      	ldr	r3, [r3, #4]
   d5444:	9301      	str	r3, [sp, #4]
   d5446:	bd08      	pop	{r3, pc}
   d5448:	00030218 	.word	0x00030218

000d544c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d544c:	b508      	push	{r3, lr}
   d544e:	4b02      	ldr	r3, [pc, #8]	; (d5458 <HAL_Delay_Milliseconds+0xc>)
   d5450:	681b      	ldr	r3, [r3, #0]
   d5452:	689b      	ldr	r3, [r3, #8]
   d5454:	9301      	str	r3, [sp, #4]
   d5456:	bd08      	pop	{r3, pc}
   d5458:	00030218 	.word	0x00030218

000d545c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d545c:	b508      	push	{r3, lr}
   d545e:	4b02      	ldr	r3, [pc, #8]	; (d5468 <HAL_Delay_Microseconds+0xc>)
   d5460:	681b      	ldr	r3, [r3, #0]
   d5462:	68db      	ldr	r3, [r3, #12]
   d5464:	9301      	str	r3, [sp, #4]
   d5466:	bd08      	pop	{r3, pc}
   d5468:	00030218 	.word	0x00030218

000d546c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d546c:	b508      	push	{r3, lr}
   d546e:	4b02      	ldr	r3, [pc, #8]	; (d5478 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5470:	681b      	ldr	r3, [r3, #0]
   d5472:	695b      	ldr	r3, [r3, #20]
   d5474:	9301      	str	r3, [sp, #4]
   d5476:	bd08      	pop	{r3, pc}
   d5478:	00030218 	.word	0x00030218

000d547c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d547c:	b508      	push	{r3, lr}
   d547e:	4b02      	ldr	r3, [pc, #8]	; (d5488 <hal_ble_stack_init+0xc>)
   d5480:	681b      	ldr	r3, [r3, #0]
   d5482:	689b      	ldr	r3, [r3, #8]
   d5484:	9301      	str	r3, [sp, #4]
   d5486:	bd08      	pop	{r3, pc}
   d5488:	00030278 	.word	0x00030278

000d548c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d548c:	b508      	push	{r3, lr}
   d548e:	4b02      	ldr	r3, [pc, #8]	; (d5498 <hal_ble_gap_set_advertising_data+0xc>)
   d5490:	681b      	ldr	r3, [r3, #0]
   d5492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5494:	9301      	str	r3, [sp, #4]
   d5496:	bd08      	pop	{r3, pc}
   d5498:	00030278 	.word	0x00030278

000d549c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d549c:	b508      	push	{r3, lr}
   d549e:	4b02      	ldr	r3, [pc, #8]	; (d54a8 <hal_ble_gap_set_scan_response_data+0xc>)
   d54a0:	681b      	ldr	r3, [r3, #0]
   d54a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d54a4:	9301      	str	r3, [sp, #4]
   d54a6:	bd08      	pop	{r3, pc}
   d54a8:	00030278 	.word	0x00030278

000d54ac <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d54ac:	b508      	push	{r3, lr}
   d54ae:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <hal_ble_gap_start_advertising+0xc>)
   d54b0:	681b      	ldr	r3, [r3, #0]
   d54b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d54b4:	9301      	str	r3, [sp, #4]
   d54b6:	bd08      	pop	{r3, pc}
   d54b8:	00030278 	.word	0x00030278

000d54bc <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d54bc:	b508      	push	{r3, lr}
   d54be:	4b03      	ldr	r3, [pc, #12]	; (d54cc <hal_ble_gap_disconnect+0x10>)
   d54c0:	681b      	ldr	r3, [r3, #0]
   d54c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d54c6:	9301      	str	r3, [sp, #4]
   d54c8:	bd08      	pop	{r3, pc}
   d54ca:	0000      	.short	0x0000
   d54cc:	00030278 	.word	0x00030278

000d54d0 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d54d0:	b508      	push	{r3, lr}
   d54d2:	4b03      	ldr	r3, [pc, #12]	; (d54e0 <hal_ble_gatt_server_add_service+0x10>)
   d54d4:	681b      	ldr	r3, [r3, #0]
   d54d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d54da:	9301      	str	r3, [sp, #4]
   d54dc:	bd08      	pop	{r3, pc}
   d54de:	0000      	.short	0x0000
   d54e0:	00030278 	.word	0x00030278

000d54e4 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d54e4:	b508      	push	{r3, lr}
   d54e6:	4b03      	ldr	r3, [pc, #12]	; (d54f4 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d54e8:	681b      	ldr	r3, [r3, #0]
   d54ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d54ee:	9301      	str	r3, [sp, #4]
   d54f0:	bd08      	pop	{r3, pc}
   d54f2:	0000      	.short	0x0000
   d54f4:	00030278 	.word	0x00030278

000d54f8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d54f8:	b508      	push	{r3, lr}
   d54fa:	4b03      	ldr	r3, [pc, #12]	; (d5508 <hal_ble_gatt_client_write_with_response+0x10>)
   d54fc:	681b      	ldr	r3, [r3, #0]
   d54fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d5502:	9301      	str	r3, [sp, #4]
   d5504:	bd08      	pop	{r3, pc}
   d5506:	0000      	.short	0x0000
   d5508:	00030278 	.word	0x00030278

000d550c <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d550c:	b508      	push	{r3, lr}
   d550e:	4b03      	ldr	r3, [pc, #12]	; (d551c <hal_ble_gatt_client_write_without_response+0x10>)
   d5510:	681b      	ldr	r3, [r3, #0]
   d5512:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d5516:	9301      	str	r3, [sp, #4]
   d5518:	bd08      	pop	{r3, pc}
   d551a:	0000      	.short	0x0000
   d551c:	00030278 	.word	0x00030278

000d5520 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d5520:	b508      	push	{r3, lr}
   d5522:	4b03      	ldr	r3, [pc, #12]	; (d5530 <hal_ble_gatt_server_add_characteristic+0x10>)
   d5524:	681b      	ldr	r3, [r3, #0]
   d5526:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d552a:	9301      	str	r3, [sp, #4]
   d552c:	bd08      	pop	{r3, pc}
   d552e:	0000      	.short	0x0000
   d5530:	00030278 	.word	0x00030278

000d5534 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d5534:	b508      	push	{r3, lr}
   d5536:	4b03      	ldr	r3, [pc, #12]	; (d5544 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d5538:	681b      	ldr	r3, [r3, #0]
   d553a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d553e:	9301      	str	r3, [sp, #4]
   d5540:	bd08      	pop	{r3, pc}
   d5542:	0000      	.short	0x0000
   d5544:	00030278 	.word	0x00030278

000d5548 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5548:	b508      	push	{r3, lr}
   d554a:	4b03      	ldr	r3, [pc, #12]	; (d5558 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d554c:	681b      	ldr	r3, [r3, #0]
   d554e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d5552:	9301      	str	r3, [sp, #4]
   d5554:	bd08      	pop	{r3, pc}
   d5556:	0000      	.short	0x0000
   d5558:	00030278 	.word	0x00030278

000d555c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d555c:	b508      	push	{r3, lr}
   d555e:	4b03      	ldr	r3, [pc, #12]	; (d556c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d5560:	681b      	ldr	r3, [r3, #0]
   d5562:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d5566:	9301      	str	r3, [sp, #4]
   d5568:	bd08      	pop	{r3, pc}
   d556a:	0000      	.short	0x0000
   d556c:	00030278 	.word	0x00030278

000d5570 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d5570:	b508      	push	{r3, lr}
   d5572:	4b02      	ldr	r3, [pc, #8]	; (d557c <os_thread_create+0xc>)
   d5574:	681b      	ldr	r3, [r3, #0]
   d5576:	685b      	ldr	r3, [r3, #4]
   d5578:	9301      	str	r3, [sp, #4]
   d557a:	bd08      	pop	{r3, pc}
   d557c:	00030248 	.word	0x00030248

000d5580 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5580:	b508      	push	{r3, lr}
   d5582:	4b02      	ldr	r3, [pc, #8]	; (d558c <os_thread_is_current+0xc>)
   d5584:	681b      	ldr	r3, [r3, #0]
   d5586:	689b      	ldr	r3, [r3, #8]
   d5588:	9301      	str	r3, [sp, #4]
   d558a:	bd08      	pop	{r3, pc}
   d558c:	00030248 	.word	0x00030248

000d5590 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5590:	b508      	push	{r3, lr}
   d5592:	4b02      	ldr	r3, [pc, #8]	; (d559c <os_thread_join+0xc>)
   d5594:	681b      	ldr	r3, [r3, #0]
   d5596:	691b      	ldr	r3, [r3, #16]
   d5598:	9301      	str	r3, [sp, #4]
   d559a:	bd08      	pop	{r3, pc}
   d559c:	00030248 	.word	0x00030248

000d55a0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d55a0:	b508      	push	{r3, lr}
   d55a2:	4b02      	ldr	r3, [pc, #8]	; (d55ac <os_thread_cleanup+0xc>)
   d55a4:	681b      	ldr	r3, [r3, #0]
   d55a6:	695b      	ldr	r3, [r3, #20]
   d55a8:	9301      	str	r3, [sp, #4]
   d55aa:	bd08      	pop	{r3, pc}
   d55ac:	00030248 	.word	0x00030248

000d55b0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d55b0:	b508      	push	{r3, lr}
   d55b2:	4b02      	ldr	r3, [pc, #8]	; (d55bc <os_mutex_recursive_create+0xc>)
   d55b4:	681b      	ldr	r3, [r3, #0]
   d55b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d55b8:	9301      	str	r3, [sp, #4]
   d55ba:	bd08      	pop	{r3, pc}
   d55bc:	00030248 	.word	0x00030248

000d55c0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d55c0:	b508      	push	{r3, lr}
   d55c2:	4b02      	ldr	r3, [pc, #8]	; (d55cc <os_mutex_recursive_destroy+0xc>)
   d55c4:	681b      	ldr	r3, [r3, #0]
   d55c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d55c8:	9301      	str	r3, [sp, #4]
   d55ca:	bd08      	pop	{r3, pc}
   d55cc:	00030248 	.word	0x00030248

000d55d0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d55d0:	b508      	push	{r3, lr}
   d55d2:	4b02      	ldr	r3, [pc, #8]	; (d55dc <os_mutex_recursive_lock+0xc>)
   d55d4:	681b      	ldr	r3, [r3, #0]
   d55d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d55d8:	9301      	str	r3, [sp, #4]
   d55da:	bd08      	pop	{r3, pc}
   d55dc:	00030248 	.word	0x00030248

000d55e0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d55e0:	b508      	push	{r3, lr}
   d55e2:	4b02      	ldr	r3, [pc, #8]	; (d55ec <os_mutex_recursive_unlock+0xc>)
   d55e4:	681b      	ldr	r3, [r3, #0]
   d55e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d55e8:	9301      	str	r3, [sp, #4]
   d55ea:	bd08      	pop	{r3, pc}
   d55ec:	00030248 	.word	0x00030248

000d55f0 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d55f0:	b508      	push	{r3, lr}
   d55f2:	4b02      	ldr	r3, [pc, #8]	; (d55fc <os_thread_exit+0xc>)
   d55f4:	681b      	ldr	r3, [r3, #0]
   d55f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d55f8:	9301      	str	r3, [sp, #4]
   d55fa:	bd08      	pop	{r3, pc}
   d55fc:	00030248 	.word	0x00030248

000d5600 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5600:	b508      	push	{r3, lr}
   d5602:	4b02      	ldr	r3, [pc, #8]	; (d560c <inet_inet_ntop+0xc>)
   d5604:	681b      	ldr	r3, [r3, #0]
   d5606:	695b      	ldr	r3, [r3, #20]
   d5608:	9301      	str	r3, [sp, #4]
   d560a:	bd08      	pop	{r3, pc}
   d560c:	00030264 	.word	0x00030264

000d5610 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5610:	b508      	push	{r3, lr}
   d5612:	4b02      	ldr	r3, [pc, #8]	; (d561c <hal_usart_init+0xc>)
   d5614:	681b      	ldr	r3, [r3, #0]
   d5616:	681b      	ldr	r3, [r3, #0]
   d5618:	9301      	str	r3, [sp, #4]
   d561a:	bd08      	pop	{r3, pc}
   d561c:	0003023c 	.word	0x0003023c

000d5620 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5620:	b508      	push	{r3, lr}
   d5622:	4b02      	ldr	r3, [pc, #8]	; (d562c <hal_usart_write+0xc>)
   d5624:	681b      	ldr	r3, [r3, #0]
   d5626:	68db      	ldr	r3, [r3, #12]
   d5628:	9301      	str	r3, [sp, #4]
   d562a:	bd08      	pop	{r3, pc}
   d562c:	0003023c 	.word	0x0003023c

000d5630 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5630:	b508      	push	{r3, lr}
   d5632:	4b02      	ldr	r3, [pc, #8]	; (d563c <hal_usart_available+0xc>)
   d5634:	681b      	ldr	r3, [r3, #0]
   d5636:	691b      	ldr	r3, [r3, #16]
   d5638:	9301      	str	r3, [sp, #4]
   d563a:	bd08      	pop	{r3, pc}
   d563c:	0003023c 	.word	0x0003023c

000d5640 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5640:	b508      	push	{r3, lr}
   d5642:	4b02      	ldr	r3, [pc, #8]	; (d564c <hal_usart_read+0xc>)
   d5644:	681b      	ldr	r3, [r3, #0]
   d5646:	695b      	ldr	r3, [r3, #20]
   d5648:	9301      	str	r3, [sp, #4]
   d564a:	bd08      	pop	{r3, pc}
   d564c:	0003023c 	.word	0x0003023c

000d5650 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5650:	b508      	push	{r3, lr}
   d5652:	4b02      	ldr	r3, [pc, #8]	; (d565c <hal_usart_peek+0xc>)
   d5654:	681b      	ldr	r3, [r3, #0]
   d5656:	699b      	ldr	r3, [r3, #24]
   d5658:	9301      	str	r3, [sp, #4]
   d565a:	bd08      	pop	{r3, pc}
   d565c:	0003023c 	.word	0x0003023c

000d5660 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5660:	b508      	push	{r3, lr}
   d5662:	4b02      	ldr	r3, [pc, #8]	; (d566c <hal_usart_flush+0xc>)
   d5664:	681b      	ldr	r3, [r3, #0]
   d5666:	69db      	ldr	r3, [r3, #28]
   d5668:	9301      	str	r3, [sp, #4]
   d566a:	bd08      	pop	{r3, pc}
   d566c:	0003023c 	.word	0x0003023c

000d5670 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5670:	b508      	push	{r3, lr}
   d5672:	4b02      	ldr	r3, [pc, #8]	; (d567c <hal_usart_is_enabled+0xc>)
   d5674:	681b      	ldr	r3, [r3, #0]
   d5676:	6a1b      	ldr	r3, [r3, #32]
   d5678:	9301      	str	r3, [sp, #4]
   d567a:	bd08      	pop	{r3, pc}
   d567c:	0003023c 	.word	0x0003023c

000d5680 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5680:	b508      	push	{r3, lr}
   d5682:	4b02      	ldr	r3, [pc, #8]	; (d568c <hal_usart_available_data_for_write+0xc>)
   d5684:	681b      	ldr	r3, [r3, #0]
   d5686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5688:	9301      	str	r3, [sp, #4]
   d568a:	bd08      	pop	{r3, pc}
   d568c:	0003023c 	.word	0x0003023c

000d5690 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5690:	b508      	push	{r3, lr}
   d5692:	4b02      	ldr	r3, [pc, #8]	; (d569c <hal_i2c_begin+0xc>)
   d5694:	681b      	ldr	r3, [r3, #0]
   d5696:	68db      	ldr	r3, [r3, #12]
   d5698:	9301      	str	r3, [sp, #4]
   d569a:	bd08      	pop	{r3, pc}
   d569c:	00030228 	.word	0x00030228

000d56a0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d56a0:	b508      	push	{r3, lr}
   d56a2:	4b02      	ldr	r3, [pc, #8]	; (d56ac <hal_i2c_begin_transmission+0xc>)
   d56a4:	681b      	ldr	r3, [r3, #0]
   d56a6:	699b      	ldr	r3, [r3, #24]
   d56a8:	9301      	str	r3, [sp, #4]
   d56aa:	bd08      	pop	{r3, pc}
   d56ac:	00030228 	.word	0x00030228

000d56b0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d56b0:	b508      	push	{r3, lr}
   d56b2:	4b02      	ldr	r3, [pc, #8]	; (d56bc <hal_i2c_end_transmission+0xc>)
   d56b4:	681b      	ldr	r3, [r3, #0]
   d56b6:	69db      	ldr	r3, [r3, #28]
   d56b8:	9301      	str	r3, [sp, #4]
   d56ba:	bd08      	pop	{r3, pc}
   d56bc:	00030228 	.word	0x00030228

000d56c0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d56c0:	b508      	push	{r3, lr}
   d56c2:	4b02      	ldr	r3, [pc, #8]	; (d56cc <hal_i2c_write+0xc>)
   d56c4:	681b      	ldr	r3, [r3, #0]
   d56c6:	6a1b      	ldr	r3, [r3, #32]
   d56c8:	9301      	str	r3, [sp, #4]
   d56ca:	bd08      	pop	{r3, pc}
   d56cc:	00030228 	.word	0x00030228

000d56d0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d56d0:	b508      	push	{r3, lr}
   d56d2:	4b02      	ldr	r3, [pc, #8]	; (d56dc <hal_i2c_available+0xc>)
   d56d4:	681b      	ldr	r3, [r3, #0]
   d56d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d56d8:	9301      	str	r3, [sp, #4]
   d56da:	bd08      	pop	{r3, pc}
   d56dc:	00030228 	.word	0x00030228

000d56e0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d56e0:	b508      	push	{r3, lr}
   d56e2:	4b02      	ldr	r3, [pc, #8]	; (d56ec <hal_i2c_read+0xc>)
   d56e4:	681b      	ldr	r3, [r3, #0]
   d56e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d56e8:	9301      	str	r3, [sp, #4]
   d56ea:	bd08      	pop	{r3, pc}
   d56ec:	00030228 	.word	0x00030228

000d56f0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d56f0:	b508      	push	{r3, lr}
   d56f2:	4b02      	ldr	r3, [pc, #8]	; (d56fc <hal_i2c_peek+0xc>)
   d56f4:	681b      	ldr	r3, [r3, #0]
   d56f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d56f8:	9301      	str	r3, [sp, #4]
   d56fa:	bd08      	pop	{r3, pc}
   d56fc:	00030228 	.word	0x00030228

000d5700 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5700:	b508      	push	{r3, lr}
   d5702:	4b02      	ldr	r3, [pc, #8]	; (d570c <hal_i2c_flush+0xc>)
   d5704:	681b      	ldr	r3, [r3, #0]
   d5706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5708:	9301      	str	r3, [sp, #4]
   d570a:	bd08      	pop	{r3, pc}
   d570c:	00030228 	.word	0x00030228

000d5710 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5710:	b508      	push	{r3, lr}
   d5712:	4b02      	ldr	r3, [pc, #8]	; (d571c <hal_i2c_is_enabled+0xc>)
   d5714:	681b      	ldr	r3, [r3, #0]
   d5716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5718:	9301      	str	r3, [sp, #4]
   d571a:	bd08      	pop	{r3, pc}
   d571c:	00030228 	.word	0x00030228

000d5720 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5720:	b508      	push	{r3, lr}
   d5722:	4b02      	ldr	r3, [pc, #8]	; (d572c <hal_i2c_init+0xc>)
   d5724:	681b      	ldr	r3, [r3, #0]
   d5726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5728:	9301      	str	r3, [sp, #4]
   d572a:	bd08      	pop	{r3, pc}
   d572c:	00030228 	.word	0x00030228

000d5730 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5730:	b508      	push	{r3, lr}
   d5732:	4b02      	ldr	r3, [pc, #8]	; (d573c <hal_spi_begin+0xc>)
   d5734:	681b      	ldr	r3, [r3, #0]
   d5736:	681b      	ldr	r3, [r3, #0]
   d5738:	9301      	str	r3, [sp, #4]
   d573a:	bd08      	pop	{r3, pc}
   d573c:	00030230 	.word	0x00030230

000d5740 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d5740:	b508      	push	{r3, lr}
   d5742:	4b02      	ldr	r3, [pc, #8]	; (d574c <hal_spi_set_bit_order+0xc>)
   d5744:	681b      	ldr	r3, [r3, #0]
   d5746:	689b      	ldr	r3, [r3, #8]
   d5748:	9301      	str	r3, [sp, #4]
   d574a:	bd08      	pop	{r3, pc}
   d574c:	00030230 	.word	0x00030230

000d5750 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d5750:	b508      	push	{r3, lr}
   d5752:	4b02      	ldr	r3, [pc, #8]	; (d575c <hal_spi_set_data_mode+0xc>)
   d5754:	681b      	ldr	r3, [r3, #0]
   d5756:	68db      	ldr	r3, [r3, #12]
   d5758:	9301      	str	r3, [sp, #4]
   d575a:	bd08      	pop	{r3, pc}
   d575c:	00030230 	.word	0x00030230

000d5760 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d5760:	b508      	push	{r3, lr}
   d5762:	4b02      	ldr	r3, [pc, #8]	; (d576c <hal_spi_set_clock_divider+0xc>)
   d5764:	681b      	ldr	r3, [r3, #0]
   d5766:	691b      	ldr	r3, [r3, #16]
   d5768:	9301      	str	r3, [sp, #4]
   d576a:	bd08      	pop	{r3, pc}
   d576c:	00030230 	.word	0x00030230

000d5770 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5770:	b508      	push	{r3, lr}
   d5772:	4b02      	ldr	r3, [pc, #8]	; (d577c <hal_spi_transfer+0xc>)
   d5774:	681b      	ldr	r3, [r3, #0]
   d5776:	695b      	ldr	r3, [r3, #20]
   d5778:	9301      	str	r3, [sp, #4]
   d577a:	bd08      	pop	{r3, pc}
   d577c:	00030230 	.word	0x00030230

000d5780 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5780:	b508      	push	{r3, lr}
   d5782:	4b02      	ldr	r3, [pc, #8]	; (d578c <hal_spi_init+0xc>)
   d5784:	681b      	ldr	r3, [r3, #0]
   d5786:	69db      	ldr	r3, [r3, #28]
   d5788:	9301      	str	r3, [sp, #4]
   d578a:	bd08      	pop	{r3, pc}
   d578c:	00030230 	.word	0x00030230

000d5790 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5790:	b508      	push	{r3, lr}
   d5792:	4b02      	ldr	r3, [pc, #8]	; (d579c <hal_spi_is_enabled+0xc>)
   d5794:	681b      	ldr	r3, [r3, #0]
   d5796:	6a1b      	ldr	r3, [r3, #32]
   d5798:	9301      	str	r3, [sp, #4]
   d579a:	bd08      	pop	{r3, pc}
   d579c:	00030230 	.word	0x00030230

000d57a0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d57a0:	b508      	push	{r3, lr}
   d57a2:	4b02      	ldr	r3, [pc, #8]	; (d57ac <hal_spi_info+0xc>)
   d57a4:	681b      	ldr	r3, [r3, #0]
   d57a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d57a8:	9301      	str	r3, [sp, #4]
   d57aa:	bd08      	pop	{r3, pc}
   d57ac:	00030230 	.word	0x00030230

000d57b0 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d57b0:	b508      	push	{r3, lr}
   d57b2:	4b02      	ldr	r3, [pc, #8]	; (d57bc <hal_spi_acquire+0xc>)
   d57b4:	681b      	ldr	r3, [r3, #0]
   d57b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d57b8:	9301      	str	r3, [sp, #4]
   d57ba:	bd08      	pop	{r3, pc}
   d57bc:	00030230 	.word	0x00030230

000d57c0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d57c0:	b508      	push	{r3, lr}
   d57c2:	4b02      	ldr	r3, [pc, #8]	; (d57cc <hal_spi_release+0xc>)
   d57c4:	681b      	ldr	r3, [r3, #0]
   d57c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d57c8:	9301      	str	r3, [sp, #4]
   d57ca:	bd08      	pop	{r3, pc}
   d57cc:	00030230 	.word	0x00030230

000d57d0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d57d0:	b508      	push	{r3, lr}
   d57d2:	4b02      	ldr	r3, [pc, #8]	; (d57dc <HAL_USB_USART_Init+0xc>)
   d57d4:	681b      	ldr	r3, [r3, #0]
   d57d6:	681b      	ldr	r3, [r3, #0]
   d57d8:	9301      	str	r3, [sp, #4]
   d57da:	bd08      	pop	{r3, pc}
   d57dc:	0003024c 	.word	0x0003024c

000d57e0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d57e0:	b508      	push	{r3, lr}
   d57e2:	4b02      	ldr	r3, [pc, #8]	; (d57ec <HAL_USB_USART_Begin+0xc>)
   d57e4:	681b      	ldr	r3, [r3, #0]
   d57e6:	685b      	ldr	r3, [r3, #4]
   d57e8:	9301      	str	r3, [sp, #4]
   d57ea:	bd08      	pop	{r3, pc}
   d57ec:	0003024c 	.word	0x0003024c

000d57f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d57f0:	b508      	push	{r3, lr}
   d57f2:	4b02      	ldr	r3, [pc, #8]	; (d57fc <HAL_USB_USART_Available_Data+0xc>)
   d57f4:	681b      	ldr	r3, [r3, #0]
   d57f6:	691b      	ldr	r3, [r3, #16]
   d57f8:	9301      	str	r3, [sp, #4]
   d57fa:	bd08      	pop	{r3, pc}
   d57fc:	0003024c 	.word	0x0003024c

000d5800 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5800:	b508      	push	{r3, lr}
   d5802:	4b02      	ldr	r3, [pc, #8]	; (d580c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5804:	681b      	ldr	r3, [r3, #0]
   d5806:	695b      	ldr	r3, [r3, #20]
   d5808:	9301      	str	r3, [sp, #4]
   d580a:	bd08      	pop	{r3, pc}
   d580c:	0003024c 	.word	0x0003024c

000d5810 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5810:	b508      	push	{r3, lr}
   d5812:	4b02      	ldr	r3, [pc, #8]	; (d581c <HAL_USB_USART_Receive_Data+0xc>)
   d5814:	681b      	ldr	r3, [r3, #0]
   d5816:	699b      	ldr	r3, [r3, #24]
   d5818:	9301      	str	r3, [sp, #4]
   d581a:	bd08      	pop	{r3, pc}
   d581c:	0003024c 	.word	0x0003024c

000d5820 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5820:	b508      	push	{r3, lr}
   d5822:	4b02      	ldr	r3, [pc, #8]	; (d582c <HAL_USB_USART_Send_Data+0xc>)
   d5824:	681b      	ldr	r3, [r3, #0]
   d5826:	69db      	ldr	r3, [r3, #28]
   d5828:	9301      	str	r3, [sp, #4]
   d582a:	bd08      	pop	{r3, pc}
   d582c:	0003024c 	.word	0x0003024c

000d5830 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5830:	b508      	push	{r3, lr}
   d5832:	4b02      	ldr	r3, [pc, #8]	; (d583c <HAL_USB_USART_Flush_Data+0xc>)
   d5834:	681b      	ldr	r3, [r3, #0]
   d5836:	6a1b      	ldr	r3, [r3, #32]
   d5838:	9301      	str	r3, [sp, #4]
   d583a:	bd08      	pop	{r3, pc}
   d583c:	0003024c 	.word	0x0003024c

000d5840 <LED_Signaling_Start>:

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d5840:	b508      	push	{r3, lr}
   d5842:	4b02      	ldr	r3, [pc, #8]	; (d584c <LED_Signaling_Start+0xc>)
   d5844:	681b      	ldr	r3, [r3, #0]
   d5846:	689b      	ldr	r3, [r3, #8]
   d5848:	9301      	str	r3, [sp, #4]
   d584a:	bd08      	pop	{r3, pc}
   d584c:	00030260 	.word	0x00030260

000d5850 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d5850:	b508      	push	{r3, lr}
   d5852:	4b02      	ldr	r3, [pc, #8]	; (d585c <LED_Signaling_Stop+0xc>)
   d5854:	681b      	ldr	r3, [r3, #0]
   d5856:	68db      	ldr	r3, [r3, #12]
   d5858:	9301      	str	r3, [sp, #4]
   d585a:	bd08      	pop	{r3, pc}
   d585c:	00030260 	.word	0x00030260

000d5860 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d5860:	b508      	push	{r3, lr}
   d5862:	4b02      	ldr	r3, [pc, #8]	; (d586c <LED_RGB_IsOverRidden+0xc>)
   d5864:	681b      	ldr	r3, [r3, #0]
   d5866:	699b      	ldr	r3, [r3, #24]
   d5868:	9301      	str	r3, [sp, #4]
   d586a:	bd08      	pop	{r3, pc}
   d586c:	00030260 	.word	0x00030260

000d5870 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5870:	b508      	push	{r3, lr}
   d5872:	4b02      	ldr	r3, [pc, #8]	; (d587c <panic_+0xc>)
   d5874:	681b      	ldr	r3, [r3, #0]
   d5876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5878:	9301      	str	r3, [sp, #4]
   d587a:	bd08      	pop	{r3, pc}
   d587c:	00030260 	.word	0x00030260

000d5880 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5880:	b508      	push	{r3, lr}
   d5882:	4b02      	ldr	r3, [pc, #8]	; (d588c <log_message+0xc>)
   d5884:	681b      	ldr	r3, [r3, #0]
   d5886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5888:	9301      	str	r3, [sp, #4]
   d588a:	bd08      	pop	{r3, pc}
   d588c:	00030260 	.word	0x00030260

000d5890 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5890:	b508      	push	{r3, lr}
   d5892:	4b02      	ldr	r3, [pc, #8]	; (d589c <set_system_mode+0xc>)
   d5894:	681b      	ldr	r3, [r3, #0]
   d5896:	685b      	ldr	r3, [r3, #4]
   d5898:	9301      	str	r3, [sp, #4]
   d589a:	bd08      	pop	{r3, pc}
   d589c:	00030220 	.word	0x00030220

000d58a0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d58a0:	b508      	push	{r3, lr}
   d58a2:	4b02      	ldr	r3, [pc, #8]	; (d58ac <system_delay_ms+0xc>)
   d58a4:	681b      	ldr	r3, [r3, #0]
   d58a6:	695b      	ldr	r3, [r3, #20]
   d58a8:	9301      	str	r3, [sp, #4]
   d58aa:	bd08      	pop	{r3, pc}
   d58ac:	00030220 	.word	0x00030220

000d58b0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d58b0:	b508      	push	{r3, lr}
   d58b2:	4b02      	ldr	r3, [pc, #8]	; (d58bc <system_thread_set_state+0xc>)
   d58b4:	681b      	ldr	r3, [r3, #0]
   d58b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d58b8:	9301      	str	r3, [sp, #4]
   d58ba:	bd08      	pop	{r3, pc}
   d58bc:	00030220 	.word	0x00030220

000d58c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d58c0:	b508      	push	{r3, lr}
   d58c2:	4b03      	ldr	r3, [pc, #12]	; (d58d0 <system_ctrl_set_app_request_handler+0x10>)
   d58c4:	681b      	ldr	r3, [r3, #0]
   d58c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d58ca:	9301      	str	r3, [sp, #4]
   d58cc:	bd08      	pop	{r3, pc}
   d58ce:	0000      	.short	0x0000
   d58d0:	00030220 	.word	0x00030220

000d58d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d58d4:	b508      	push	{r3, lr}
   d58d6:	4b03      	ldr	r3, [pc, #12]	; (d58e4 <system_ctrl_set_result+0x10>)
   d58d8:	681b      	ldr	r3, [r3, #0]
   d58da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d58de:	9301      	str	r3, [sp, #4]
   d58e0:	bd08      	pop	{r3, pc}
   d58e2:	0000      	.short	0x0000
   d58e4:	00030220 	.word	0x00030220

000d58e8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d58e8:	b508      	push	{r3, lr}
   d58ea:	4b02      	ldr	r3, [pc, #8]	; (d58f4 <network_connect+0xc>)
   d58ec:	681b      	ldr	r3, [r3, #0]
   d58ee:	685b      	ldr	r3, [r3, #4]
   d58f0:	9301      	str	r3, [sp, #4]
   d58f2:	bd08      	pop	{r3, pc}
   d58f4:	00030240 	.word	0x00030240

000d58f8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d58f8:	b508      	push	{r3, lr}
   d58fa:	4b02      	ldr	r3, [pc, #8]	; (d5904 <network_connecting+0xc>)
   d58fc:	681b      	ldr	r3, [r3, #0]
   d58fe:	689b      	ldr	r3, [r3, #8]
   d5900:	9301      	str	r3, [sp, #4]
   d5902:	bd08      	pop	{r3, pc}
   d5904:	00030240 	.word	0x00030240

000d5908 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5908:	b508      	push	{r3, lr}
   d590a:	4b02      	ldr	r3, [pc, #8]	; (d5914 <network_disconnect+0xc>)
   d590c:	681b      	ldr	r3, [r3, #0]
   d590e:	68db      	ldr	r3, [r3, #12]
   d5910:	9301      	str	r3, [sp, #4]
   d5912:	bd08      	pop	{r3, pc}
   d5914:	00030240 	.word	0x00030240

000d5918 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5918:	b508      	push	{r3, lr}
   d591a:	4b02      	ldr	r3, [pc, #8]	; (d5924 <network_ready+0xc>)
   d591c:	681b      	ldr	r3, [r3, #0]
   d591e:	691b      	ldr	r3, [r3, #16]
   d5920:	9301      	str	r3, [sp, #4]
   d5922:	bd08      	pop	{r3, pc}
   d5924:	00030240 	.word	0x00030240

000d5928 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5928:	b508      	push	{r3, lr}
   d592a:	4b02      	ldr	r3, [pc, #8]	; (d5934 <network_on+0xc>)
   d592c:	681b      	ldr	r3, [r3, #0]
   d592e:	695b      	ldr	r3, [r3, #20]
   d5930:	9301      	str	r3, [sp, #4]
   d5932:	bd08      	pop	{r3, pc}
   d5934:	00030240 	.word	0x00030240

000d5938 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5938:	b508      	push	{r3, lr}
   d593a:	4b02      	ldr	r3, [pc, #8]	; (d5944 <network_off+0xc>)
   d593c:	681b      	ldr	r3, [r3, #0]
   d593e:	699b      	ldr	r3, [r3, #24]
   d5940:	9301      	str	r3, [sp, #4]
   d5942:	bd08      	pop	{r3, pc}
   d5944:	00030240 	.word	0x00030240

000d5948 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5948:	b508      	push	{r3, lr}
   d594a:	4b02      	ldr	r3, [pc, #8]	; (d5954 <network_listen+0xc>)
   d594c:	681b      	ldr	r3, [r3, #0]
   d594e:	69db      	ldr	r3, [r3, #28]
   d5950:	9301      	str	r3, [sp, #4]
   d5952:	bd08      	pop	{r3, pc}
   d5954:	00030240 	.word	0x00030240

000d5958 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5958:	b508      	push	{r3, lr}
   d595a:	4b02      	ldr	r3, [pc, #8]	; (d5964 <network_listening+0xc>)
   d595c:	681b      	ldr	r3, [r3, #0]
   d595e:	6a1b      	ldr	r3, [r3, #32]
   d5960:	9301      	str	r3, [sp, #4]
   d5962:	bd08      	pop	{r3, pc}
   d5964:	00030240 	.word	0x00030240

000d5968 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5968:	b508      	push	{r3, lr}
   d596a:	4b02      	ldr	r3, [pc, #8]	; (d5974 <network_set_listen_timeout+0xc>)
   d596c:	681b      	ldr	r3, [r3, #0]
   d596e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5970:	9301      	str	r3, [sp, #4]
   d5972:	bd08      	pop	{r3, pc}
   d5974:	00030240 	.word	0x00030240

000d5978 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5978:	b508      	push	{r3, lr}
   d597a:	4b02      	ldr	r3, [pc, #8]	; (d5984 <network_get_listen_timeout+0xc>)
   d597c:	681b      	ldr	r3, [r3, #0]
   d597e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5980:	9301      	str	r3, [sp, #4]
   d5982:	bd08      	pop	{r3, pc}
   d5984:	00030240 	.word	0x00030240

000d5988 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5988:	b508      	push	{r3, lr}
   d598a:	4b02      	ldr	r3, [pc, #8]	; (d5994 <network_is_on+0xc>)
   d598c:	681b      	ldr	r3, [r3, #0]
   d598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5990:	9301      	str	r3, [sp, #4]
   d5992:	bd08      	pop	{r3, pc}
   d5994:	00030240 	.word	0x00030240

000d5998 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5998:	b508      	push	{r3, lr}
   d599a:	4b02      	ldr	r3, [pc, #8]	; (d59a4 <network_is_off+0xc>)
   d599c:	681b      	ldr	r3, [r3, #0]
   d599e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d59a0:	9301      	str	r3, [sp, #4]
   d59a2:	bd08      	pop	{r3, pc}
   d59a4:	00030240 	.word	0x00030240

000d59a8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d59a8:	b508      	push	{r3, lr}
   d59aa:	4b02      	ldr	r3, [pc, #8]	; (d59b4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d59ac:	681b      	ldr	r3, [r3, #0]
   d59ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d59b0:	9301      	str	r3, [sp, #4]
   d59b2:	bd08      	pop	{r3, pc}
   d59b4:	00030244 	.word	0x00030244

000d59b8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d59b8:	b508      	push	{r3, lr}
   d59ba:	4b02      	ldr	r3, [pc, #8]	; (d59c4 <malloc+0xc>)
   d59bc:	681b      	ldr	r3, [r3, #0]
   d59be:	681b      	ldr	r3, [r3, #0]
   d59c0:	9301      	str	r3, [sp, #4]
   d59c2:	bd08      	pop	{r3, pc}
   d59c4:	0003021c 	.word	0x0003021c

000d59c8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d59c8:	b508      	push	{r3, lr}
   d59ca:	4b02      	ldr	r3, [pc, #8]	; (d59d4 <free+0xc>)
   d59cc:	681b      	ldr	r3, [r3, #0]
   d59ce:	685b      	ldr	r3, [r3, #4]
   d59d0:	9301      	str	r3, [sp, #4]
   d59d2:	bd08      	pop	{r3, pc}
   d59d4:	0003021c 	.word	0x0003021c

000d59d8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d59d8:	b508      	push	{r3, lr}
   d59da:	4b02      	ldr	r3, [pc, #8]	; (d59e4 <realloc+0xc>)
   d59dc:	681b      	ldr	r3, [r3, #0]
   d59de:	689b      	ldr	r3, [r3, #8]
   d59e0:	9301      	str	r3, [sp, #4]
   d59e2:	bd08      	pop	{r3, pc}
   d59e4:	0003021c 	.word	0x0003021c

000d59e8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d59e8:	b508      	push	{r3, lr}
   d59ea:	4b02      	ldr	r3, [pc, #8]	; (d59f4 <vsnprintf+0xc>)
   d59ec:	681b      	ldr	r3, [r3, #0]
   d59ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d59f0:	9301      	str	r3, [sp, #4]
   d59f2:	bd08      	pop	{r3, pc}
   d59f4:	0003021c 	.word	0x0003021c

000d59f8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d59f8:	b508      	push	{r3, lr}
   d59fa:	4b02      	ldr	r3, [pc, #8]	; (d5a04 <abort+0xc>)
   d59fc:	681b      	ldr	r3, [r3, #0]
   d59fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5a00:	9301      	str	r3, [sp, #4]
   d5a02:	bd08      	pop	{r3, pc}
   d5a04:	0003021c 	.word	0x0003021c

000d5a08 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5a08:	b508      	push	{r3, lr}
   d5a0a:	4b02      	ldr	r3, [pc, #8]	; (d5a14 <newlib_impure_ptr_callback+0xc>)
   d5a0c:	681b      	ldr	r3, [r3, #0]
   d5a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5a10:	9301      	str	r3, [sp, #4]
   d5a12:	bd08      	pop	{r3, pc}
   d5a14:	0003021c 	.word	0x0003021c

000d5a18 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5a18:	2200      	movs	r2, #0
   d5a1a:	6840      	ldr	r0, [r0, #4]
   d5a1c:	4611      	mov	r1, r2
   d5a1e:	f7ff bf9b 	b.w	d5958 <network_listening>

000d5a22 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5a22:	2200      	movs	r2, #0
   d5a24:	6840      	ldr	r0, [r0, #4]
   d5a26:	4611      	mov	r1, r2
   d5a28:	f7ff bfa6 	b.w	d5978 <network_get_listen_timeout>

000d5a2c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5a2c:	6840      	ldr	r0, [r0, #4]
   d5a2e:	2200      	movs	r2, #0
   d5a30:	f7ff bf9a 	b.w	d5968 <network_set_listen_timeout>

000d5a34 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5a34:	6840      	ldr	r0, [r0, #4]
   d5a36:	2200      	movs	r2, #0
   d5a38:	f081 0101 	eor.w	r1, r1, #1
   d5a3c:	f7ff bf84 	b.w	d5948 <network_listen>

000d5a40 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5a40:	2300      	movs	r3, #0
   d5a42:	6840      	ldr	r0, [r0, #4]
   d5a44:	461a      	mov	r2, r3
   d5a46:	4619      	mov	r1, r3
   d5a48:	f7ff bf76 	b.w	d5938 <network_off>

000d5a4c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5a4c:	2300      	movs	r3, #0
   d5a4e:	6840      	ldr	r0, [r0, #4]
   d5a50:	461a      	mov	r2, r3
   d5a52:	4619      	mov	r1, r3
   d5a54:	f7ff bf68 	b.w	d5928 <network_on>

000d5a58 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5a58:	2200      	movs	r2, #0
   d5a5a:	6840      	ldr	r0, [r0, #4]
   d5a5c:	4611      	mov	r1, r2
   d5a5e:	f7ff bf5b 	b.w	d5918 <network_ready>

000d5a62 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5a62:	2200      	movs	r2, #0
   d5a64:	6840      	ldr	r0, [r0, #4]
   d5a66:	4611      	mov	r1, r2
   d5a68:	f7ff bf46 	b.w	d58f8 <network_connecting>

000d5a6c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a6c:	6840      	ldr	r0, [r0, #4]
   d5a6e:	2200      	movs	r2, #0
   d5a70:	2102      	movs	r1, #2
   d5a72:	f7ff bf49 	b.w	d5908 <network_disconnect>

000d5a76 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5a76:	2300      	movs	r3, #0
   d5a78:	6840      	ldr	r0, [r0, #4]
   d5a7a:	461a      	mov	r2, r3
   d5a7c:	f7ff bf34 	b.w	d58e8 <network_connect>

000d5a80 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5a80:	4b02      	ldr	r3, [pc, #8]	; (d5a8c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5a82:	2203      	movs	r2, #3
   d5a84:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5a86:	4a02      	ldr	r2, [pc, #8]	; (d5a90 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5a88:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5a8a:	4770      	bx	lr
   d5a8c:	2003e644 	.word	0x2003e644
   d5a90:	000d852c 	.word	0x000d852c

000d5a94 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5a94:	2100      	movs	r1, #0
   d5a96:	f7ff be8b 	b.w	d57b0 <hal_spi_acquire>

000d5a9a <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5a9a:	2100      	movs	r1, #0
   d5a9c:	f7ff be90 	b.w	d57c0 <hal_spi_release>

000d5aa0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5aa0:	b510      	push	{r4, lr}
   d5aa2:	4604      	mov	r4, r0
   d5aa4:	4608      	mov	r0, r1
{
    _spi = spi;
   d5aa6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5aa8:	f7ff fe6a 	bl	d5780 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5aac:	2300      	movs	r3, #0
   d5aae:	6063      	str	r3, [r4, #4]
}
   d5ab0:	4620      	mov	r0, r4
   d5ab2:	bd10      	pop	{r4, pc}

000d5ab4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5ab4:	b510      	push	{r4, lr}
   d5ab6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5ab8:	7800      	ldrb	r0, [r0, #0]
   d5aba:	f7ff ffeb 	bl	d5a94 <_ZN8SPIClass4lockEv.isra.0>
   d5abe:	b948      	cbnz	r0, d5ad4 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5ac0:	7820      	ldrb	r0, [r4, #0]
   d5ac2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5ac6:	f7ff fe33 	bl	d5730 <hal_spi_begin>
        unlock();
   d5aca:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5ad0:	f7ff bfe3 	b.w	d5a9a <_ZN8SPIClass6unlockEv.isra.0>
}
   d5ad4:	bd10      	pop	{r4, pc}

000d5ad6 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5ad6:	b513      	push	{r0, r1, r4, lr}
   d5ad8:	4604      	mov	r4, r0
    if (!lock())
   d5ada:	7800      	ldrb	r0, [r0, #0]
{
   d5adc:	9101      	str	r1, [sp, #4]
    if (!lock())
   d5ade:	f7ff ffd9 	bl	d5a94 <_ZN8SPIClass4lockEv.isra.0>
   d5ae2:	9901      	ldr	r1, [sp, #4]
   d5ae4:	b940      	cbnz	r0, d5af8 <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d5ae6:	7820      	ldrb	r0, [r4, #0]
   d5ae8:	f7ff fe2a 	bl	d5740 <hal_spi_set_bit_order>
        unlock();
   d5aec:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5aee:	b002      	add	sp, #8
   d5af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5af4:	f7ff bfd1 	b.w	d5a9a <_ZN8SPIClass6unlockEv.isra.0>
}
   d5af8:	b002      	add	sp, #8
   d5afa:	bd10      	pop	{r4, pc}

000d5afc <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d5afc:	b513      	push	{r0, r1, r4, lr}
   d5afe:	4604      	mov	r4, r0
    if (!lock())
   d5b00:	7800      	ldrb	r0, [r0, #0]
{
   d5b02:	9101      	str	r1, [sp, #4]
    if (!lock())
   d5b04:	f7ff ffc6 	bl	d5a94 <_ZN8SPIClass4lockEv.isra.0>
   d5b08:	9901      	ldr	r1, [sp, #4]
   d5b0a:	b940      	cbnz	r0, d5b1e <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d5b0c:	7820      	ldrb	r0, [r4, #0]
   d5b0e:	f7ff fe1f 	bl	d5750 <hal_spi_set_data_mode>
        unlock();
   d5b12:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5b14:	b002      	add	sp, #8
   d5b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5b1a:	f7ff bfbe 	b.w	d5a9a <_ZN8SPIClass6unlockEv.isra.0>
}
   d5b1e:	b002      	add	sp, #8
   d5b20:	bd10      	pop	{r4, pc}
	...

000d5b24 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5b24:	0840      	lsrs	r0, r0, #1
{
   d5b26:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5b28:	6018      	str	r0, [r3, #0]
   d5b2a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5b2c:	6818      	ldr	r0, [r3, #0]
   d5b2e:	4288      	cmp	r0, r1
   d5b30:	b2e5      	uxtb	r5, r4
   d5b32:	d906      	bls.n	d5b42 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5b34:	3401      	adds	r4, #1
   d5b36:	2c08      	cmp	r4, #8
   d5b38:	d002      	beq.n	d5b40 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5b3a:	0840      	lsrs	r0, r0, #1
   d5b3c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d5b3e:	e7f5      	b.n	d5b2c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5b40:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d5b42:	4b02      	ldr	r3, [pc, #8]	; (d5b4c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5b44:	5d5b      	ldrb	r3, [r3, r5]
   d5b46:	7013      	strb	r3, [r2, #0]
}
   d5b48:	bd30      	pop	{r4, r5, pc}
   d5b4a:	bf00      	nop
   d5b4c:	000d8560 	.word	0x000d8560

000d5b50 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b54:	b088      	sub	sp, #32
    unsigned clock = 0;
   d5b56:	2300      	movs	r3, #0
{
   d5b58:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5b5a:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d5b5c:	9302      	str	r3, [sp, #8]
{
   d5b5e:	460e      	mov	r6, r1
   d5b60:	4617      	mov	r7, r2
    if (!lock())
   d5b62:	f7ff ff97 	bl	d5a94 <_ZN8SPIClass4lockEv.isra.0>
   d5b66:	4605      	mov	r5, r0
   d5b68:	bb00      	cbnz	r0, d5bac <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d5b6a:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5b6e:	4601      	mov	r1, r0
   d5b70:	2214      	movs	r2, #20
   d5b72:	a803      	add	r0, sp, #12
   d5b74:	f002 f876 	bl	d7c64 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5b78:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5b7a:	462a      	mov	r2, r5
   d5b7c:	a903      	add	r1, sp, #12
   d5b7e:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d5b80:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d5b84:	f7ff fe0c 	bl	d57a0 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5b88:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d5b8a:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5b8e:	ab02      	add	r3, sp, #8
   d5b90:	f10d 0207 	add.w	r2, sp, #7
   d5b94:	fb07 f106 	mul.w	r1, r7, r6
   d5b98:	f7ff ffc4 	bl	d5b24 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d5b9c:	7820      	ldrb	r0, [r4, #0]
   d5b9e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5ba2:	f7ff fddd 	bl	d5760 <hal_spi_set_clock_divider>
        unlock();
   d5ba6:	7820      	ldrb	r0, [r4, #0]
   d5ba8:	f7ff ff77 	bl	d5a9a <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d5bac:	9802      	ldr	r0, [sp, #8]
   d5bae:	b008      	add	sp, #32
   d5bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5bb4 <_ZN8SPIClass15setClockDividerEh>:
{
   d5bb4:	b538      	push	{r3, r4, r5, lr}
   d5bb6:	4604      	mov	r4, r0
    if (!lock())
   d5bb8:	7800      	ldrb	r0, [r0, #0]
{
   d5bba:	460d      	mov	r5, r1
    if (!lock())
   d5bbc:	f7ff ff6a 	bl	d5a94 <_ZN8SPIClass4lockEv.isra.0>
   d5bc0:	4603      	mov	r3, r0
   d5bc2:	b9d0      	cbnz	r0, d5bfa <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   d5bc4:	6861      	ldr	r1, [r4, #4]
   d5bc6:	b199      	cbz	r1, d5bf0 <_ZN8SPIClass15setClockDividerEh+0x3c>
   d5bc8:	4a0c      	ldr	r2, [pc, #48]	; (d5bfc <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   d5bca:	f812 0b01 	ldrb.w	r0, [r2], #1
   d5bce:	4285      	cmp	r5, r0
   d5bd0:	d002      	beq.n	d5bd8 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   d5bd2:	3301      	adds	r3, #1
   d5bd4:	2b08      	cmp	r3, #8
   d5bd6:	d1f8      	bne.n	d5bca <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   d5bd8:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   d5bda:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   d5bdc:	2201      	movs	r2, #1
   d5bde:	40d9      	lsrs	r1, r3
   d5be0:	4620      	mov	r0, r4
   d5be2:	f7ff ffb5 	bl	d5b50 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   d5be6:	7820      	ldrb	r0, [r4, #0]
}
   d5be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   d5bec:	f7ff bf55 	b.w	d5a9a <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   d5bf0:	7820      	ldrb	r0, [r4, #0]
   d5bf2:	4629      	mov	r1, r5
   d5bf4:	f7ff fdb4 	bl	d5760 <hal_spi_set_clock_divider>
   d5bf8:	e7f5      	b.n	d5be6 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   d5bfa:	bd38      	pop	{r3, r4, r5, pc}
   d5bfc:	000d8560 	.word	0x000d8560

000d5c00 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d5c00:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5c02:	7800      	ldrb	r0, [r0, #0]
   d5c04:	f7ff fdb4 	bl	d5770 <hal_spi_transfer>
}
   d5c08:	b2c0      	uxtb	r0, r0
   d5c0a:	bd08      	pop	{r3, pc}

000d5c0c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5c0c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5c0e:	4b09      	ldr	r3, [pc, #36]	; (d5c34 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5c10:	4c09      	ldr	r4, [pc, #36]	; (d5c38 <_GLOBAL__sub_I_System+0x2c>)
   d5c12:	2202      	movs	r2, #2
   d5c14:	2000      	movs	r0, #0
   d5c16:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5c18:	4b08      	ldr	r3, [pc, #32]	; (d5c3c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5c1a:	6020      	str	r0, [r4, #0]
   d5c1c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5c1e:	71a0      	strb	r0, [r4, #6]
   d5c20:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5c22:	f7ff fe35 	bl	d5890 <set_system_mode>
SystemClass System;
   d5c26:	4620      	mov	r0, r4
   d5c28:	4a05      	ldr	r2, [pc, #20]	; (d5c40 <_GLOBAL__sub_I_System+0x34>)
   d5c2a:	4906      	ldr	r1, [pc, #24]	; (d5c44 <_GLOBAL__sub_I_System+0x38>)
   d5c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5c30:	f001 beb0 	b.w	d7994 <__aeabi_atexit>
   d5c34:	2003e658 	.word	0x2003e658
   d5c38:	2003e64c 	.word	0x2003e64c
   d5c3c:	ffff0000 	.word	0xffff0000
   d5c40:	2003e5e4 	.word	0x2003e5e4
   d5c44:	000d40c5 	.word	0x000d40c5

000d5c48 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5c48:	b510      	push	{r4, lr}
   d5c4a:	4604      	mov	r4, r0
{
	free(buffer);
   d5c4c:	6800      	ldr	r0, [r0, #0]
   d5c4e:	f7ff febb 	bl	d59c8 <free>
}
   d5c52:	4620      	mov	r0, r4
   d5c54:	bd10      	pop	{r4, pc}

000d5c56 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5c56:	b510      	push	{r4, lr}
   d5c58:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5c5a:	6800      	ldr	r0, [r0, #0]
   d5c5c:	b108      	cbz	r0, d5c62 <_ZN6String10invalidateEv+0xc>
   d5c5e:	f7ff feb3 	bl	d59c8 <free>
	buffer = NULL;
   d5c62:	2300      	movs	r3, #0
	capacity = len = 0;
   d5c64:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5c68:	6023      	str	r3, [r4, #0]
}
   d5c6a:	bd10      	pop	{r4, pc}

000d5c6c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5c6c:	b538      	push	{r3, r4, r5, lr}
   d5c6e:	4604      	mov	r4, r0
   d5c70:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5c72:	6800      	ldr	r0, [r0, #0]
   d5c74:	3101      	adds	r1, #1
   d5c76:	f7ff feaf 	bl	d59d8 <realloc>
	if (newbuffer) {
   d5c7a:	b110      	cbz	r0, d5c82 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5c7c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5c80:	2001      	movs	r0, #1
	}
	return 0;
}
   d5c82:	bd38      	pop	{r3, r4, r5, pc}

000d5c84 <_ZN6String7reserveEj>:
{
   d5c84:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5c86:	6803      	ldr	r3, [r0, #0]
{
   d5c88:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5c8a:	b123      	cbz	r3, d5c96 <_ZN6String7reserveEj+0x12>
   d5c8c:	6843      	ldr	r3, [r0, #4]
   d5c8e:	428b      	cmp	r3, r1
   d5c90:	d301      	bcc.n	d5c96 <_ZN6String7reserveEj+0x12>
   d5c92:	2001      	movs	r0, #1
}
   d5c94:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5c96:	4620      	mov	r0, r4
   d5c98:	f7ff ffe8 	bl	d5c6c <_ZN6String12changeBufferEj>
   d5c9c:	2800      	cmp	r0, #0
   d5c9e:	d0f9      	beq.n	d5c94 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5ca0:	68a3      	ldr	r3, [r4, #8]
   d5ca2:	2b00      	cmp	r3, #0
   d5ca4:	d1f5      	bne.n	d5c92 <_ZN6String7reserveEj+0xe>
   d5ca6:	6822      	ldr	r2, [r4, #0]
   d5ca8:	7013      	strb	r3, [r2, #0]
   d5caa:	e7f2      	b.n	d5c92 <_ZN6String7reserveEj+0xe>

000d5cac <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5cac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5cae:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5cb0:	4611      	mov	r1, r2
   d5cb2:	9201      	str	r2, [sp, #4]
{
   d5cb4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5cb6:	f7ff ffe5 	bl	d5c84 <_ZN6String7reserveEj>
   d5cba:	9a01      	ldr	r2, [sp, #4]
   d5cbc:	b928      	cbnz	r0, d5cca <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5cbe:	4620      	mov	r0, r4
   d5cc0:	f7ff ffc9 	bl	d5c56 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5cc4:	4620      	mov	r0, r4
   d5cc6:	b003      	add	sp, #12
   d5cc8:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5cca:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5ccc:	4629      	mov	r1, r5
   d5cce:	6820      	ldr	r0, [r4, #0]
   d5cd0:	f001 ffa0 	bl	d7c14 <memcpy>
	buffer[len] = 0;
   d5cd4:	6822      	ldr	r2, [r4, #0]
   d5cd6:	68a3      	ldr	r3, [r4, #8]
   d5cd8:	2100      	movs	r1, #0
   d5cda:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5cdc:	e7f2      	b.n	d5cc4 <_ZN6String4copyEPKcj+0x18>

000d5cde <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5cde:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5ce0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5ce2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5ce6:	4604      	mov	r4, r0
	len = 0;
   d5ce8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5cea:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5cec:	b141      	cbz	r1, d5d00 <_ZN6StringC1EPKc+0x22>
   d5cee:	4608      	mov	r0, r1
   d5cf0:	9101      	str	r1, [sp, #4]
   d5cf2:	f001 ffed 	bl	d7cd0 <strlen>
   d5cf6:	9901      	ldr	r1, [sp, #4]
   d5cf8:	4602      	mov	r2, r0
   d5cfa:	4620      	mov	r0, r4
   d5cfc:	f7ff ffd6 	bl	d5cac <_ZN6String4copyEPKcj>
}
   d5d00:	4620      	mov	r0, r4
   d5d02:	b002      	add	sp, #8
   d5d04:	bd10      	pop	{r4, pc}

000d5d06 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5d06:	b513      	push	{r0, r1, r4, lr}
   d5d08:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5d0a:	b159      	cbz	r1, d5d24 <_ZN6StringaSEPKc+0x1e>
   d5d0c:	4608      	mov	r0, r1
   d5d0e:	9101      	str	r1, [sp, #4]
   d5d10:	f001 ffde 	bl	d7cd0 <strlen>
   d5d14:	9901      	ldr	r1, [sp, #4]
   d5d16:	4602      	mov	r2, r0
   d5d18:	4620      	mov	r0, r4
   d5d1a:	f7ff ffc7 	bl	d5cac <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5d1e:	4620      	mov	r0, r4
   d5d20:	b002      	add	sp, #8
   d5d22:	bd10      	pop	{r4, pc}
	else invalidate();
   d5d24:	f7ff ff97 	bl	d5c56 <_ZN6String10invalidateEv>
   d5d28:	e7f9      	b.n	d5d1e <_ZN6StringaSEPKc+0x18>

000d5d2a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5d2a:	4770      	bx	lr

000d5d2c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d5d2c:	4770      	bx	lr

000d5d2e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d5d2e:	4770      	bx	lr

000d5d30 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5d30:	4770      	bx	lr
	...

000d5d34 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d5d34:	4b06      	ldr	r3, [pc, #24]	; (d5d50 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d5d36:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d5d38:	b510      	push	{r4, lr}
   d5d3a:	f100 040c 	add.w	r4, r0, #12
	    ||
   d5d3e:	d005      	beq.n	d5d4c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d5d40:	4608      	mov	r0, r1
   d5d42:	f001 fe35 	bl	d79b0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d5d46:	2800      	cmp	r0, #0
	return nullptr;
   d5d48:	bf08      	it	eq
   d5d4a:	2400      	moveq	r4, #0
      }
   d5d4c:	4620      	mov	r0, r4
   d5d4e:	bd10      	pop	{r4, pc}
   d5d50:	000d7fb0 	.word	0x000d7fb0

000d5d54 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d5d54:	4b06      	ldr	r3, [pc, #24]	; (d5d70 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d5d56:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d5d58:	b510      	push	{r4, lr}
   d5d5a:	f100 040c 	add.w	r4, r0, #12
	    ||
   d5d5e:	d005      	beq.n	d5d6c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d5d60:	4608      	mov	r0, r1
   d5d62:	f001 fe25 	bl	d79b0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d5d66:	2800      	cmp	r0, #0
	return nullptr;
   d5d68:	bf08      	it	eq
   d5d6a:	2400      	moveq	r4, #0
      }
   d5d6c:	4620      	mov	r0, r4
   d5d6e:	bd10      	pop	{r4, pc}
   d5d70:	000d7fb0 	.word	0x000d7fb0

000d5d74 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d5d74:	4b06      	ldr	r3, [pc, #24]	; (d5d90 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d5d76:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d5d78:	b510      	push	{r4, lr}
   d5d7a:	f100 040c 	add.w	r4, r0, #12
	    ||
   d5d7e:	d005      	beq.n	d5d8c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d5d80:	4608      	mov	r0, r1
   d5d82:	f001 fe15 	bl	d79b0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d5d86:	2800      	cmp	r0, #0
	return nullptr;
   d5d88:	bf08      	it	eq
   d5d8a:	2400      	moveq	r4, #0
      }
   d5d8c:	4620      	mov	r0, r4
   d5d8e:	bd10      	pop	{r4, pc}
   d5d90:	000d7fb0 	.word	0x000d7fb0

000d5d94 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5d94:	b510      	push	{r4, lr}
   d5d96:	2168      	movs	r1, #104	; 0x68
   d5d98:	4604      	mov	r4, r0
   d5d9a:	f001 fe00 	bl	d799e <_ZdlPvj>
   d5d9e:	4620      	mov	r0, r4
   d5da0:	bd10      	pop	{r4, pc}

000d5da2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d5da2:	b510      	push	{r4, lr}
   d5da4:	2128      	movs	r1, #40	; 0x28
   d5da6:	4604      	mov	r4, r0
   d5da8:	f001 fdf9 	bl	d799e <_ZdlPvj>
   d5dac:	4620      	mov	r0, r4
   d5dae:	bd10      	pop	{r4, pc}

000d5db0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d5db0:	b510      	push	{r4, lr}
   d5db2:	2130      	movs	r1, #48	; 0x30
   d5db4:	4604      	mov	r4, r0
   d5db6:	f001 fdf2 	bl	d799e <_ZdlPvj>
   d5dba:	4620      	mov	r0, r4
   d5dbc:	bd10      	pop	{r4, pc}

000d5dbe <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p);
   d5dbe:	f7fe b96c 	b.w	d409a <_ZdlPv>

000d5dc2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d5dc2:	f7fe b96a 	b.w	d409a <_ZdlPv>

000d5dc6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d5dc6:	f7fe b968 	b.w	d409a <_ZdlPv>

000d5dca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5dca:	b510      	push	{r4, lr}
          _M_dispose();
   d5dcc:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5dce:	4604      	mov	r4, r0
          _M_dispose();
   d5dd0:	689b      	ldr	r3, [r3, #8]
   d5dd2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5dd4:	68a3      	ldr	r3, [r4, #8]
   d5dd6:	3b01      	subs	r3, #1
   d5dd8:	60a3      	str	r3, [r4, #8]
   d5dda:	b92b      	cbnz	r3, d5de8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d5ddc:	6823      	ldr	r3, [r4, #0]
   d5dde:	4620      	mov	r0, r4
   d5de0:	68db      	ldr	r3, [r3, #12]
    }
   d5de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d5de6:	4718      	bx	r3
    }
   d5de8:	bd10      	pop	{r4, pc}

000d5dea <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5dea:	b510      	push	{r4, lr}
   d5dec:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5dee:	6800      	ldr	r0, [r0, #0]
   d5df0:	b108      	cbz	r0, d5df6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5df2:	f7ff fbe5 	bl	d55c0 <os_mutex_recursive_destroy>
    }
   d5df6:	4620      	mov	r0, r4
   d5df8:	bd10      	pop	{r4, pc}
	...

000d5dfc <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d5dfc:	b510      	push	{r4, lr}
        mutex_.lock();
   d5dfe:	4b04      	ldr	r3, [pc, #16]	; (d5e10 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d5e00:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5e02:	6818      	ldr	r0, [r3, #0]
   d5e04:	f7ff fbe4 	bl	d55d0 <os_mutex_recursive_lock>
        locked_ = true;
   d5e08:	2301      	movs	r3, #1
   d5e0a:	7023      	strb	r3, [r4, #0]
    }
   d5e0c:	bd10      	pop	{r4, pc}
   d5e0e:	bf00      	nop
   d5e10:	2003e664 	.word	0x2003e664

000d5e14 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d5e14:	b510      	push	{r4, lr}
        mutex_.unlock();
   d5e16:	4b04      	ldr	r3, [pc, #16]	; (d5e28 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d5e18:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5e1a:	6818      	ldr	r0, [r3, #0]
   d5e1c:	f7ff fbe0 	bl	d55e0 <os_mutex_recursive_unlock>
        locked_ = false;
   d5e20:	2300      	movs	r3, #0
   d5e22:	7023      	strb	r3, [r4, #0]
    }
   d5e24:	bd10      	pop	{r4, pc}
   d5e26:	bf00      	nop
   d5e28:	2003e664 	.word	0x2003e664

000d5e2c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d5e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5e2e:	2500      	movs	r5, #0
   d5e30:	1cec      	adds	r4, r5, #3
   d5e32:	428c      	cmp	r4, r1
   d5e34:	d80d      	bhi.n	d5e52 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d5e36:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d5e38:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d5e3a:	5d87      	ldrb	r7, [r0, r6]
   d5e3c:	4297      	cmp	r7, r2
   d5e3e:	d105      	bne.n	d5e4c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5e40:	4426      	add	r6, r4
   d5e42:	42b1      	cmp	r1, r6
   d5e44:	d305      	bcc.n	d5e52 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d5e46:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d5e48:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d5e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d5e4c:	3401      	adds	r4, #1
   d5e4e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5e50:	e7ee      	b.n	d5e30 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d5e52:	2000      	movs	r0, #0
   d5e54:	e7f9      	b.n	d5e4a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d5e56 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5e56:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5e5a:	4604      	mov	r4, r0
   d5e5c:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d5e60:	461e      	mov	r6, r3
   d5e62:	4689      	mov	r9, r1
   d5e64:	ab01      	add	r3, sp, #4
   d5e66:	4690      	mov	r8, r2
   d5e68:	460a      	mov	r2, r1
   d5e6a:	6a01      	ldr	r1, [r0, #32]
   d5e6c:	f7ff ffde 	bl	d5e2c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d5e70:	6a25      	ldr	r5, [r4, #32]
   d5e72:	1cb3      	adds	r3, r6, #2
   d5e74:	bb17      	cbnz	r7, d5ebc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d5e76:	b308      	cbz	r0, d5ebc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5e78:	195f      	adds	r7, r3, r5
   d5e7a:	1a3f      	subs	r7, r7, r0
   d5e7c:	2f1f      	cmp	r7, #31
   d5e7e:	d819      	bhi.n	d5eb4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5e80:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5e84:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5e88:	eba5 0209 	sub.w	r2, r5, r9
   d5e8c:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5e8e:	eb00 0109 	add.w	r1, r0, r9
   d5e92:	eb06 000a 	add.w	r0, r6, sl
   d5e96:	b292      	uxth	r2, r2
   d5e98:	4421      	add	r1, r4
   d5e9a:	4420      	add	r0, r4
   d5e9c:	f001 fec8 	bl	d7c30 <memmove>
            selfData_[offset] = len + 1;
   d5ea0:	1c73      	adds	r3, r6, #1
   d5ea2:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d5ea6:	4632      	mov	r2, r6
   d5ea8:	4641      	mov	r1, r8
   d5eaa:	eb04 000a 	add.w	r0, r4, sl
   d5eae:	f001 feb1 	bl	d7c14 <memcpy>
            selfLen_ = staLen + len + 2;
   d5eb2:	6227      	str	r7, [r4, #32]
}
   d5eb4:	6a20      	ldr	r0, [r4, #32]
   d5eb6:	b002      	add	sp, #8
   d5eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5ebc:	442b      	add	r3, r5
   d5ebe:	2b1f      	cmp	r3, #31
   d5ec0:	d8f8      	bhi.n	d5eb4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d5ec2:	1c73      	adds	r3, r6, #1
   d5ec4:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5ec6:	1ca8      	adds	r0, r5, #2
   d5ec8:	4425      	add	r5, r4
   d5eca:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d5ecc:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5ece:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d5ed2:	4641      	mov	r1, r8
   d5ed4:	4420      	add	r0, r4
   d5ed6:	f001 fe9d 	bl	d7c14 <memcpy>
        selfLen_ += len;
   d5eda:	6a23      	ldr	r3, [r4, #32]
   d5edc:	4433      	add	r3, r6
   d5ede:	6223      	str	r3, [r4, #32]
   d5ee0:	e7e8      	b.n	d5eb4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
	...

000d5ee4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d5ee4:	4a02      	ldr	r2, [pc, #8]	; (d5ef0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d5ee6:	2100      	movs	r1, #0
   d5ee8:	200a      	movs	r0, #10
   d5eea:	f7ff bcc1 	b.w	d5870 <panic_>
   d5eee:	bf00      	nop
   d5ef0:	000d545d 	.word	0x000d545d

000d5ef4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	  switch (__op)
   d5ef4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5ef6:	b538      	push	{r3, r4, r5, lr}
   d5ef8:	4604      	mov	r4, r0
	  switch (__op)
   d5efa:	d007      	beq.n	d5f0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x18>
   d5efc:	2a03      	cmp	r2, #3
   d5efe:	d011      	beq.n	d5f24 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x30>
   d5f00:	2a01      	cmp	r2, #1
   d5f02:	d101      	bne.n	d5f08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5f04:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d5f06:	6023      	str	r3, [r4, #0]
	}
   d5f08:	2000      	movs	r0, #0
   d5f0a:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5f0c:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d5f0e:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5f10:	f7fe f8bf 	bl	d4092 <_Znwj>
   d5f14:	4603      	mov	r3, r0
   d5f16:	2800      	cmp	r0, #0
   d5f18:	d0f5      	beq.n	d5f06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
   d5f1a:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5f1e:	e883 0003 	stmia.w	r3, {r0, r1}
   d5f22:	e7f0      	b.n	d5f06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d5f24:	6800      	ldr	r0, [r0, #0]
   d5f26:	2800      	cmp	r0, #0
   d5f28:	d0ee      	beq.n	d5f08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
   d5f2a:	2108      	movs	r1, #8
   d5f2c:	f001 fd37 	bl	d799e <_ZdlPvj>
   d5f30:	e7ea      	b.n	d5f08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>

000d5f32 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5f32:	b430      	push	{r4, r5}
   d5f34:	460d      	mov	r5, r1
   d5f36:	4611      	mov	r1, r2
   d5f38:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   d5f3a:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5f3c:	6809      	ldr	r1, [r1, #0]
   d5f3e:	6828      	ldr	r0, [r5, #0]
   d5f40:	e9d3 4300 	ldrd	r4, r3, [r3]
   d5f44:	46a4      	mov	ip, r4
      }
   d5f46:	bc30      	pop	{r4, r5}
   d5f48:	4760      	bx	ip

000d5f4a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5f4a:	b510      	push	{r4, lr}
   d5f4c:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d5f4e:	3058      	adds	r0, #88	; 0x58
   d5f50:	f7fe f958 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   d5f54:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   d5f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5f5c:	f7ff be74 	b.w	d5c48 <_ZN6StringD1Ev>

000d5f60 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d5f60:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d5f64:	b2da      	uxtb	r2, r3
   d5f66:	2a09      	cmp	r2, #9
   d5f68:	d801      	bhi.n	d5f6e <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d5f6a:	4618      	mov	r0, r3
   d5f6c:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d5f6e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d5f72:	2b05      	cmp	r3, #5
   d5f74:	d801      	bhi.n	d5f7a <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d5f76:	3857      	subs	r0, #87	; 0x57
   d5f78:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d5f7a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d5f7e:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d5f80:	bf94      	ite	ls
   d5f82:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d5f84:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d5f88:	4770      	bx	lr

000d5f8a <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d5f8a:	b510      	push	{r4, lr}
            locked_(false) {
   d5f8c:	2300      	movs	r3, #0
    WiringBleLock() :
   d5f8e:	4604      	mov	r4, r0
            locked_(false) {
   d5f90:	7003      	strb	r3, [r0, #0]
        lock();
   d5f92:	f7ff ff33 	bl	d5dfc <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d5f96:	4620      	mov	r0, r4
   d5f98:	bd10      	pop	{r4, pc}

000d5f9a <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d5f9a:	b510      	push	{r4, lr}
        if (locked_) {
   d5f9c:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d5f9e:	4604      	mov	r4, r0
        if (locked_) {
   d5fa0:	b10b      	cbz	r3, d5fa6 <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d5fa2:	f7ff ff37 	bl	d5e14 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d5fa6:	4620      	mov	r0, r4
   d5fa8:	bd10      	pop	{r4, pc}

000d5faa <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d5faa:	b082      	sub	sp, #8
   d5fac:	4603      	mov	r3, r0
    address_ = addr;
   d5fae:	6808      	ldr	r0, [r1, #0]
   d5fb0:	6849      	ldr	r1, [r1, #4]
   d5fb2:	466a      	mov	r2, sp
   d5fb4:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d5fb6:	466a      	mov	r2, sp
   d5fb8:	ca03      	ldmia	r2!, {r0, r1}
   d5fba:	6018      	str	r0, [r3, #0]
}
   d5fbc:	4618      	mov	r0, r3
    address_ = addr.address_;
   d5fbe:	6059      	str	r1, [r3, #4]
}
   d5fc0:	b002      	add	sp, #8
   d5fc2:	4770      	bx	lr

000d5fc4 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d5fc4:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d5fc6:	7982      	ldrb	r2, [r0, #6]
   d5fc8:	798b      	ldrb	r3, [r1, #6]
   d5fca:	429a      	cmp	r2, r3
   d5fcc:	d106      	bne.n	d5fdc <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d5fce:	2206      	movs	r2, #6
   d5fd0:	f001 fe12 	bl	d7bf8 <memcmp>
   d5fd4:	fab0 f080 	clz	r0, r0
   d5fd8:	0940      	lsrs	r0, r0, #5
}
   d5fda:	bd08      	pop	{r3, pc}
    return false;
   d5fdc:	2000      	movs	r0, #0
   d5fde:	e7fc      	b.n	d5fda <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d5fe0 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d5fe0:	f04f 33ff 	mov.w	r3, #4294967295
   d5fe4:	6003      	str	r3, [r0, #0]
   d5fe6:	8083      	strh	r3, [r0, #4]
}
   d5fe8:	2000      	movs	r0, #0
   d5fea:	4770      	bx	lr

000d5fec <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d5fec:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d5fee:	b508      	push	{r3, lr}
        : address_{} {
   d5ff0:	6001      	str	r1, [r0, #0]
   d5ff2:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d5ff4:	4602      	mov	r2, r0
    clear();
   d5ff6:	f7ff fff3 	bl	d5fe0 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d5ffa:	7191      	strb	r1, [r2, #6]
}
   d5ffc:	4610      	mov	r0, r2
   d5ffe:	bd08      	pop	{r3, pc}

000d6000 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d6000:	2201      	movs	r2, #1
   d6002:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6004:	4a06      	ldr	r2, [pc, #24]	; (d6020 <_ZN8particle7BleUuidC1Ev+0x20>)
   d6006:	6811      	ldr	r1, [r2, #0]
   d6008:	6001      	str	r1, [r0, #0]
   d600a:	6851      	ldr	r1, [r2, #4]
   d600c:	6041      	str	r1, [r0, #4]
   d600e:	8911      	ldrh	r1, [r2, #8]
   d6010:	7a92      	ldrb	r2, [r2, #10]
   d6012:	7282      	strb	r2, [r0, #10]
   d6014:	2200      	movs	r2, #0
   d6016:	8101      	strh	r1, [r0, #8]
   d6018:	f8c0 200b 	str.w	r2, [r0, #11]
   d601c:	73c2      	strb	r2, [r0, #15]
}
   d601e:	4770      	bx	lr
   d6020:	000d86b0 	.word	0x000d86b0

000d6024 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d6024:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d6026:	690b      	ldr	r3, [r1, #16]
   d6028:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d602a:	f101 0210 	add.w	r2, r1, #16
   d602e:	4603      	mov	r3, r0
   d6030:	f851 4b04 	ldr.w	r4, [r1], #4
   d6034:	f843 4b04 	str.w	r4, [r3], #4
   d6038:	4291      	cmp	r1, r2
   d603a:	d1f9      	bne.n	d6030 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d603c:	bd10      	pop	{r4, pc}

000d603e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d603e:	b510      	push	{r4, lr}
    if (uuid128) {
   d6040:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d6042:	4604      	mov	r4, r0
    if (uuid128) {
   d6044:	b1b1      	cbz	r1, d6074 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d6046:	2a01      	cmp	r2, #1
   d6048:	f101 0210 	add.w	r2, r1, #16
   d604c:	d10a      	bne.n	d6064 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d604e:	4601      	mov	r1, r0
   d6050:	f853 0b04 	ldr.w	r0, [r3], #4
   d6054:	f841 0b04 	str.w	r0, [r1], #4
   d6058:	4293      	cmp	r3, r2
   d605a:	d1f9      	bne.n	d6050 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d605c:	2301      	movs	r3, #1
   d605e:	6123      	str	r3, [r4, #16]
}
   d6060:	4620      	mov	r0, r4
   d6062:	bd10      	pop	{r4, pc}
   d6064:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d6066:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d606a:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d606e:	429a      	cmp	r2, r3
   d6070:	d1f9      	bne.n	d6066 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d6072:	e7f3      	b.n	d605c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d6074:	2210      	movs	r2, #16
   d6076:	f001 fdf5 	bl	d7c64 <memset>
   d607a:	e7f1      	b.n	d6060 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d607c <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d607c:	b538      	push	{r3, r4, r5, lr}
   d607e:	4604      	mov	r4, r0
   d6080:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d6082:	461a      	mov	r2, r3
   d6084:	f7ff ffdb 	bl	d603e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d6088:	81a5      	strh	r5, [r4, #12]
}
   d608a:	4620      	mov	r0, r4
   d608c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6090 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d6090:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d6092:	6902      	ldr	r2, [r0, #16]
   d6094:	b922      	cbnz	r2, d60a0 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d6096:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6098:	3800      	subs	r0, #0
   d609a:	bf18      	it	ne
   d609c:	2001      	movne	r0, #1
}
   d609e:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d60a0:	4902      	ldr	r1, [pc, #8]	; (d60ac <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d60a2:	2210      	movs	r2, #16
   d60a4:	f001 fda8 	bl	d7bf8 <memcmp>
   d60a8:	e7f6      	b.n	d6098 <_ZNK8particle7BleUuid7isValidEv+0x8>
   d60aa:	bf00      	nop
   d60ac:	000d86d0 	.word	0x000d86d0

000d60b0 <_ZNK8particle7BleUuid4typeEv>:
}
   d60b0:	6900      	ldr	r0, [r0, #16]
   d60b2:	4770      	bx	lr

000d60b4 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d60b4:	b538      	push	{r3, r4, r5, lr}
   d60b6:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d60b8:	2214      	movs	r2, #20
   d60ba:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d60bc:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d60be:	f001 fdd1 	bl	d7c64 <memset>
    if (type_ == BleUuidType::SHORT) {
   d60c2:	6923      	ldr	r3, [r4, #16]
   d60c4:	b93b      	cbnz	r3, d60d6 <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d60c6:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d60c8:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d60ca:	7b23      	ldrb	r3, [r4, #12]
   d60cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d60d0:	802b      	strh	r3, [r5, #0]
}
   d60d2:	4628      	mov	r0, r5
   d60d4:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d60d6:	2301      	movs	r3, #1
   d60d8:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d60da:	f104 0210 	add.w	r2, r4, #16
   d60de:	462b      	mov	r3, r5
   d60e0:	f854 1b04 	ldr.w	r1, [r4], #4
   d60e4:	f843 1b04 	str.w	r1, [r3], #4
   d60e8:	4294      	cmp	r4, r2
   d60ea:	d1f9      	bne.n	d60e0 <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d60ec:	e7f1      	b.n	d60d2 <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d60ee <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d60ee:	7b42      	ldrb	r2, [r0, #13]
   d60f0:	7b00      	ldrb	r0, [r0, #12]
}
   d60f2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d60f6:	4770      	bx	lr

000d60f8 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d60f8:	4770      	bx	lr

000d60fa <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d60fa:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d60fc:	6902      	ldr	r2, [r0, #16]
   d60fe:	690b      	ldr	r3, [r1, #16]
   d6100:	429a      	cmp	r2, r3
   d6102:	d106      	bne.n	d6112 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d6104:	2210      	movs	r2, #16
   d6106:	f001 fd77 	bl	d7bf8 <memcmp>
   d610a:	fab0 f080 	clz	r0, r0
   d610e:	0940      	lsrs	r0, r0, #5
}
   d6110:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d6112:	2000      	movs	r0, #0
   d6114:	e7fc      	b.n	d6110 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d6118 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d6118:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d611a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d611e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6120:	4b32      	ldr	r3, [pc, #200]	; (d61ec <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d6122:	681a      	ldr	r2, [r3, #0]
   d6124:	6002      	str	r2, [r0, #0]
   d6126:	685a      	ldr	r2, [r3, #4]
   d6128:	6042      	str	r2, [r0, #4]
   d612a:	2500      	movs	r5, #0
   d612c:	891a      	ldrh	r2, [r3, #8]
   d612e:	7a9b      	ldrb	r3, [r3, #10]
   d6130:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d6132:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6134:	7283      	strb	r3, [r0, #10]
   d6136:	f8c0 500b 	str.w	r5, [r0, #11]
   d613a:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d613c:	460e      	mov	r6, r1
   d613e:	b321      	cbz	r1, d618a <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d6140:	2124      	movs	r1, #36	; 0x24
   d6142:	4630      	mov	r0, r6
   d6144:	f001 fdcc 	bl	d7ce0 <strnlen>
   d6148:	2804      	cmp	r0, #4
   d614a:	d121      	bne.n	d6190 <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d614c:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6150:	af01      	add	r7, sp, #4
   d6152:	1cb5      	adds	r5, r6, #2
   d6154:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d6156:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d615a:	f7ff ff01 	bl	d5f60 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d615e:	f1b0 0800 	subs.w	r8, r0, #0
   d6162:	db10      	blt.n	d6186 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d6164:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d6168:	f7ff fefa 	bl	d5f60 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d616c:	2800      	cmp	r0, #0
   d616e:	db0a      	blt.n	d6186 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d6170:	3502      	adds	r5, #2
   d6172:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d6176:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d6178:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d617c:	d1eb      	bne.n	d6156 <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d617e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d6182:	ba5b      	rev16	r3, r3
   d6184:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d6186:	2300      	movs	r3, #0
   d6188:	6123      	str	r3, [r4, #16]
}
   d618a:	b002      	add	sp, #8
   d618c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d6190:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6192:	2124      	movs	r1, #36	; 0x24
   d6194:	4630      	mov	r0, r6
   d6196:	f001 fda3 	bl	d7ce0 <strnlen>
   d619a:	42a8      	cmp	r0, r5
   d619c:	d806      	bhi.n	d61ac <_ZN8particle7BleUuid9constructEPKc+0x94>
   d619e:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d61a0:	2300      	movs	r3, #0
    while (len > 0) {
   d61a2:	42bc      	cmp	r4, r7
   d61a4:	d0f1      	beq.n	d618a <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d61a6:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d61aa:	e7fa      	b.n	d61a2 <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d61ac:	2f00      	cmp	r7, #0
   d61ae:	d0ec      	beq.n	d618a <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d61b0:	5d70      	ldrb	r0, [r6, r5]
   d61b2:	f7ff fed5 	bl	d5f60 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d61b6:	0603      	lsls	r3, r0, #24
   d61b8:	d415      	bmi.n	d61e6 <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d61ba:	0100      	lsls	r0, r0, #4
   d61bc:	3f01      	subs	r7, #1
   d61be:	fa5f f880 	uxtb.w	r8, r0
   d61c2:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d61c6:	2124      	movs	r1, #36	; 0x24
   d61c8:	4630      	mov	r0, r6
   d61ca:	f001 fd89 	bl	d7ce0 <strnlen>
   d61ce:	3501      	adds	r5, #1
   d61d0:	42a8      	cmp	r0, r5
   d61d2:	d908      	bls.n	d61e6 <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d61d4:	5d70      	ldrb	r0, [r6, r5]
   d61d6:	f7ff fec3 	bl	d5f60 <_ZN8particle11hexToNibbleEc>
   d61da:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d61dc:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d61de:	bfa4      	itt	ge
   d61e0:	ea40 0008 	orrge.w	r0, r0, r8
   d61e4:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d61e6:	3501      	adds	r5, #1
   d61e8:	e7d3      	b.n	d6192 <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d61ea:	bf00      	nop
   d61ec:	000d86b0 	.word	0x000d86b0

000d61f0 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d61f0:	b513      	push	{r0, r1, r4, lr}
   d61f2:	4604      	mov	r4, r0
   d61f4:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d61f6:	f7ff ff03 	bl	d6000 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d61fa:	4620      	mov	r0, r4
   d61fc:	9901      	ldr	r1, [sp, #4]
   d61fe:	f7ff ff8b 	bl	d6118 <_ZN8particle7BleUuid9constructEPKc>
}
   d6202:	4620      	mov	r0, r4
   d6204:	b002      	add	sp, #8
   d6206:	bd10      	pop	{r4, pc}

000d6208 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d6208:	b430      	push	{r4, r5}
   d620a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d620e:	b912      	cbnz	r2, d6216 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d6210:	6a00      	ldr	r0, [r0, #32]
}
   d6212:	bc30      	pop	{r4, r5}
   d6214:	4770      	bx	lr
   d6216:	9502      	str	r5, [sp, #8]
   d6218:	bc30      	pop	{r4, r5}
   d621a:	f7ff be1c 	b.w	d5e56 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d621e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d621e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6220:	4604      	mov	r4, r0
          selfLen_(0) {
   d6222:	4602      	mov	r2, r0
   d6224:	f100 011f 	add.w	r1, r0, #31
   d6228:	2300      	movs	r3, #0
   d622a:	f802 3b01 	strb.w	r3, [r2], #1
   d622e:	4291      	cmp	r1, r2
   d6230:	d1fb      	bne.n	d622a <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d6232:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6234:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d6236:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6238:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d623a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d623e:	4619      	mov	r1, r3
   d6240:	f10d 020f 	add.w	r2, sp, #15
   d6244:	4620      	mov	r0, r4
   d6246:	f7ff ffdf 	bl	d6208 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d624a:	4620      	mov	r0, r4
   d624c:	b004      	add	sp, #16
   d624e:	bd10      	pop	{r4, pc}

000d6250 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   d6250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6252:	460a      	mov	r2, r1
   d6254:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   d6256:	2114      	movs	r1, #20
   d6258:	4610      	mov	r0, r2
   d625a:	9203      	str	r2, [sp, #12]
   d625c:	f001 fd40 	bl	d7ce0 <strnlen>
   d6260:	2100      	movs	r1, #0
   d6262:	4603      	mov	r3, r0
   d6264:	9100      	str	r1, [sp, #0]
   d6266:	9a03      	ldr	r2, [sp, #12]
   d6268:	2109      	movs	r1, #9
   d626a:	4620      	mov	r0, r4
   d626c:	f7ff ffcc 	bl	d6208 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d6270:	b004      	add	sp, #16
   d6272:	bd10      	pop	{r4, pc}

000d6274 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d6274:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d6276:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d6278:	460e      	mov	r6, r1
   d627a:	ab01      	add	r3, sp, #4
   d627c:	6a01      	ldr	r1, [r0, #32]
   d627e:	4604      	mov	r4, r0
   d6280:	f7ff fdd4 	bl	d5e2c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d6284:	4605      	mov	r5, r0
   d6286:	b178      	cbz	r0, d62a8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d6288:	9801      	ldr	r0, [sp, #4]
   d628a:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d628c:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d628e:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d6290:	4421      	add	r1, r4
   d6292:	1b52      	subs	r2, r2, r5
   d6294:	4420      	add	r0, r4
   d6296:	f001 fcbd 	bl	d7c14 <memcpy>
        selfLen_ -= len;
   d629a:	6a20      	ldr	r0, [r4, #32]
   d629c:	1b40      	subs	r0, r0, r5
   d629e:	6220      	str	r0, [r4, #32]
        remove(type);
   d62a0:	4631      	mov	r1, r6
   d62a2:	4620      	mov	r0, r4
   d62a4:	f7ff ffe6 	bl	d6274 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d62a8:	b002      	add	sp, #8
   d62aa:	bd70      	pop	{r4, r5, r6, pc}

000d62ac <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d62ac:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   d62ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d62b2:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d62b4:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   d62b6:	8043      	strh	r3, [r0, #2]
   d62b8:	220e      	movs	r2, #14
   d62ba:	4629      	mov	r1, r5
   d62bc:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d62be:	7105      	strb	r5, [r0, #4]
   d62c0:	3006      	adds	r0, #6
   d62c2:	f001 fccf 	bl	d7c64 <memset>
   d62c6:	f104 0014 	add.w	r0, r4, #20
   d62ca:	f7ff fe99 	bl	d6000 <_ZN8particle7BleUuidC1Ev>
   d62ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d62d2:	f7ff fe95 	bl	d6000 <_ZN8particle7BleUuidC1Ev>
   d62d6:	4904      	ldr	r1, [pc, #16]	; (d62e8 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d62d8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d62dc:	f7ff fcff 	bl	d5cde <_ZN6StringC1EPKc>
    _Function_base() : _M_manager(nullptr) { }
   d62e0:	6565      	str	r5, [r4, #84]	; 0x54
    }
   d62e2:	4620      	mov	r0, r4
   d62e4:	bd38      	pop	{r3, r4, r5, pc}
   d62e6:	bf00      	nop
   d62e8:	000d7e58 	.word	0x000d7e58

000d62ec <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d62ec:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d62ee:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d62f2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d62f6:	4293      	cmp	r3, r2
   d62f8:	4618      	mov	r0, r3
   d62fa:	d006      	beq.n	d630a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d62fc:	6804      	ldr	r4, [r0, #0]
   d62fe:	8824      	ldrh	r4, [r4, #0]
   d6300:	428c      	cmp	r4, r1
   d6302:	f103 0308 	add.w	r3, r3, #8
   d6306:	d1f6      	bne.n	d62f6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d6308:	bd10      	pop	{r4, pc}
        return nullptr;
   d630a:	2000      	movs	r0, #0
   d630c:	e7fc      	b.n	d6308 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d6310 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d6310:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6312:	4606      	mov	r6, r0
   d6314:	b085      	sub	sp, #20
   d6316:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d6318:	460d      	mov	r5, r1
   d631a:	2900      	cmp	r1, #0
   d631c:	d050      	beq.n	d63c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d631e:	2a00      	cmp	r2, #0
   d6320:	d04e      	beq.n	d63c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
    void onDataReceived(void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance) {
        onDataReceived((callback && instance) ? std::bind(callback, instance, _1, _2, _3) :(BleOnDataReceivedStdFunction) nullptr);
    }

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d6322:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   d6324:	7823      	ldrb	r3, [r4, #0]
   d6326:	2af4      	cmp	r2, #244	; 0xf4
   d6328:	bf28      	it	cs
   d632a:	22f4      	movcs	r2, #244	; 0xf4
   d632c:	b343      	cbz	r3, d6380 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d632e:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d6330:	0798      	lsls	r0, r3, #30
   d6332:	d509      	bpl.n	d6348 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d6334:	89a0      	ldrh	r0, [r4, #12]
   d6336:	9203      	str	r2, [sp, #12]
   d6338:	2300      	movs	r3, #0
   d633a:	f7ff f8d3 	bl	d54e4 <hal_ble_gatt_server_set_characteristic_value>
   d633e:	2800      	cmp	r0, #0
   d6340:	9a03      	ldr	r2, [sp, #12]
   d6342:	da03      	bge.n	d634c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d6344:	b005      	add	sp, #20
   d6346:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d6348:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d634c:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d634e:	7923      	ldrb	r3, [r4, #4]
   d6350:	06d9      	lsls	r1, r3, #27
   d6352:	d509      	bpl.n	d6368 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d6354:	2f01      	cmp	r7, #1
   d6356:	d007      	beq.n	d6368 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6358:	89a0      	ldrh	r0, [r4, #12]
   d635a:	2300      	movs	r3, #0
   d635c:	4629      	mov	r1, r5
}
   d635e:	b005      	add	sp, #20
   d6360:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6364:	f7ff b8f0 	b.w	d5548 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d6368:	069b      	lsls	r3, r3, #26
   d636a:	d5eb      	bpl.n	d6344 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d636c:	2f02      	cmp	r7, #2
   d636e:	d0e9      	beq.n	d6344 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6370:	89a0      	ldrh	r0, [r4, #12]
   d6372:	2300      	movs	r3, #0
   d6374:	4629      	mov	r1, r5
}
   d6376:	b005      	add	sp, #20
   d6378:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d637c:	f7ff b8ee 	b.w	d555c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d6380:	8860      	ldrh	r0, [r4, #2]
   d6382:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6386:	4288      	cmp	r0, r1
   d6388:	d01c      	beq.n	d63c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d638a:	7921      	ldrb	r1, [r4, #4]
   d638c:	074e      	lsls	r6, r1, #29
   d638e:	d501      	bpl.n	d6394 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d6390:	2f01      	cmp	r7, #1
   d6392:	d104      	bne.n	d639e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d6394:	070b      	lsls	r3, r1, #28
   d6396:	d409      	bmi.n	d63ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d6398:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d639c:	e7d2      	b.n	d6344 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d639e:	89a1      	ldrh	r1, [r4, #12]
   d63a0:	9300      	str	r3, [sp, #0]
   d63a2:	4613      	mov	r3, r2
   d63a4:	462a      	mov	r2, r5
   d63a6:	f7ff f8b1 	bl	d550c <hal_ble_gatt_client_write_without_response>
   d63aa:	e7cb      	b.n	d6344 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d63ac:	2f02      	cmp	r7, #2
   d63ae:	d0f3      	beq.n	d6398 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d63b0:	2300      	movs	r3, #0
   d63b2:	89a1      	ldrh	r1, [r4, #12]
   d63b4:	9300      	str	r3, [sp, #0]
   d63b6:	4613      	mov	r3, r2
   d63b8:	462a      	mov	r2, r5
   d63ba:	f7ff f89d 	bl	d54f8 <hal_ble_gatt_client_write_with_response>
   d63be:	e7c1      	b.n	d6344 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d63c0:	4802      	ldr	r0, [pc, #8]	; (d63cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d63c2:	e7bf      	b.n	d6344 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d63c4:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d63c8:	e7bc      	b.n	d6344 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d63ca:	bf00      	nop
   d63cc:	fffffef2 	.word	0xfffffef2

000d63d0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d63d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d63d4:	2600      	movs	r6, #0
   d63d6:	6006      	str	r6, [r0, #0]
   d63d8:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d63da:	2028      	movs	r0, #40	; 0x28
   d63dc:	460c      	mov	r4, r1
   d63de:	f7fd fe58 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d63e2:	1e05      	subs	r5, r0, #0
   d63e4:	f105 080c 	add.w	r8, r5, #12
   d63e8:	d00f      	beq.n	d640a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d63ea:	2301      	movs	r3, #1
   d63ec:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d63f0:	4b08      	ldr	r3, [pc, #32]	; (d6414 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d63f2:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   d63f4:	4640      	mov	r0, r8
   d63f6:	f7ff fe03 	bl	d6000 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   d63fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   d63fc:	622e      	str	r6, [r5, #32]
   d63fe:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   d6402:	4646      	mov	r6, r8
   d6404:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6406:	6823      	ldr	r3, [r4, #0]
   d6408:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   d640a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d640e:	4638      	mov	r0, r7
   d6410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6414:	000d8680 	.word	0x000d8680

000d6418 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d6418:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d641a:	2500      	movs	r5, #0
   d641c:	6005      	str	r5, [r0, #0]
   d641e:	4606      	mov	r6, r0
   d6420:	2030      	movs	r0, #48	; 0x30
   d6422:	f7fd fe36 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d6426:	4604      	mov	r4, r0
   d6428:	b188      	cbz	r0, d644e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d642a:	2301      	movs	r3, #1
   d642c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d6430:	4b09      	ldr	r3, [pc, #36]	; (d6458 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d6432:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d6434:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6438:	8183      	strh	r3, [r0, #12]
   d643a:	300e      	adds	r0, #14
   d643c:	f7ff fdd6 	bl	d5fec <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d6440:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d6444:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d6448:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d644c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d644e:	6074      	str	r4, [r6, #4]
   d6450:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d6452:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d6454:	4630      	mov	r0, r6
   d6456:	bd70      	pop	{r4, r5, r6, pc}
   d6458:	000d869c 	.word	0x000d869c

000d645c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d645c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d645e:	460d      	mov	r5, r1
   d6460:	4604      	mov	r4, r0
    WiringBleLock lk;
   d6462:	a801      	add	r0, sp, #4
   d6464:	f7ff fd91 	bl	d5f8a <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d6468:	682a      	ldr	r2, [r5, #0]
   d646a:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d646e:	6023      	str	r3, [r4, #0]
   d6470:	6853      	ldr	r3, [r2, #4]
   d6472:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d6474:	a801      	add	r0, sp, #4
   d6476:	f7ff fd90 	bl	d5f9a <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d647a:	4620      	mov	r0, r4
   d647c:	b003      	add	sp, #12
   d647e:	bd30      	pop	{r4, r5, pc}

000d6480 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d6480:	b530      	push	{r4, r5, lr}
   d6482:	4605      	mov	r5, r0
   d6484:	b087      	sub	sp, #28
   d6486:	460c      	mov	r4, r1
    WiringBleLock lk;
   d6488:	a801      	add	r0, sp, #4
   d648a:	f7ff fd7e 	bl	d5f8a <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d648e:	682a      	ldr	r2, [r5, #0]
   d6490:	6823      	ldr	r3, [r4, #0]
   d6492:	8812      	ldrh	r2, [r2, #0]
   d6494:	881b      	ldrh	r3, [r3, #0]
   d6496:	429a      	cmp	r2, r3
   d6498:	d10d      	bne.n	d64b6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d649a:	4629      	mov	r1, r5
   d649c:	a802      	add	r0, sp, #8
   d649e:	f7ff ffdd 	bl	d645c <_ZNK8particle13BlePeerDevice7addressEv>
   d64a2:	4621      	mov	r1, r4
   d64a4:	a804      	add	r0, sp, #16
   d64a6:	f7ff ffd9 	bl	d645c <_ZNK8particle13BlePeerDevice7addressEv>
   d64aa:	a904      	add	r1, sp, #16
   d64ac:	a802      	add	r0, sp, #8
   d64ae:	f7ff fd89 	bl	d5fc4 <_ZNK8particle10BleAddresseqERKS0_>
   d64b2:	4604      	mov	r4, r0
   d64b4:	b900      	cbnz	r0, d64b8 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d64b6:	2400      	movs	r4, #0
    WiringBleLock lk;
   d64b8:	a801      	add	r0, sp, #4
   d64ba:	f7ff fd6e 	bl	d5f9a <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d64be:	4620      	mov	r0, r4
   d64c0:	b007      	add	sp, #28
   d64c2:	bd30      	pop	{r4, r5, pc}

000d64c4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d64c4:	b510      	push	{r4, lr}
   d64c6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d64c8:	2054      	movs	r0, #84	; 0x54
   d64ca:	f7fd fde2 	bl	d4092 <_Znwj>
   d64ce:	4601      	mov	r1, r0
   d64d0:	b160      	cbz	r0, d64ec <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d64d2:	2300      	movs	r3, #0
   d64d4:	e9c0 3300 	strd	r3, r3, [r0]
   d64d8:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d64dc:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d64e0:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d64e4:	6203      	str	r3, [r0, #32]
   d64e6:	62c3      	str	r3, [r0, #44]	; 0x2c
   d64e8:	63c3      	str	r3, [r0, #60]	; 0x3c
   d64ea:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d64ec:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d64ee:	b919      	cbnz	r1, d64f8 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d64f0:	4a09      	ldr	r2, [pc, #36]	; (d6518 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d64f2:	200a      	movs	r0, #10
   d64f4:	f7ff f9bc 	bl	d5870 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d64f8:	2000      	movs	r0, #0
   d64fa:	f7fe ffbf 	bl	d547c <hal_ble_stack_init>
   d64fe:	b120      	cbz	r0, d650a <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d6500:	4a05      	ldr	r2, [pc, #20]	; (d6518 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d6502:	2100      	movs	r1, #0
   d6504:	200a      	movs	r0, #10
   d6506:	f7ff f9b3 	bl	d5870 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d650a:	6821      	ldr	r1, [r4, #0]
   d650c:	4803      	ldr	r0, [pc, #12]	; (d651c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d650e:	2200      	movs	r2, #0
   d6510:	f7ff f810 	bl	d5534 <hal_ble_set_callback_on_periph_link_events>
}
   d6514:	4620      	mov	r0, r4
   d6516:	bd10      	pop	{r4, pc}
   d6518:	000d545d 	.word	0x000d545d
   d651c:	000d68a9 	.word	0x000d68a9

000d6520 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d6520:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d6522:	4c0b      	ldr	r4, [pc, #44]	; (d6550 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6524:	7823      	ldrb	r3, [r4, #0]
   d6526:	f3bf 8f5b 	dmb	ish
   d652a:	07db      	lsls	r3, r3, #31
   d652c:	d40e      	bmi.n	d654c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d652e:	4620      	mov	r0, r4
   d6530:	f7fd fdc0 	bl	d40b4 <__cxa_guard_acquire>
   d6534:	b150      	cbz	r0, d654c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d6536:	4807      	ldr	r0, [pc, #28]	; (d6554 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6538:	f7ff ffc4 	bl	d64c4 <_ZN8particle14BleLocalDeviceC1Ev>
   d653c:	4620      	mov	r0, r4
   d653e:	f7fd fdbe 	bl	d40be <__cxa_guard_release>
   d6542:	4a05      	ldr	r2, [pc, #20]	; (d6558 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d6544:	4905      	ldr	r1, [pc, #20]	; (d655c <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d6546:	4803      	ldr	r0, [pc, #12]	; (d6554 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6548:	f001 fa24 	bl	d7994 <__aeabi_atexit>
    return instance;
}
   d654c:	4801      	ldr	r0, [pc, #4]	; (d6554 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d654e:	bd10      	pop	{r4, pc}
   d6550:	2003e65c 	.word	0x2003e65c
   d6554:	2003e668 	.word	0x2003e668
   d6558:	2003e5e4 	.word	0x2003e5e4
   d655c:	000d6729 	.word	0x000d6729

000d6560 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d6560:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   d6562:	6803      	ldr	r3, [r0, #0]
   d6564:	3b09      	subs	r3, #9
   d6566:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d6568:	b08d      	sub	sp, #52	; 0x34
   d656a:	4604      	mov	r4, r0
   d656c:	460d      	mov	r5, r1
    switch (event->type) {
   d656e:	d811      	bhi.n	d6594 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d6570:	f7ff ffd6 	bl	d6520 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d6574:	88a1      	ldrh	r1, [r4, #4]
   d6576:	6800      	ldr	r0, [r0, #0]
   d6578:	f7ff feb8 	bl	d62ec <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d657c:	4603      	mov	r3, r0
   d657e:	b958      	cbnz	r0, d6598 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d6580:	2220      	movs	r2, #32
   d6582:	e9cd 2004 	strd	r2, r0, [sp, #16]
   d6586:	4a0b      	ldr	r2, [pc, #44]	; (d65b4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d6588:	9200      	str	r2, [sp, #0]
   d658a:	490b      	ldr	r1, [pc, #44]	; (d65b8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d658c:	aa04      	add	r2, sp, #16
   d658e:	2032      	movs	r0, #50	; 0x32
   d6590:	f7ff f976 	bl	d5880 <log_message>
}
   d6594:	b00d      	add	sp, #52	; 0x34
   d6596:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   d6598:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   d659a:	2a00      	cmp	r2, #0
   d659c:	d0fa      	beq.n	d6594 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   d659e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d65a2:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   d65a6:	e9cd 1203 	strd	r1, r2, [sp, #12]
   d65aa:	6dac      	ldr	r4, [r5, #88]	; 0x58
   d65ac:	aa04      	add	r2, sp, #16
   d65ae:	a903      	add	r1, sp, #12
   d65b0:	47a0      	blx	r4
}
   d65b2:	e7ef      	b.n	d6594 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   d65b4:	000d858f 	.word	0x000d858f
   d65b8:	000d8568 	.word	0x000d8568

000d65bc <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d65bc:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   d65be:	2000      	movs	r0, #0
   d65c0:	f7fe ff5c 	bl	d547c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   d65c4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d65c8:	bd08      	pop	{r3, pc}

000d65ca <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d65ca:	4608      	mov	r0, r1
   d65cc:	b911      	cbnz	r1, d65d4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d65ce:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d65d0:	f7fe bf5c 	b.w	d548c <hal_ble_gap_set_advertising_data>
   d65d4:	6a09      	ldr	r1, [r1, #32]
   d65d6:	2200      	movs	r2, #0
   d65d8:	e7fa      	b.n	d65d0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d65da <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d65da:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d65dc:	4608      	mov	r0, r1
   d65de:	b929      	cbnz	r1, d65ec <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d65e0:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d65e2:	b003      	add	sp, #12
   d65e4:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d65e8:	f7fe bf58 	b.w	d549c <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d65ec:	2101      	movs	r1, #1
   d65ee:	9001      	str	r0, [sp, #4]
   d65f0:	f7ff fe40 	bl	d6274 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d65f4:	9801      	ldr	r0, [sp, #4]
   d65f6:	2200      	movs	r2, #0
   d65f8:	6a01      	ldr	r1, [r0, #32]
   d65fa:	e7f2      	b.n	d65e2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d65fc <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d65fc:	b538      	push	{r3, r4, r5, lr}
   d65fe:	4604      	mov	r4, r0
   d6600:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   d6602:	f7ff ffe2 	bl	d65ca <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d6606:	2800      	cmp	r0, #0
   d6608:	db0a      	blt.n	d6620 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   d660a:	4629      	mov	r1, r5
   d660c:	4620      	mov	r0, r4
   d660e:	f7ff ffe4 	bl	d65da <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d6612:	2800      	cmp	r0, #0
   d6614:	db04      	blt.n	d6620 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   d6616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   d661a:	2000      	movs	r0, #0
   d661c:	f7fe bf46 	b.w	d54ac <hal_ble_gap_start_advertising>
}
   d6620:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6624 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d6624:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6626:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d6628:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d662a:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d662c:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d662e:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6630:	f7fd fd2f 	bl	d4092 <_Znwj>
   d6634:	b118      	cbz	r0, d663e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d6636:	682b      	ldr	r3, [r5, #0]
   d6638:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d663a:	686b      	ldr	r3, [r5, #4]
   d663c:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d663e:	4b03      	ldr	r3, [pc, #12]	; (d664c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   d6640:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6642:	4b03      	ldr	r3, [pc, #12]	; (d6650 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6644:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6646:	60a3      	str	r3, [r4, #8]
      }
   d6648:	4620      	mov	r0, r4
   d664a:	bd38      	pop	{r3, r4, r5, pc}
   d664c:	000d5f33 	.word	0x000d5f33
   d6650:	000d5ef5 	.word	0x000d5ef5

000d6654 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d6654:	680b      	ldr	r3, [r1, #0]
   d6656:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d6658:	b113      	cbz	r3, d6660 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d665a:	685a      	ldr	r2, [r3, #4]
   d665c:	3201      	adds	r2, #1
   d665e:	605a      	str	r2, [r3, #4]
      }
   d6660:	4770      	bx	lr

000d6662 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d6662:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6664:	f851 3b04 	ldr.w	r3, [r1], #4
   d6668:	4604      	mov	r4, r0
   d666a:	f840 3b04 	str.w	r3, [r0], #4
   d666e:	f7ff fff1 	bl	d6654 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d6672:	6823      	ldr	r3, [r4, #0]
   d6674:	b90b      	cbnz	r3, d667a <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d6676:	f7ff fc35 	bl	d5ee4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d667a:	4620      	mov	r0, r4
   d667c:	bd10      	pop	{r4, pc}

000d667e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d667e:	b510      	push	{r4, lr}
   d6680:	f851 3b04 	ldr.w	r3, [r1], #4
   d6684:	4604      	mov	r4, r0
   d6686:	f840 3b04 	str.w	r3, [r0], #4
   d668a:	f7ff ffe3 	bl	d6654 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d668e:	4620      	mov	r0, r4
   d6690:	bd10      	pop	{r4, pc}

000d6692 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d6692:	b510      	push	{r4, lr}
   d6694:	f851 3b04 	ldr.w	r3, [r1], #4
   d6698:	4604      	mov	r4, r0
   d669a:	f840 3b04 	str.w	r3, [r0], #4
   d669e:	f7ff ffd9 	bl	d6654 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d66a2:	4620      	mov	r0, r4
   d66a4:	bd10      	pop	{r4, pc}

000d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d66a6:	b510      	push	{r4, lr}
   d66a8:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d66aa:	6800      	ldr	r0, [r0, #0]
   d66ac:	b128      	cbz	r0, d66ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d66ae:	6843      	ldr	r3, [r0, #4]
   d66b0:	3b01      	subs	r3, #1
   d66b2:	6043      	str	r3, [r0, #4]
   d66b4:	b90b      	cbnz	r3, d66ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d66b6:	f7ff fb88 	bl	d5dca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d66ba:	4620      	mov	r0, r4
   d66bc:	bd10      	pop	{r4, pc}

000d66be <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d66be:	b510      	push	{r4, lr}
   d66c0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d66c2:	3004      	adds	r0, #4
   d66c4:	f7ff ffef 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d66c8:	4620      	mov	r0, r4
   d66ca:	bd10      	pop	{r4, pc}

000d66cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d66cc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d66ce:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d66d2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d66d4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d66d8:	42ae      	cmp	r6, r5
   d66da:	d004      	beq.n	d66e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d66dc:	1d28      	adds	r0, r5, #4
   d66de:	f7ff ffe2 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d66e2:	3508      	adds	r5, #8
   d66e4:	e7f8      	b.n	d66d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d66e6:	6820      	ldr	r0, [r4, #0]
   d66e8:	f7ff f96e 	bl	d59c8 <free>
}
   d66ec:	4620      	mov	r0, r4
   d66ee:	bd70      	pop	{r4, r5, r6, pc}

000d66f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d66f0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d66f2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d66f6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d66f8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d66fc:	42ae      	cmp	r6, r5
   d66fe:	d004      	beq.n	d670a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d6700:	1d28      	adds	r0, r5, #4
   d6702:	f7ff ffd0 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6706:	3508      	adds	r5, #8
   d6708:	e7f8      	b.n	d66fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d670a:	6820      	ldr	r0, [r4, #0]
   d670c:	f7ff f95c 	bl	d59c8 <free>
}
   d6710:	4620      	mov	r0, r4
   d6712:	bd70      	pop	{r4, r5, r6, pc}

000d6714 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6714:	b510      	push	{r4, lr}
   d6716:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d6718:	3024      	adds	r0, #36	; 0x24
   d671a:	f7ff ffe9 	bl	d66f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d671e:	f104 0018 	add.w	r0, r4, #24
   d6722:	f7ff ffd3 	bl	d66cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d6726:	bd10      	pop	{r4, pc}

000d6728 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d6728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d672a:	6804      	ldr	r4, [r0, #0]
   d672c:	4606      	mov	r6, r0
   d672e:	b324      	cbz	r4, d677a <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   d6730:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6734:	f7fd fd66 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
   d6738:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d673c:	f7fd fd62 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
   d6740:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6744:	f7fd fd5e 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d6748:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d674c:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6750:	42af      	cmp	r7, r5
   d6752:	d004      	beq.n	d675e <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d6754:	1d28      	adds	r0, r5, #4
   d6756:	f7ff ffa6 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d675a:	3508      	adds	r5, #8
   d675c:	e7f8      	b.n	d6750 <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d675e:	69a0      	ldr	r0, [r4, #24]
   d6760:	f7ff f932 	bl	d59c8 <free>
    ~BleLocalDeviceImpl() = default;
   d6764:	f104 000c 	add.w	r0, r4, #12
   d6768:	f7ff ffc2 	bl	d66f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d676c:	4620      	mov	r0, r4
   d676e:	f7ff ffad 	bl	d66cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d6772:	2154      	movs	r1, #84	; 0x54
   d6774:	4620      	mov	r0, r4
   d6776:	f001 f912 	bl	d799e <_ZdlPvj>
   d677a:	4630      	mov	r0, r6
   d677c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d677e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   d677e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6780:	b510      	push	{r4, lr}
      if (_M_empty())
   d6782:	b90a      	cbnz	r2, d6788 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d6784:	f001 f911 	bl	d79aa <_ZSt25__throw_bad_function_callv>
    }
   d6788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d678c:	68c3      	ldr	r3, [r0, #12]
   d678e:	4718      	bx	r3

000d6790 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6790:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6794:	4604      	mov	r4, r0
   d6796:	460d      	mov	r5, r1
   d6798:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d679a:	d914      	bls.n	d67c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d679c:	4290      	cmp	r0, r2
   d679e:	d213      	bcs.n	d67c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d67a0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d67a4:	1a75      	subs	r5, r6, r1
   d67a6:	f1a1 0708 	sub.w	r7, r1, #8
   d67aa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d67ac:	42b7      	cmp	r7, r6
   d67ae:	d018      	beq.n	d67e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d67b0:	b11c      	cbz	r4, d67ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d67b2:	4631      	mov	r1, r6
   d67b4:	4620      	mov	r0, r4
   d67b6:	f7ff ff6c 	bl	d6692 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d67ba:	1d30      	adds	r0, r6, #4
   d67bc:	f7ff ff73 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d67c0:	3e08      	subs	r6, #8
   d67c2:	3c08      	subs	r4, #8
   d67c4:	e7f2      	b.n	d67ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d67c6:	d00c      	beq.n	d67e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d67c8:	42b5      	cmp	r5, r6
   d67ca:	d00a      	beq.n	d67e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d67cc:	b11c      	cbz	r4, d67d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d67ce:	4629      	mov	r1, r5
   d67d0:	4620      	mov	r0, r4
   d67d2:	f7ff ff5e 	bl	d6692 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d67d6:	1d28      	adds	r0, r5, #4
   d67d8:	f7ff ff65 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d67dc:	3508      	adds	r5, #8
   d67de:	3408      	adds	r4, #8
   d67e0:	e7f2      	b.n	d67c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d67e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d67e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d67e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d67e8:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d67ec:	4605      	mov	r5, r0
   d67ee:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d67f0:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d67f4:	42a7      	cmp	r7, r4
   d67f6:	d103      	bne.n	d6800 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d67f8:	2600      	movs	r6, #0
}
   d67fa:	4630      	mov	r0, r6
   d67fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d6800:	4641      	mov	r1, r8
   d6802:	4620      	mov	r0, r4
   d6804:	f7ff fe3c 	bl	d6480 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d6808:	4606      	mov	r6, r0
   d680a:	b908      	cbnz	r0, d6810 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d680c:	3408      	adds	r4, #8
   d680e:	e7f1      	b.n	d67f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d6810:	2c00      	cmp	r4, #0
   d6812:	d0f1      	beq.n	d67f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d6814:	1d20      	adds	r0, r4, #4
   d6816:	f7ff ff46 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d681a:	e9d5 3200 	ldrd	r3, r2, [r5]
   d681e:	f104 0108 	add.w	r1, r4, #8
   d6822:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6826:	4620      	mov	r0, r4
   d6828:	f7ff ffb2 	bl	d6790 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d682c:	686b      	ldr	r3, [r5, #4]
   d682e:	3b01      	subs	r3, #1
   d6830:	606b      	str	r3, [r5, #4]
    return true;
   d6832:	e7e2      	b.n	d67fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d6834 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6836:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6838:	6846      	ldr	r6, [r0, #4]
   d683a:	4668      	mov	r0, sp
   d683c:	f7ff ff29 	bl	d6692 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6840:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d6844:	429f      	cmp	r7, r3
   d6846:	db12      	blt.n	d686e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d6848:	3701      	adds	r7, #1
        if (n > 0) {
   d684a:	2f00      	cmp	r7, #0
   d684c:	dd29      	ble.n	d68a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d684e:	00f8      	lsls	r0, r7, #3
   d6850:	f7ff f8b2 	bl	d59b8 <malloc>
            if (!d) {
   d6854:	4605      	mov	r5, r0
   d6856:	b1f0      	cbz	r0, d6896 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d6858:	e9d4 1200 	ldrd	r1, r2, [r4]
   d685c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6860:	f7ff ff96 	bl	d6790 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6864:	6820      	ldr	r0, [r4, #0]
   d6866:	f7ff f8af 	bl	d59c8 <free>
        data_ = d;
   d686a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d686c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d686e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6870:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6872:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d6876:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d687a:	4631      	mov	r1, r6
   d687c:	f106 0008 	add.w	r0, r6, #8
   d6880:	f7ff ff86 	bl	d6790 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6884:	b11e      	cbz	r6, d688e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d6886:	4669      	mov	r1, sp
   d6888:	4630      	mov	r0, r6
   d688a:	f7ff ff02 	bl	d6692 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d688e:	6863      	ldr	r3, [r4, #4]
   d6890:	3301      	adds	r3, #1
   d6892:	6063      	str	r3, [r4, #4]
    return true;
   d6894:	2501      	movs	r5, #1
   d6896:	a801      	add	r0, sp, #4
   d6898:	f7ff ff05 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d689c:	4628      	mov	r0, r5
   d689e:	b003      	add	sp, #12
   d68a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d68a2:	2500      	movs	r5, #0
   d68a4:	e7de      	b.n	d6864 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>
	...

000d68a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d68a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d68ac:	4605      	mov	r5, r0
   d68ae:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d68b0:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d68b2:	460c      	mov	r4, r1
        WiringBleLock lk;
   d68b4:	f7ff fb69 	bl	d5f8a <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d68b8:	682e      	ldr	r6, [r5, #0]
   d68ba:	2e04      	cmp	r6, #4
   d68bc:	d06b      	beq.n	d6996 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d68be:	d807      	bhi.n	d68d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d68c0:	2e03      	cmp	r6, #3
   d68c2:	d028      	beq.n	d6916 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d68c4:	a803      	add	r0, sp, #12
   d68c6:	f7ff fb68 	bl	d5f9a <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d68ca:	b00e      	add	sp, #56	; 0x38
   d68cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d68d0:	f1a6 030c 	sub.w	r3, r6, #12
   d68d4:	2b03      	cmp	r3, #3
   d68d6:	d8f5      	bhi.n	d68c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d68d8:	89a9      	ldrh	r1, [r5, #12]
   d68da:	4620      	mov	r0, r4
   d68dc:	f7ff fd06 	bl	d62ec <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d68e0:	4607      	mov	r7, r0
   d68e2:	2800      	cmp	r0, #0
   d68e4:	d0ee      	beq.n	d68c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d68e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d68e8:	2b00      	cmp	r3, #0
   d68ea:	d0eb      	beq.n	d68c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d68ec:	2210      	movs	r2, #16
   d68ee:	2100      	movs	r1, #0
   d68f0:	a807      	add	r0, sp, #28
   d68f2:	f001 f9b7 	bl	d7c64 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d68f6:	2e0d      	cmp	r6, #13
                        };
   d68f8:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d68fa:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d68fe:	f040 8092 	bne.w	d6a26 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d6902:	686b      	ldr	r3, [r5, #4]
   d6904:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d6906:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d6908:	9308      	str	r3, [sp, #32]
   d690a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d690c:	a906      	add	r1, sp, #24
   d690e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6912:	4798      	blx	r3
   d6914:	e7d6      	b.n	d68c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d6916:	a804      	add	r0, sp, #16
   d6918:	f7ff fd7e 	bl	d6418 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d691c:	9b04      	ldr	r3, [sp, #16]
   d691e:	89aa      	ldrh	r2, [r5, #12]
   d6920:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d6922:	6869      	ldr	r1, [r5, #4]
   d6924:	9804      	ldr	r0, [sp, #16]
   d6926:	3108      	adds	r1, #8
   d6928:	3002      	adds	r0, #2
   d692a:	f7ff fb3e 	bl	d5faa <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d692e:	a904      	add	r1, sp, #16
   d6930:	a806      	add	r0, sp, #24
   d6932:	f7ff feae 	bl	d6692 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d6936:	a906      	add	r1, sp, #24
   d6938:	f104 0018 	add.w	r0, r4, #24
   d693c:	f7ff ff7a 	bl	d6834 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d6940:	4605      	mov	r5, r0
   d6942:	a807      	add	r0, sp, #28
   d6944:	f7ff feaf 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6948:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d694a:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d694c:	b98d      	cbnz	r5, d6972 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d694e:	4b3e      	ldr	r3, [pc, #248]	; (d6a48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d6950:	493e      	ldr	r1, [pc, #248]	; (d6a4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6952:	9300      	str	r3, [sp, #0]
   d6954:	2032      	movs	r0, #50	; 0x32
   d6956:	462b      	mov	r3, r5
   d6958:	aa06      	add	r2, sp, #24
   d695a:	9507      	str	r5, [sp, #28]
   d695c:	f7fe ff90 	bl	d5880 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d6960:	9b04      	ldr	r3, [sp, #16]
   d6962:	4629      	mov	r1, r5
   d6964:	8818      	ldrh	r0, [r3, #0]
   d6966:	f7fe fda9 	bl	d54bc <hal_ble_gap_disconnect>
   d696a:	a805      	add	r0, sp, #20
   d696c:	f7ff fe9b 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6970:	e7a8      	b.n	d68c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d6972:	4a37      	ldr	r2, [pc, #220]	; (d6a50 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d6974:	9200      	str	r2, [sp, #0]
   d6976:	2300      	movs	r3, #0
   d6978:	4934      	ldr	r1, [pc, #208]	; (d6a4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d697a:	9307      	str	r3, [sp, #28]
   d697c:	aa06      	add	r2, sp, #24
   d697e:	2001      	movs	r0, #1
   d6980:	f7fe ff7e 	bl	d5880 <log_message>
                if (impl->connectedCallback_) {
   d6984:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6986:	2b00      	cmp	r3, #0
   d6988:	d0ef      	beq.n	d696a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d698a:	a904      	add	r1, sp, #16
   d698c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6990:	f7ff fef5 	bl	d677e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d6994:	e7e9      	b.n	d696a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6996:	89a9      	ldrh	r1, [r5, #12]
   d6998:	4620      	mov	r0, r4
   d699a:	f7ff fca7 	bl	d62ec <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d699e:	4606      	mov	r6, r0
   d69a0:	2800      	cmp	r0, #0
   d69a2:	d08f      	beq.n	d68c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d69a4:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d69a6:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d69aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d69ae:	802a      	strh	r2, [r5, #0]
   d69b0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d69b4:	4299      	cmp	r1, r3
   d69b6:	d003      	beq.n	d69c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d69b8:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d69bc:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d69be:	e7f9      	b.n	d69b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d69c0:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d69c4:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d69c8:	45b8      	cmp	r8, r7
   d69ca:	d004      	beq.n	d69d6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d69cc:	1d38      	adds	r0, r7, #4
   d69ce:	f7ff fe6a 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69d2:	3708      	adds	r7, #8
   d69d4:	e7f8      	b.n	d69c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d69d6:	2300      	movs	r3, #0
   d69d8:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d69da:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d69de:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d69e2:	45b8      	cmp	r8, r7
   d69e4:	d004      	beq.n	d69f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d69e6:	1d38      	adds	r0, r7, #4
   d69e8:	f7ff fe5d 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69ec:	3708      	adds	r7, #8
   d69ee:	e7f8      	b.n	d69e2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d69f0:	2300      	movs	r3, #0
   d69f2:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d69f4:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d69f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d69f8:	b123      	cbz	r3, d6a04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d69fa:	4631      	mov	r1, r6
   d69fc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6a00:	f7ff febd 	bl	d677e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d6a04:	2300      	movs	r3, #0
   d6a06:	2220      	movs	r2, #32
   d6a08:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d6a0c:	4a11      	ldr	r2, [pc, #68]	; (d6a54 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d6a0e:	9200      	str	r2, [sp, #0]
   d6a10:	490e      	ldr	r1, [pc, #56]	; (d6a4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6a12:	aa06      	add	r2, sp, #24
   d6a14:	2001      	movs	r0, #1
   d6a16:	f7fe ff33 	bl	d5880 <log_message>
                    impl->peers_.removeOne(*peer);
   d6a1a:	4631      	mov	r1, r6
   d6a1c:	f104 0018 	add.w	r0, r4, #24
   d6a20:	f7ff fee0 	bl	d67e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6a24:	e74e      	b.n	d68c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d6a26:	2e0f      	cmp	r6, #15
   d6a28:	f47f af6f 	bne.w	d690a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d6a2c:	686b      	ldr	r3, [r5, #4]
   d6a2e:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d6a30:	7a2b      	ldrb	r3, [r5, #8]
   d6a32:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d6a36:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d6a3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d6a3e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d6a42:	2308      	movs	r3, #8
   d6a44:	e760      	b.n	d6908 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d6a46:	bf00      	nop
   d6a48:	000d85a7 	.word	0x000d85a7
   d6a4c:	000d8568 	.word	0x000d8568
   d6a50:	000d85cd 	.word	0x000d85cd
   d6a54:	000d85ea 	.word	0x000d85ea

000d6a58 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
   d6a58:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   d6a5a:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   d6a5c:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6a5e:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   d6a62:	e9c1 3300 	strd	r3, r3, [r1]
   d6a66:	6823      	ldr	r3, [r4, #0]
   d6a68:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a6a:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6a6c:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   d6a6e:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   d6a70:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   d6a72:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   d6a74:	f7ff fe17 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   d6a78:	4620      	mov	r0, r4
   d6a7a:	b002      	add	sp, #8
   d6a7c:	bd10      	pop	{r4, pc}

000d6a7e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6a7e:	b513      	push	{r0, r1, r4, lr}
   d6a80:	460b      	mov	r3, r1
   d6a82:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a84:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6a88:	466c      	mov	r4, sp
   d6a8a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6a8e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6a92:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6a96:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6a9a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6a9e:	b002      	add	sp, #8
   d6aa0:	bd10      	pop	{r4, pc}

000d6aa2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   d6aa2:	b538      	push	{r3, r4, r5, lr}
   d6aa4:	4605      	mov	r5, r0
   d6aa6:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d6aa8:	f7ff ffe9 	bl	d6a7e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6aac:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6aae:	68a2      	ldr	r2, [r4, #8]
   d6ab0:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6ab2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ab4:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6ab6:	68e2      	ldr	r2, [r4, #12]
   d6ab8:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6aba:	60e3      	str	r3, [r4, #12]
      }
   d6abc:	bd38      	pop	{r3, r4, r5, pc}

000d6abe <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>:
      operator=(function&& __x) noexcept
   d6abe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6ac0:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d6ac2:	4604      	mov	r4, r0
   d6ac4:	4608      	mov	r0, r1
	__x.swap(*this);
   d6ac6:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d6ac8:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d6aca:	f7ff ffea 	bl	d6aa2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   d6ace:	4621      	mov	r1, r4
   d6ad0:	4668      	mov	r0, sp
   d6ad2:	f7ff ffe6 	bl	d6aa2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   d6ad6:	4668      	mov	r0, sp
   d6ad8:	f7fd fb94 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
      }
   d6adc:	4620      	mov	r0, r4
   d6ade:	b004      	add	sp, #16
   d6ae0:	bd10      	pop	{r4, pc}

000d6ae2 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   d6ae2:	b570      	push	{r4, r5, r6, lr}
   d6ae4:	460e      	mov	r6, r1
   d6ae6:	b088      	sub	sp, #32
   d6ae8:	4604      	mov	r4, r0
   d6aea:	9201      	str	r2, [sp, #4]
   d6aec:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   d6aee:	f7ff fbdd 	bl	d62ac <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   d6af2:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   d6af4:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   d6af6:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   d6af8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6afc:	f7ff f903 	bl	d5d06 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d6b00:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   d6b04:	b185      	cbz	r5, d6b28 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x46>
   d6b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6b08:	9502      	str	r5, [sp, #8]
   d6b0a:	a902      	add	r1, sp, #8
   d6b0c:	a804      	add	r0, sp, #16
   d6b0e:	9303      	str	r3, [sp, #12]
   d6b10:	f7ff fd88 	bl	d6624 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   d6b14:	a904      	add	r1, sp, #16
   d6b16:	4630      	mov	r0, r6
   d6b18:	f7ff ffd1 	bl	d6abe <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   d6b1c:	a804      	add	r0, sp, #16
   d6b1e:	f7fd fb71 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
    }
   d6b22:	4620      	mov	r0, r4
   d6b24:	b008      	add	sp, #32
   d6b26:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   d6b28:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   d6b2a:	e7f3      	b.n	d6b14 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000d6b2c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d6b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6b30:	b086      	sub	sp, #24
   d6b32:	4607      	mov	r7, r0
   d6b34:	461d      	mov	r5, r3
   d6b36:	2068      	movs	r0, #104	; 0x68
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6b38:	2300      	movs	r3, #0
   d6b3a:	4689      	mov	r9, r1
   d6b3c:	4692      	mov	sl, r2
   d6b3e:	9304      	str	r3, [sp, #16]
   d6b40:	f7fd faa7 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d6b44:	1e06      	subs	r6, r0, #0
   d6b46:	f106 080c 	add.w	r8, r6, #12
   d6b4a:	d01d      	beq.n	d6b88 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   d6b4c:	2301      	movs	r3, #1
	: _M_impl(__a)
   d6b4e:	4634      	mov	r4, r6
      : _M_use_count(1), _M_weak_count(1) { }
   d6b50:	e9c6 3301 	strd	r3, r3, [r6, #4]
	: _M_impl(__a)
   d6b54:	4b15      	ldr	r3, [pc, #84]	; (d6bac <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x80>)
   d6b56:	f844 3b20 	str.w	r3, [r4], #32
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d6b5a:	f89a 3000 	ldrb.w	r3, [sl]
    value_ = flags.value_;
   d6b5e:	f88d 300c 	strb.w	r3, [sp, #12]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   d6b62:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d6b64:	9300      	str	r3, [sp, #0]
   d6b66:	464a      	mov	r2, r9
   d6b68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d6b6a:	a903      	add	r1, sp, #12
   d6b6c:	4640      	mov	r0, r8
   d6b6e:	f7ff ffb8 	bl	d6ae2 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   d6b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b76:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
   d6b78:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        charUuid_ = charUuid;
   d6b7a:	6023      	str	r3, [r4, #0]
        svcUuid_ = svcUuid;
   d6b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6b7e:	f106 0434 	add.w	r4, r6, #52	; 0x34
   d6b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b84:	682b      	ldr	r3, [r5, #0]
   d6b86:	6023      	str	r3, [r4, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d6b88:	a904      	add	r1, sp, #16
   d6b8a:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
   d6b8c:	e9cd 8604 	strd	r8, r6, [sp, #16]
   d6b90:	f7ff ff62 	bl	d6a58 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
      ~__shared_ptr() = default;
   d6b94:	a805      	add	r0, sp, #20
   d6b96:	f7ff fd86 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d6b9a:	6839      	ldr	r1, [r7, #0]
   d6b9c:	b919      	cbnz	r1, d6ba6 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x7a>
        SPARK_ASSERT(false);
   d6b9e:	4a04      	ldr	r2, [pc, #16]	; (d6bb0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>)
   d6ba0:	200a      	movs	r0, #10
   d6ba2:	f7fe fe65 	bl	d5870 <panic_>
}
   d6ba6:	b006      	add	sp, #24
   d6ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6bac:	000d8664 	.word	0x000d8664
   d6bb0:	000d545d 	.word	0x000d545d

000d6bb4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6bb4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6bb8:	4604      	mov	r4, r0
   d6bba:	460d      	mov	r5, r1
   d6bbc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6bbe:	d914      	bls.n	d6bea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6bc0:	4290      	cmp	r0, r2
   d6bc2:	d213      	bcs.n	d6bec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6bc4:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6bc8:	1a75      	subs	r5, r6, r1
   d6bca:	f1a1 0708 	sub.w	r7, r1, #8
   d6bce:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6bd0:	42b7      	cmp	r7, r6
   d6bd2:	d018      	beq.n	d6c06 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6bd4:	b11c      	cbz	r4, d6bde <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default;
   d6bd6:	4631      	mov	r1, r6
   d6bd8:	4620      	mov	r0, r4
   d6bda:	f7ff fd50 	bl	d667e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6bde:	1d30      	adds	r0, r6, #4
   d6be0:	f7ff fd61 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6be4:	3e08      	subs	r6, #8
   d6be6:	3c08      	subs	r4, #8
   d6be8:	e7f2      	b.n	d6bd0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6bea:	d00c      	beq.n	d6c06 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6bec:	42b5      	cmp	r5, r6
   d6bee:	d00a      	beq.n	d6c06 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6bf0:	b11c      	cbz	r4, d6bfa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6bf2:	4629      	mov	r1, r5
   d6bf4:	4620      	mov	r0, r4
   d6bf6:	f7ff fd42 	bl	d667e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6bfa:	1d28      	adds	r0, r5, #4
   d6bfc:	f7ff fd53 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6c00:	3508      	adds	r5, #8
   d6c02:	3408      	adds	r4, #8
   d6c04:	e7f2      	b.n	d6bec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d6c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d6c08:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d6c0a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d6c0c:	4605      	mov	r5, r0
        if (n > 0) {
   d6c0e:	dd11      	ble.n	d6c34 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d6c10:	00f0      	lsls	r0, r6, #3
   d6c12:	f7fe fed1 	bl	d59b8 <malloc>
            if (!d) {
   d6c16:	4604      	mov	r4, r0
   d6c18:	b158      	cbz	r0, d6c32 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d6c1a:	e9d5 1200 	ldrd	r1, r2, [r5]
   d6c1e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6c22:	f7ff ffc7 	bl	d6bb4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6c26:	6828      	ldr	r0, [r5, #0]
   d6c28:	f7fe fece 	bl	d59c8 <free>
        data_ = d;
   d6c2c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6c2e:	60ae      	str	r6, [r5, #8]
        return true;
   d6c30:	2001      	movs	r0, #1
    }
   d6c32:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d6c34:	2400      	movs	r4, #0
   d6c36:	e7f6      	b.n	d6c26 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d6c38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6c38:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6c3a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6c3c:	6845      	ldr	r5, [r0, #4]
   d6c3e:	4668      	mov	r0, sp
   d6c40:	f7ff fd1d 	bl	d667e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6c44:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d6c48:	4299      	cmp	r1, r3
   d6c4a:	da10      	bge.n	d6c6e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d6c4c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6c4e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6c50:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6c54:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6c58:	4629      	mov	r1, r5
   d6c5a:	f105 0008 	add.w	r0, r5, #8
   d6c5e:	f7ff ffa9 	bl	d6bb4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6c62:	b98d      	cbnz	r5, d6c88 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d6c64:	6863      	ldr	r3, [r4, #4]
   d6c66:	3301      	adds	r3, #1
   d6c68:	6063      	str	r3, [r4, #4]
    return true;
   d6c6a:	2601      	movs	r6, #1
   d6c6c:	e006      	b.n	d6c7c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6c6e:	3101      	adds	r1, #1
   d6c70:	4620      	mov	r0, r4
   d6c72:	f7ff ffc9 	bl	d6c08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6c76:	4606      	mov	r6, r0
   d6c78:	2800      	cmp	r0, #0
   d6c7a:	d1e7      	bne.n	d6c4c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d6c7c:	a801      	add	r0, sp, #4
   d6c7e:	f7ff fd12 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6c82:	4630      	mov	r0, r6
   d6c84:	b002      	add	sp, #8
   d6c86:	bd70      	pop	{r4, r5, r6, pc}
   d6c88:	4669      	mov	r1, sp
   d6c8a:	4628      	mov	r0, r5
   d6c8c:	f7ff fcf7 	bl	d667e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6c90:	e7e8      	b.n	d6c64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d6c92 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6c92:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c96:	4604      	mov	r4, r0
   d6c98:	460d      	mov	r5, r1
   d6c9a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6c9c:	d914      	bls.n	d6cc8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6c9e:	4290      	cmp	r0, r2
   d6ca0:	d213      	bcs.n	d6cca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6ca2:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6ca6:	1a75      	subs	r5, r6, r1
   d6ca8:	f1a1 0708 	sub.w	r7, r1, #8
   d6cac:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6cae:	42b7      	cmp	r7, r6
   d6cb0:	d018      	beq.n	d6ce4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6cb2:	b11c      	cbz	r4, d6cbc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d6cb4:	4631      	mov	r1, r6
   d6cb6:	4620      	mov	r0, r4
   d6cb8:	f7ff fcd3 	bl	d6662 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6cbc:	1d30      	adds	r0, r6, #4
   d6cbe:	f7ff fcf2 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6cc2:	3e08      	subs	r6, #8
   d6cc4:	3c08      	subs	r4, #8
   d6cc6:	e7f2      	b.n	d6cae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6cc8:	d00c      	beq.n	d6ce4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6cca:	42b5      	cmp	r5, r6
   d6ccc:	d00a      	beq.n	d6ce4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6cce:	b11c      	cbz	r4, d6cd8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6cd0:	4629      	mov	r1, r5
   d6cd2:	4620      	mov	r0, r4
   d6cd4:	f7ff fcc5 	bl	d6662 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6cd8:	1d28      	adds	r0, r5, #4
   d6cda:	f7ff fce4 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6cde:	3508      	adds	r5, #8
   d6ce0:	3408      	adds	r4, #8
   d6ce2:	e7f2      	b.n	d6cca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d6ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ce6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d6ce6:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d6ce8:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d6cea:	4605      	mov	r5, r0
        if (n > 0) {
   d6cec:	dd11      	ble.n	d6d12 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d6cee:	00f0      	lsls	r0, r6, #3
   d6cf0:	f7fe fe62 	bl	d59b8 <malloc>
            if (!d) {
   d6cf4:	4604      	mov	r4, r0
   d6cf6:	b158      	cbz	r0, d6d10 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d6cf8:	e9d5 1200 	ldrd	r1, r2, [r5]
   d6cfc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6d00:	f7ff ffc7 	bl	d6c92 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6d04:	6828      	ldr	r0, [r5, #0]
   d6d06:	f7fe fe5f 	bl	d59c8 <free>
        data_ = d;
   d6d0a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6d0c:	60ae      	str	r6, [r5, #8]
        return true;
   d6d0e:	2001      	movs	r0, #1
    }
   d6d10:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d6d12:	2400      	movs	r4, #0
   d6d14:	e7f6      	b.n	d6d04 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d6d16 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6d16:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6d18:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6d1a:	6845      	ldr	r5, [r0, #4]
   d6d1c:	4668      	mov	r0, sp
   d6d1e:	f7ff fca0 	bl	d6662 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6d22:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d6d26:	4299      	cmp	r1, r3
   d6d28:	da10      	bge.n	d6d4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d6d2a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6d2c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6d2e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6d32:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6d36:	4629      	mov	r1, r5
   d6d38:	f105 0008 	add.w	r0, r5, #8
   d6d3c:	f7ff ffa9 	bl	d6c92 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6d40:	b98d      	cbnz	r5, d6d66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d6d42:	6863      	ldr	r3, [r4, #4]
   d6d44:	3301      	adds	r3, #1
   d6d46:	6063      	str	r3, [r4, #4]
    return true;
   d6d48:	2601      	movs	r6, #1
   d6d4a:	e006      	b.n	d6d5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6d4c:	3101      	adds	r1, #1
   d6d4e:	4620      	mov	r0, r4
   d6d50:	f7ff ffc9 	bl	d6ce6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6d54:	4606      	mov	r6, r0
   d6d56:	2800      	cmp	r0, #0
   d6d58:	d1e7      	bne.n	d6d2a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d6d5a:	a801      	add	r0, sp, #4
   d6d5c:	f7ff fca3 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6d60:	4630      	mov	r0, r6
   d6d62:	b002      	add	sp, #8
   d6d64:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d6d66:	4669      	mov	r1, sp
   d6d68:	4628      	mov	r0, r5
   d6d6a:	f7ff fc7a 	bl	d6662 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6d6e:	e7e8      	b.n	d6d42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d6d70 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d6d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d74:	4617      	mov	r7, r2
   d6d76:	b0a1      	sub	sp, #132	; 0x84
   d6d78:	4680      	mov	r8, r0
    WiringBleLock lk;
   d6d7a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d6d7c:	460e      	mov	r6, r1
    WiringBleLock lk;
   d6d7e:	f7ff f904 	bl	d5f8a <_ZN8particle3ble13WiringBleLockC1Ev>
   d6d82:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d6d84:	7923      	ldrb	r3, [r4, #4]
   d6d86:	b953      	cbnz	r3, d6d9e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d6d88:	4639      	mov	r1, r7
   d6d8a:	4640      	mov	r0, r8
   d6d8c:	f7ff fc69 	bl	d6662 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d6d90:	a80a      	add	r0, sp, #40	; 0x28
   d6d92:	f7ff f902 	bl	d5f9a <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d6d96:	4640      	mov	r0, r8
   d6d98:	b021      	add	sp, #132	; 0x84
   d6d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6d9e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   d6da0:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   d6da4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d6da8:	9303      	str	r3, [sp, #12]
   d6daa:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d6dae:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d6db2:	9b03      	ldr	r3, [sp, #12]
   d6db4:	429d      	cmp	r5, r3
   d6db6:	d021      	beq.n	d6dfc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d6db8:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   d6dbc:	4658      	mov	r0, fp
   d6dbe:	f109 0114 	add.w	r1, r9, #20
   d6dc2:	f7ff f99a 	bl	d60fa <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d6dc6:	b1b8      	cbz	r0, d6df8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d6dc8:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d6dcc:	4650      	mov	r0, sl
   d6dce:	f7ff f994 	bl	d60fa <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d6dd2:	b188      	cbz	r0, d6df8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d6dd4:	6823      	ldr	r3, [r4, #0]
   d6dd6:	f8d9 2000 	ldr.w	r2, [r9]
   d6dda:	4053      	eors	r3, r2
   d6ddc:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d6de0:	d10a      	bne.n	d6df8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d6de2:	2220      	movs	r2, #32
   d6de4:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d6de8:	4a5e      	ldr	r2, [pc, #376]	; (d6f64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d6dea:	9200      	str	r2, [sp, #0]
   d6dec:	aa15      	add	r2, sp, #84	; 0x54
   d6dee:	495e      	ldr	r1, [pc, #376]	; (d6f68 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d6df0:	2032      	movs	r0, #50	; 0x32
   d6df2:	f7fe fd45 	bl	d5880 <log_message>
   d6df6:	e7c7      	b.n	d6d88 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d6df8:	3508      	adds	r5, #8
   d6dfa:	e7da      	b.n	d6db2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d6dfc:	4650      	mov	r0, sl
   d6dfe:	f7ff f947 	bl	d6090 <_ZNK8particle7BleUuid7isValidEv>
   d6e02:	b960      	cbnz	r0, d6e1e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   d6e04:	4959      	ldr	r1, [pc, #356]	; (d6f6c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   d6e06:	2201      	movs	r2, #1
   d6e08:	a815      	add	r0, sp, #84	; 0x54
   d6e0a:	ad15      	add	r5, sp, #84	; 0x54
   d6e0c:	f7ff f917 	bl	d603e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d6e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6e12:	46d4      	mov	ip, sl
   d6e14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d6e18:	682b      	ldr	r3, [r5, #0]
   d6e1a:	f8cc 3000 	str.w	r3, [ip]
   d6e1e:	6833      	ldr	r3, [r6, #0]
   d6e20:	e9d3 5300 	ldrd	r5, r3, [r3]
   d6e24:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d6e28:	455d      	cmp	r5, fp
   d6e2a:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   d6e2c:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   d6e2e:	d06e      	beq.n	d6f0e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d6e30:	f855 0b08 	ldr.w	r0, [r5], #8
   d6e34:	f7ff f961 	bl	d60fa <_ZNK8particle7BleUuideqERKS0_>
   d6e38:	2800      	cmp	r0, #0
   d6e3a:	d0f5      	beq.n	d6e28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   d6e3c:	f104 0a14 	add.w	sl, r4, #20
   d6e40:	4650      	mov	r0, sl
   d6e42:	f7ff f925 	bl	d6090 <_ZNK8particle7BleUuid7isValidEv>
   d6e46:	b988      	cbnz	r0, d6e6c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   d6e48:	4b49      	ldr	r3, [pc, #292]	; (d6f70 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6e4a:	4948      	ldr	r1, [pc, #288]	; (d6f6c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   d6e4c:	881a      	ldrh	r2, [r3, #0]
   d6e4e:	3201      	adds	r2, #1
   d6e50:	b292      	uxth	r2, r2
   d6e52:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6e54:	a815      	add	r0, sp, #84	; 0x54
   d6e56:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   d6e58:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6e5a:	f7ff f90f 	bl	d607c <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d6e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6e60:	46d4      	mov	ip, sl
   d6e62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d6e66:	682b      	ldr	r3, [r5, #0]
   d6e68:	f8cc 3000 	str.w	r3, [ip]
    hal_ble_char_init_t charInit = {};
   d6e6c:	2228      	movs	r2, #40	; 0x28
   d6e6e:	2100      	movs	r1, #0
   d6e70:	a816      	add	r0, sp, #88	; 0x58
   d6e72:	f000 fef7 	bl	d7c64 <memset>
    charInit.version = BLE_API_VERSION;
   d6e76:	4b3f      	ldr	r3, [pc, #252]	; (d6f74 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d6e78:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d6e7a:	4651      	mov	r1, sl
   d6e7c:	a804      	add	r0, sp, #16
   d6e7e:	f7ff f919 	bl	d60b4 <_ZN8particle7BleUuid7halUUIDEv>
   d6e82:	ab04      	add	r3, sp, #16
   d6e84:	aa18      	add	r2, sp, #96	; 0x60
   d6e86:	f10d 0c20 	add.w	ip, sp, #32
   d6e8a:	6818      	ldr	r0, [r3, #0]
   d6e8c:	6859      	ldr	r1, [r3, #4]
   d6e8e:	4615      	mov	r5, r2
   d6e90:	c503      	stmia	r5!, {r0, r1}
   d6e92:	3308      	adds	r3, #8
   d6e94:	4563      	cmp	r3, ip
   d6e96:	462a      	mov	r2, r5
   d6e98:	d1f7      	bne.n	d6e8a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   d6e9a:	6818      	ldr	r0, [r3, #0]
   d6e9c:	6028      	str	r0, [r5, #0]
    charInit.properties = charImpl->properties().value();
   d6e9e:	7923      	ldrb	r3, [r4, #4]
   d6ea0:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d6ea4:	f8d9 3000 	ldr.w	r3, [r9]
   d6ea8:	8a9b      	ldrh	r3, [r3, #20]
   d6eaa:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d6eae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6eb0:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d6eb2:	4b31      	ldr	r3, [pc, #196]	; (d6f78 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6eb4:	2200      	movs	r2, #0
   d6eb6:	1da1      	adds	r1, r4, #6
   d6eb8:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d6eba:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6ebe:	f7fe fb2f 	bl	d5520 <hal_ble_gatt_server_add_characteristic>
   d6ec2:	2800      	cmp	r0, #0
   d6ec4:	f47f af60 	bne.w	d6d88 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   d6ec8:	2301      	movs	r3, #1
   d6eca:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d6ecc:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d6ece:	4639      	mov	r1, r7
        return characteristics_;
   d6ed0:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d6ed2:	a80d      	add	r0, sp, #52	; 0x34
   d6ed4:	f7ff fbc5 	bl	d6662 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6ed8:	4620      	mov	r0, r4
   d6eda:	a90d      	add	r1, sp, #52	; 0x34
   d6edc:	f7ff ff1b 	bl	d6d16 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d6ee0:	4604      	mov	r4, r0
   d6ee2:	a80e      	add	r0, sp, #56	; 0x38
   d6ee4:	f7ff fbdf 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6ee8:	2c00      	cmp	r4, #0
   d6eea:	f47f af4d 	bne.w	d6d88 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d6eee:	2320      	movs	r3, #32
   d6ef0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d6ef4:	4b21      	ldr	r3, [pc, #132]	; (d6f7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   d6ef6:	9300      	str	r3, [sp, #0]
   d6ef8:	aa0d      	add	r2, sp, #52	; 0x34
   d6efa:	4623      	mov	r3, r4
   d6efc:	e777      	b.n	d6dee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d6efe:	4639      	mov	r1, r7
   d6f00:	4640      	mov	r0, r8
   d6f02:	f7ff fbae 	bl	d6662 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6f06:	a80c      	add	r0, sp, #48	; 0x30
   d6f08:	f7ff fbcd 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f0c:	e740      	b.n	d6d90 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d6f0e:	a80b      	add	r0, sp, #44	; 0x2c
   d6f10:	f7ff fa5e 	bl	d63d0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d6f14:	4651      	mov	r1, sl
   d6f16:	a815      	add	r0, sp, #84	; 0x54
   d6f18:	f7ff f8cc 	bl	d60b4 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d6f1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d6f1e:	2300      	movs	r3, #0
   d6f20:	3214      	adds	r2, #20
   d6f22:	a915      	add	r1, sp, #84	; 0x54
   d6f24:	2001      	movs	r0, #1
   d6f26:	f7fe fad3 	bl	d54d0 <hal_ble_gatt_server_add_service>
   d6f2a:	2800      	cmp	r0, #0
   d6f2c:	d1e7      	bne.n	d6efe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   d6f2e:	6835      	ldr	r5, [r6, #0]
   d6f30:	a90b      	add	r1, sp, #44	; 0x2c
   d6f32:	a80d      	add	r0, sp, #52	; 0x34
   d6f34:	f7ff fba3 	bl	d667e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d6f38:	4628      	mov	r0, r5
   d6f3a:	a90d      	add	r1, sp, #52	; 0x34
   d6f3c:	f7ff fe7c 	bl	d6c38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d6f40:	4605      	mov	r5, r0
   d6f42:	a80e      	add	r0, sp, #56	; 0x38
   d6f44:	f7ff fbaf 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f48:	2d00      	cmp	r5, #0
   d6f4a:	d0d8      	beq.n	d6efe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   d6f4c:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   d6f4e:	6853      	ldr	r3, [r2, #4]
   d6f50:	6812      	ldr	r2, [r2, #0]
   d6f52:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d6f56:	3b01      	subs	r3, #1
   d6f58:	a80c      	add	r0, sp, #48	; 0x30
   d6f5a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d6f5e:	f7ff fba2 	bl	d66a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f62:	e76b      	b.n	d6e3c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   d6f64:	000d8609 	.word	0x000d8609
   d6f68:	000d8568 	.word	0x000d8568
   d6f6c:	000d86c0 	.word	0x000d86c0
   d6f70:	2003e660 	.word	0x2003e660
   d6f74:	002c0001 	.word	0x002c0001
   d6f78:	000d6561 	.word	0x000d6561
   d6f7c:	000d8634 	.word	0x000d8634

000d6f80 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d6f80:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d6f82:	4c06      	ldr	r4, [pc, #24]	; (d6f9c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6f84:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d6f86:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6f88:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6f8a:	f7fe fb11 	bl	d55b0 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6f8e:	4620      	mov	r0, r4
   d6f90:	4a03      	ldr	r2, [pc, #12]	; (d6fa0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6f92:	4904      	ldr	r1, [pc, #16]	; (d6fa4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6f98:	f000 bcfc 	b.w	d7994 <__aeabi_atexit>
   d6f9c:	2003e664 	.word	0x2003e664
   d6fa0:	2003e5e4 	.word	0x2003e5e4
   d6fa4:	000d5deb 	.word	0x000d5deb

000d6fa8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6faa:	4606      	mov	r6, r0
   d6fac:	460d      	mov	r5, r1
  size_t n = 0;
   d6fae:	188f      	adds	r7, r1, r2
   d6fb0:	2400      	movs	r4, #0
  while (size--) {
   d6fb2:	42bd      	cmp	r5, r7
   d6fb4:	d00c      	beq.n	d6fd0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6fb6:	6833      	ldr	r3, [r6, #0]
   d6fb8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6fbc:	689b      	ldr	r3, [r3, #8]
   d6fbe:	4630      	mov	r0, r6
   d6fc0:	4798      	blx	r3
     if (chunk>=0)
   d6fc2:	1e03      	subs	r3, r0, #0
   d6fc4:	db01      	blt.n	d6fca <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6fc6:	441c      	add	r4, r3
  while (size--) {
   d6fc8:	e7f3      	b.n	d6fb2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6fca:	2c00      	cmp	r4, #0
   d6fcc:	bf08      	it	eq
   d6fce:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6fd0:	4620      	mov	r0, r4
   d6fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6fd4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6fd4:	b513      	push	{r0, r1, r4, lr}
   d6fd6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d6fd8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6fda:	b159      	cbz	r1, d6ff4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6fdc:	9101      	str	r1, [sp, #4]
   d6fde:	f000 fe77 	bl	d7cd0 <strlen>
   d6fe2:	6823      	ldr	r3, [r4, #0]
   d6fe4:	9901      	ldr	r1, [sp, #4]
   d6fe6:	68db      	ldr	r3, [r3, #12]
   d6fe8:	4602      	mov	r2, r0
   d6fea:	4620      	mov	r0, r4
    }
   d6fec:	b002      	add	sp, #8
   d6fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d6ff2:	4718      	bx	r3
    }
   d6ff4:	b002      	add	sp, #8
   d6ff6:	bd10      	pop	{r4, pc}

000d6ff8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6ff8:	6803      	ldr	r3, [r0, #0]
   d6ffa:	689b      	ldr	r3, [r3, #8]
   d6ffc:	4718      	bx	r3

000d6ffe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6ffe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7000:	210d      	movs	r1, #13
{
   d7002:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7004:	f7ff fff8 	bl	d6ff8 <_ZN5Print5printEc>
  n += print('\n');
   d7008:	210a      	movs	r1, #10
  size_t n = print('\r');
   d700a:	4604      	mov	r4, r0
  n += print('\n');
   d700c:	4628      	mov	r0, r5
   d700e:	f7ff fff3 	bl	d6ff8 <_ZN5Print5printEc>
  return n;
}
   d7012:	4420      	add	r0, r4
   d7014:	bd38      	pop	{r3, r4, r5, pc}

000d7016 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7016:	b530      	push	{r4, r5, lr}
   d7018:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d701a:	2300      	movs	r3, #0
   d701c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7020:	2a01      	cmp	r2, #1
   d7022:	bf98      	it	ls
   d7024:	220a      	movls	r2, #10
   d7026:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7028:	460d      	mov	r5, r1
   d702a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d702e:	fb01 5312 	mls	r3, r1, r2, r5
   d7032:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7036:	2b09      	cmp	r3, #9
   d7038:	bf94      	ite	ls
   d703a:	3330      	addls	r3, #48	; 0x30
   d703c:	3337      	addhi	r3, #55	; 0x37
   d703e:	b2db      	uxtb	r3, r3
  } while(n);
   d7040:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7042:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7046:	d9ef      	bls.n	d7028 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7048:	4621      	mov	r1, r4
   d704a:	f7ff ffc3 	bl	d6fd4 <_ZN5Print5writeEPKc>
}
   d704e:	b00b      	add	sp, #44	; 0x2c
   d7050:	bd30      	pop	{r4, r5, pc}

000d7052 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d7052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7056:	b086      	sub	sp, #24
   d7058:	af00      	add	r7, sp, #0
   d705a:	4605      	mov	r5, r0
   d705c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d705e:	1d38      	adds	r0, r7, #4
   d7060:	2114      	movs	r1, #20
{
   d7062:	4614      	mov	r4, r2
    va_copy(args2, args);
   d7064:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d7066:	f7fe fcbf 	bl	d59e8 <vsnprintf>

    if (n<bufsize)
   d706a:	2813      	cmp	r0, #19
   d706c:	d80e      	bhi.n	d708c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d706e:	1d39      	adds	r1, r7, #4
   d7070:	4628      	mov	r0, r5
   d7072:	f7ff ffaf 	bl	d6fd4 <_ZN5Print5writeEPKc>
   d7076:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d7078:	b11e      	cbz	r6, d7082 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d707a:	4628      	mov	r0, r5
   d707c:	f7ff ffbf 	bl	d6ffe <_ZN5Print7printlnEv>
   d7080:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d7082:	4620      	mov	r0, r4
   d7084:	3718      	adds	r7, #24
   d7086:	46bd      	mov	sp, r7
   d7088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d708c:	f100 0308 	add.w	r3, r0, #8
   d7090:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d7094:	46e8      	mov	r8, sp
        char bigger[n+1];
   d7096:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d709a:	4622      	mov	r2, r4
   d709c:	1c41      	adds	r1, r0, #1
   d709e:	683b      	ldr	r3, [r7, #0]
   d70a0:	4668      	mov	r0, sp
   d70a2:	f7fe fca1 	bl	d59e8 <vsnprintf>
  return write(str);
   d70a6:	4669      	mov	r1, sp
   d70a8:	4628      	mov	r0, r5
   d70aa:	f7ff ff93 	bl	d6fd4 <_ZN5Print5writeEPKc>
   d70ae:	4604      	mov	r4, r0
   d70b0:	46c5      	mov	sp, r8
   d70b2:	e7e1      	b.n	d7078 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d70b4 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d70b4:	2300      	movs	r3, #0
   d70b6:	6840      	ldr	r0, [r0, #4]
   d70b8:	461a      	mov	r2, r3
   d70ba:	4619      	mov	r1, r3
   d70bc:	f7fe bc34 	b.w	d5928 <network_on>

000d70c0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d70c0:	4b01      	ldr	r3, [pc, #4]	; (d70c8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d70c2:	4a02      	ldr	r2, [pc, #8]	; (d70cc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d70c4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d70c6:	4770      	bx	lr
   d70c8:	2003e66c 	.word	0x2003e66c
   d70cc:	000d86e0 	.word	0x000d86e0

000d70d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d70d0:	4b02      	ldr	r3, [pc, #8]	; (d70dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d70d2:	681a      	ldr	r2, [r3, #0]
   d70d4:	4b02      	ldr	r3, [pc, #8]	; (d70e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d70d6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d70d8:	4770      	bx	lr
   d70da:	bf00      	nop
   d70dc:	2003e57c 	.word	0x2003e57c
   d70e0:	2003e670 	.word	0x2003e670

000d70e4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d70e4:	2100      	movs	r1, #0
   d70e6:	f7fe bbdb 	b.w	d58a0 <system_delay_ms>

000d70ea <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d70ea:	b510      	push	{r4, lr}
   d70ec:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d70ee:	f7fd f889 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
   d70f2:	4620      	mov	r0, r4
   d70f4:	bd10      	pop	{r4, pc}

000d70f6 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d70f6:	b510      	push	{r4, lr}
   d70f8:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   d70fa:	f7fe fbb1 	bl	d5860 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   d70fe:	4284      	cmp	r4, r0
   d7100:	d008      	beq.n	d7114 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d7102:	b11c      	cbz	r4, d710c <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d7104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   d7108:	f7fe bb9a 	b.w	d5840 <LED_Signaling_Start>
}
   d710c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   d7110:	f7fe bb9e 	b.w	d5850 <LED_Signaling_Stop>
}
   d7114:	bd10      	pop	{r4, pc}
	...

000d7118 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7118:	4803      	ldr	r0, [pc, #12]	; (d7128 <_GLOBAL__sub_I_RGB+0x10>)
RGBClass RGB;
   d711a:	4a04      	ldr	r2, [pc, #16]	; (d712c <_GLOBAL__sub_I_RGB+0x14>)
   d711c:	4904      	ldr	r1, [pc, #16]	; (d7130 <_GLOBAL__sub_I_RGB+0x18>)
   d711e:	2300      	movs	r3, #0
   d7120:	6083      	str	r3, [r0, #8]
   d7122:	f000 bc37 	b.w	d7994 <__aeabi_atexit>
   d7126:	bf00      	nop
   d7128:	2003e674 	.word	0x2003e674
   d712c:	2003e5e4 	.word	0x2003e5e4
   d7130:	000d70eb 	.word	0x000d70eb

000d7134 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7134:	4b01      	ldr	r3, [pc, #4]	; (d713c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7136:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7138:	4770      	bx	lr
   d713a:	bf00      	nop
   d713c:	2003e580 	.word	0x2003e580

000d7140 <serialEventRun>:
{
   d7140:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7142:	4b0b      	ldr	r3, [pc, #44]	; (d7170 <serialEventRun+0x30>)
   d7144:	b143      	cbz	r3, d7158 <serialEventRun+0x18>
   d7146:	f000 f95b 	bl	d7400 <_Z16_fetch_usbserialv>
   d714a:	6803      	ldr	r3, [r0, #0]
   d714c:	691b      	ldr	r3, [r3, #16]
   d714e:	4798      	blx	r3
   d7150:	2800      	cmp	r0, #0
   d7152:	dd01      	ble.n	d7158 <serialEventRun+0x18>
        serialEvent();
   d7154:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7158:	4b06      	ldr	r3, [pc, #24]	; (d7174 <serialEventRun+0x34>)
   d715a:	b143      	cbz	r3, d716e <serialEventRun+0x2e>
   d715c:	f000 f9ce 	bl	d74fc <_Z22__fetch_global_Serial1v>
   d7160:	6803      	ldr	r3, [r0, #0]
   d7162:	691b      	ldr	r3, [r3, #16]
   d7164:	4798      	blx	r3
   d7166:	2800      	cmp	r0, #0
   d7168:	dd01      	ble.n	d716e <serialEventRun+0x2e>
        serialEvent1();
   d716a:	f3af 8000 	nop.w
}
   d716e:	bd08      	pop	{r3, pc}
	...

000d7178 <_post_loop>:
{
   d7178:	b508      	push	{r3, lr}
	serialEventRun();
   d717a:	f7ff ffe1 	bl	d7140 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d717e:	f7fe f975 	bl	d546c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7182:	4b01      	ldr	r3, [pc, #4]	; (d7188 <_post_loop+0x10>)
   d7184:	6018      	str	r0, [r3, #0]
}
   d7186:	bd08      	pop	{r3, pc}
   d7188:	2003e7d4 	.word	0x2003e7d4

000d718c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d718c:	4802      	ldr	r0, [pc, #8]	; (d7198 <_Z33system_initialize_user_backup_ramv+0xc>)
   d718e:	4a03      	ldr	r2, [pc, #12]	; (d719c <_Z33system_initialize_user_backup_ramv+0x10>)
   d7190:	4903      	ldr	r1, [pc, #12]	; (d71a0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7192:	1a12      	subs	r2, r2, r0
   d7194:	f000 bd3e 	b.w	d7c14 <memcpy>
   d7198:	2003f400 	.word	0x2003f400
   d719c:	2003f404 	.word	0x2003f404
   d71a0:	000d8a40 	.word	0x000d8a40

000d71a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d71a4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d71a6:	2300      	movs	r3, #0
   d71a8:	9300      	str	r3, [sp, #0]
   d71aa:	461a      	mov	r2, r3
   d71ac:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d71b0:	f7fe fb90 	bl	d58d4 <system_ctrl_set_result>
}
   d71b4:	b003      	add	sp, #12
   d71b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d71bc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d71bc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d71be:	8843      	ldrh	r3, [r0, #2]
   d71c0:	2b0a      	cmp	r3, #10
   d71c2:	d008      	beq.n	d71d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d71c4:	2b50      	cmp	r3, #80	; 0x50
   d71c6:	d10b      	bne.n	d71e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d71c8:	4b09      	ldr	r3, [pc, #36]	; (d71f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d71ca:	681b      	ldr	r3, [r3, #0]
   d71cc:	b14b      	cbz	r3, d71e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d71ce:	b003      	add	sp, #12
   d71d0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d71d4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d71d6:	f7ff ffe5 	bl	d71a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d71da:	b003      	add	sp, #12
   d71dc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d71e0:	2300      	movs	r3, #0
   d71e2:	9300      	str	r3, [sp, #0]
   d71e4:	461a      	mov	r2, r3
   d71e6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d71ea:	f7fe fb73 	bl	d58d4 <system_ctrl_set_result>
}
   d71ee:	e7f4      	b.n	d71da <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d71f0:	2003e688 	.word	0x2003e688

000d71f4 <module_user_init_hook>:
{
   d71f4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d71f6:	4c12      	ldr	r4, [pc, #72]	; (d7240 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d71f8:	4812      	ldr	r0, [pc, #72]	; (d7244 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d71fa:	4d13      	ldr	r5, [pc, #76]	; (d7248 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d71fc:	2100      	movs	r1, #0
   d71fe:	f7fe fc03 	bl	d5a08 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7202:	6823      	ldr	r3, [r4, #0]
   d7204:	42ab      	cmp	r3, r5
   d7206:	4b11      	ldr	r3, [pc, #68]	; (d724c <module_user_init_hook+0x58>)
   d7208:	bf0c      	ite	eq
   d720a:	2201      	moveq	r2, #1
   d720c:	2200      	movne	r2, #0
   d720e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7210:	d002      	beq.n	d7218 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7212:	f7ff ffbb 	bl	d718c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7216:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7218:	f7fe f910 	bl	d543c <HAL_RNG_GetRandomNumber>
   d721c:	4604      	mov	r4, r0
    srand(seed);
   d721e:	f000 fd29 	bl	d7c74 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7222:	4b0b      	ldr	r3, [pc, #44]	; (d7250 <module_user_init_hook+0x5c>)
   d7224:	b113      	cbz	r3, d722c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d7226:	4620      	mov	r0, r4
   d7228:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d722c:	2100      	movs	r1, #0
   d722e:	4808      	ldr	r0, [pc, #32]	; (d7250 <module_user_init_hook+0x5c>)
   d7230:	f7fe fbba 	bl	d59a8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7238:	4806      	ldr	r0, [pc, #24]	; (d7254 <module_user_init_hook+0x60>)
   d723a:	2100      	movs	r1, #0
   d723c:	f7fe bb40 	b.w	d58c0 <system_ctrl_set_app_request_handler>
   d7240:	2003f400 	.word	0x2003f400
   d7244:	000d7135 	.word	0x000d7135
   d7248:	9a271c1e 	.word	0x9a271c1e
   d724c:	2003e684 	.word	0x2003e684
   d7250:	00000000 	.word	0x00000000
   d7254:	000d71bd 	.word	0x000d71bd

000d7258 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7258:	4770      	bx	lr

000d725a <_ZN9IPAddressD0Ev>:
   d725a:	b510      	push	{r4, lr}
   d725c:	2118      	movs	r1, #24
   d725e:	4604      	mov	r4, r0
   d7260:	f000 fb9d 	bl	d799e <_ZdlPvj>
   d7264:	4620      	mov	r0, r4
   d7266:	bd10      	pop	{r4, pc}

000d7268 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7268:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d726a:	7d03      	ldrb	r3, [r0, #20]
   d726c:	2b06      	cmp	r3, #6
{
   d726e:	b08d      	sub	sp, #52	; 0x34
   d7270:	460e      	mov	r6, r1
   d7272:	f100 0704 	add.w	r7, r0, #4
   d7276:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d727a:	d012      	beq.n	d72a2 <_ZNK9IPAddress7printToER5Print+0x3a>
   d727c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7280:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7284:	220a      	movs	r2, #10
   d7286:	4630      	mov	r0, r6
   d7288:	f7ff fec5 	bl	d7016 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d728c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d728e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7290:	d019      	beq.n	d72c6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d7292:	2c00      	cmp	r4, #0
   d7294:	d0f4      	beq.n	d7280 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d7296:	212e      	movs	r1, #46	; 0x2e
   d7298:	4630      	mov	r0, r6
   d729a:	f7ff fead 	bl	d6ff8 <_ZN5Print5printEc>
   d729e:	4404      	add	r4, r0
   d72a0:	e7ee      	b.n	d7280 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d72a2:	232f      	movs	r3, #47	; 0x2f
   d72a4:	466a      	mov	r2, sp
   d72a6:	4639      	mov	r1, r7
   d72a8:	200a      	movs	r0, #10
		buf[0] = 0;
   d72aa:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d72ae:	f7fe f9a7 	bl	d5600 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d72b2:	4668      	mov	r0, sp
   d72b4:	f000 fd0c 	bl	d7cd0 <strlen>
   d72b8:	6833      	ldr	r3, [r6, #0]
   d72ba:	4602      	mov	r2, r0
   d72bc:	68db      	ldr	r3, [r3, #12]
   d72be:	4669      	mov	r1, sp
   d72c0:	4630      	mov	r0, r6
   d72c2:	4798      	blx	r3
   d72c4:	4604      	mov	r4, r0
    }
    return n;
}
   d72c6:	4620      	mov	r0, r4
   d72c8:	b00d      	add	sp, #52	; 0x34
   d72ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d72cc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d72cc:	b510      	push	{r4, lr}
   d72ce:	4b05      	ldr	r3, [pc, #20]	; (d72e4 <_ZN9IPAddressC1Ev+0x18>)
   d72d0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d72d2:	2211      	movs	r2, #17
   d72d4:	f840 3b04 	str.w	r3, [r0], #4
   d72d8:	2100      	movs	r1, #0
   d72da:	f000 fcc3 	bl	d7c64 <memset>
}
   d72de:	4620      	mov	r0, r4
   d72e0:	bd10      	pop	{r4, pc}
   d72e2:	bf00      	nop
   d72e4:	000d8708 	.word	0x000d8708

000d72e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d72e8:	4603      	mov	r3, r0
   d72ea:	4a07      	ldr	r2, [pc, #28]	; (d7308 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d72ec:	b510      	push	{r4, lr}
   d72ee:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d72f2:	f101 0210 	add.w	r2, r1, #16
   d72f6:	f851 4b04 	ldr.w	r4, [r1], #4
   d72fa:	f843 4b04 	str.w	r4, [r3], #4
   d72fe:	4291      	cmp	r1, r2
   d7300:	d1f9      	bne.n	d72f6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7302:	780a      	ldrb	r2, [r1, #0]
   d7304:	701a      	strb	r2, [r3, #0]
}
   d7306:	bd10      	pop	{r4, pc}
   d7308:	000d8708 	.word	0x000d8708

000d730c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d730c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d730e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7312:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7316:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d731a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d731e:	2304      	movs	r3, #4
   d7320:	6041      	str	r1, [r0, #4]
   d7322:	7503      	strb	r3, [r0, #20]
}
   d7324:	bd10      	pop	{r4, pc}
	...

000d7328 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d7328:	b513      	push	{r0, r1, r4, lr}
   d732a:	4b05      	ldr	r3, [pc, #20]	; (d7340 <_ZN9IPAddressC1EPKh+0x18>)
   d732c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d732e:	78cb      	ldrb	r3, [r1, #3]
   d7330:	9300      	str	r3, [sp, #0]
   d7332:	788b      	ldrb	r3, [r1, #2]
   d7334:	784a      	ldrb	r2, [r1, #1]
   d7336:	7809      	ldrb	r1, [r1, #0]
   d7338:	f7ff ffe8 	bl	d730c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d733c:	b002      	add	sp, #8
   d733e:	bd10      	pop	{r4, pc}
   d7340:	000d8708 	.word	0x000d8708

000d7344 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7344:	7441      	strb	r1, [r0, #17]
}
   d7346:	4770      	bx	lr

000d7348 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7348:	4770      	bx	lr

000d734a <_ZN9USBSerial4readEv>:
{
   d734a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d734c:	2100      	movs	r1, #0
   d734e:	7c00      	ldrb	r0, [r0, #16]
   d7350:	f7fe fa5e 	bl	d5810 <HAL_USB_USART_Receive_Data>
}
   d7354:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7358:	bd08      	pop	{r3, pc}

000d735a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d735a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d735c:	2101      	movs	r1, #1
   d735e:	7c00      	ldrb	r0, [r0, #16]
   d7360:	f7fe fa56 	bl	d5810 <HAL_USB_USART_Receive_Data>
}
   d7364:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7368:	bd08      	pop	{r3, pc}

000d736a <_ZN9USBSerial17availableForWriteEv>:
{
   d736a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d736c:	7c00      	ldrb	r0, [r0, #16]
   d736e:	f7fe fa47 	bl	d5800 <HAL_USB_USART_Available_Data_For_Write>
}
   d7372:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7376:	bd08      	pop	{r3, pc}

000d7378 <_ZN9USBSerial9availableEv>:
{
   d7378:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d737a:	7c00      	ldrb	r0, [r0, #16]
   d737c:	f7fe fa38 	bl	d57f0 <HAL_USB_USART_Available_Data>
}
   d7380:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7384:	bd08      	pop	{r3, pc}

000d7386 <_ZN9USBSerial5writeEh>:
{
   d7386:	b513      	push	{r0, r1, r4, lr}
   d7388:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d738a:	7c00      	ldrb	r0, [r0, #16]
{
   d738c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d738e:	f7fe fa37 	bl	d5800 <HAL_USB_USART_Available_Data_For_Write>
   d7392:	2800      	cmp	r0, #0
   d7394:	9901      	ldr	r1, [sp, #4]
   d7396:	dc01      	bgt.n	d739c <_ZN9USBSerial5writeEh+0x16>
   d7398:	7c60      	ldrb	r0, [r4, #17]
   d739a:	b120      	cbz	r0, d73a6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d739c:	7c20      	ldrb	r0, [r4, #16]
   d739e:	f7fe fa3f 	bl	d5820 <HAL_USB_USART_Send_Data>
   d73a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d73a6:	b002      	add	sp, #8
   d73a8:	bd10      	pop	{r4, pc}

000d73aa <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d73aa:	7c00      	ldrb	r0, [r0, #16]
   d73ac:	f7fe ba40 	b.w	d5830 <HAL_USB_USART_Flush_Data>

000d73b0 <_ZN9USBSerialD0Ev>:
   d73b0:	b510      	push	{r4, lr}
   d73b2:	2114      	movs	r1, #20
   d73b4:	4604      	mov	r4, r0
   d73b6:	f000 faf2 	bl	d799e <_ZdlPvj>
   d73ba:	4620      	mov	r0, r4
   d73bc:	bd10      	pop	{r4, pc}
	...

000d73c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d73c0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d73c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d73c6:	4604      	mov	r4, r0
   d73c8:	4608      	mov	r0, r1
   d73ca:	2100      	movs	r1, #0
   d73cc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d73d0:	4b04      	ldr	r3, [pc, #16]	; (d73e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d73d2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d73d4:	2301      	movs	r3, #1
  _serial = serial;
   d73d6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d73d8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d73da:	4611      	mov	r1, r2
   d73dc:	f7fe f9f8 	bl	d57d0 <HAL_USB_USART_Init>
}
   d73e0:	4620      	mov	r0, r4
   d73e2:	bd10      	pop	{r4, pc}
   d73e4:	000d871c 	.word	0x000d871c

000d73e8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d73e8:	7c00      	ldrb	r0, [r0, #16]
   d73ea:	2200      	movs	r2, #0
   d73ec:	f7fe b9f8 	b.w	d57e0 <HAL_USB_USART_Begin>

000d73f0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d73f0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d73f2:	2214      	movs	r2, #20
{
   d73f4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d73f6:	2100      	movs	r1, #0
   d73f8:	f000 fc34 	bl	d7c64 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d73fc:	4620      	mov	r0, r4
   d73fe:	bd10      	pop	{r4, pc}

000d7400 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7400:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7402:	4c10      	ldr	r4, [pc, #64]	; (d7444 <_Z16_fetch_usbserialv+0x44>)
{
   d7404:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7406:	a803      	add	r0, sp, #12
   d7408:	f7ff fff2 	bl	d73f0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d740c:	7821      	ldrb	r1, [r4, #0]
   d740e:	f3bf 8f5b 	dmb	ish
   d7412:	f011 0101 	ands.w	r1, r1, #1
   d7416:	d111      	bne.n	d743c <_Z16_fetch_usbserialv+0x3c>
   d7418:	4620      	mov	r0, r4
   d741a:	9101      	str	r1, [sp, #4]
   d741c:	f7fc fe4a 	bl	d40b4 <__cxa_guard_acquire>
   d7420:	9901      	ldr	r1, [sp, #4]
   d7422:	b158      	cbz	r0, d743c <_Z16_fetch_usbserialv+0x3c>
   d7424:	aa03      	add	r2, sp, #12
   d7426:	4808      	ldr	r0, [pc, #32]	; (d7448 <_Z16_fetch_usbserialv+0x48>)
   d7428:	f7ff ffca 	bl	d73c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d742c:	4620      	mov	r0, r4
   d742e:	f7fc fe46 	bl	d40be <__cxa_guard_release>
   d7432:	4a06      	ldr	r2, [pc, #24]	; (d744c <_Z16_fetch_usbserialv+0x4c>)
   d7434:	4906      	ldr	r1, [pc, #24]	; (d7450 <_Z16_fetch_usbserialv+0x50>)
   d7436:	4804      	ldr	r0, [pc, #16]	; (d7448 <_Z16_fetch_usbserialv+0x48>)
   d7438:	f000 faac 	bl	d7994 <__aeabi_atexit>
	return _usbserial;
}
   d743c:	4802      	ldr	r0, [pc, #8]	; (d7448 <_Z16_fetch_usbserialv+0x48>)
   d743e:	b008      	add	sp, #32
   d7440:	bd10      	pop	{r4, pc}
   d7442:	bf00      	nop
   d7444:	2003e68c 	.word	0x2003e68c
   d7448:	2003e690 	.word	0x2003e690
   d744c:	2003e5e4 	.word	0x2003e5e4
   d7450:	000d7349 	.word	0x000d7349

000d7454 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7454:	4770      	bx	lr

000d7456 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7456:	7441      	strb	r1, [r0, #17]
}
   d7458:	4770      	bx	lr

000d745a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d745a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d745c:	7c00      	ldrb	r0, [r0, #16]
   d745e:	f7fe f90f 	bl	d5680 <hal_usart_available_data_for_write>
}
   d7462:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7466:	bd08      	pop	{r3, pc}

000d7468 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7468:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d746a:	7c00      	ldrb	r0, [r0, #16]
   d746c:	f7fe f8e0 	bl	d5630 <hal_usart_available>
}
   d7470:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7474:	bd08      	pop	{r3, pc}

000d7476 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7476:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7478:	7c00      	ldrb	r0, [r0, #16]
   d747a:	f7fe f8e9 	bl	d5650 <hal_usart_peek>
}
   d747e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7482:	bd08      	pop	{r3, pc}

000d7484 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7484:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7486:	7c00      	ldrb	r0, [r0, #16]
   d7488:	f7fe f8da 	bl	d5640 <hal_usart_read>
}
   d748c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7490:	bd08      	pop	{r3, pc}

000d7492 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d7492:	7c00      	ldrb	r0, [r0, #16]
   d7494:	f7fe b8e4 	b.w	d5660 <hal_usart_flush>

000d7498 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7498:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d749a:	7c45      	ldrb	r5, [r0, #17]
{
   d749c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d749e:	b12d      	cbz	r5, d74ac <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d74a0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d74a2:	b003      	add	sp, #12
   d74a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d74a8:	f7fe b8ba 	b.w	d5620 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d74ac:	7c00      	ldrb	r0, [r0, #16]
   d74ae:	9101      	str	r1, [sp, #4]
   d74b0:	f7fe f8e6 	bl	d5680 <hal_usart_available_data_for_write>
   d74b4:	2800      	cmp	r0, #0
   d74b6:	9901      	ldr	r1, [sp, #4]
   d74b8:	dcf2      	bgt.n	d74a0 <_ZN11USARTSerial5writeEh+0x8>
}
   d74ba:	4628      	mov	r0, r5
   d74bc:	b003      	add	sp, #12
   d74be:	bd30      	pop	{r4, r5, pc}

000d74c0 <_ZN11USARTSerialD0Ev>:
   d74c0:	b510      	push	{r4, lr}
   d74c2:	2114      	movs	r1, #20
   d74c4:	4604      	mov	r4, r0
   d74c6:	f000 fa6a 	bl	d799e <_ZdlPvj>
   d74ca:	4620      	mov	r0, r4
   d74cc:	bd10      	pop	{r4, pc}
	...

000d74d0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d74d0:	b510      	push	{r4, lr}
   d74d2:	f04f 0c00 	mov.w	ip, #0
   d74d6:	4604      	mov	r4, r0
   d74d8:	4608      	mov	r0, r1
   d74da:	4611      	mov	r1, r2
   d74dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d74e0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d74e4:	4a04      	ldr	r2, [pc, #16]	; (d74f8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d74e6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d74e8:	2201      	movs	r2, #1
  _serial = serial;
   d74ea:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d74ec:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d74ee:	461a      	mov	r2, r3
   d74f0:	f7fe f88e 	bl	d5610 <hal_usart_init>
}
   d74f4:	4620      	mov	r0, r4
   d74f6:	bd10      	pop	{r4, pc}
   d74f8:	000d874c 	.word	0x000d874c

000d74fc <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d74fc:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d74fe:	4c0e      	ldr	r4, [pc, #56]	; (d7538 <_Z22__fetch_global_Serial1v+0x3c>)
   d7500:	7821      	ldrb	r1, [r4, #0]
   d7502:	f3bf 8f5b 	dmb	ish
   d7506:	f011 0101 	ands.w	r1, r1, #1
   d750a:	d112      	bne.n	d7532 <_Z22__fetch_global_Serial1v+0x36>
   d750c:	4620      	mov	r0, r4
   d750e:	9101      	str	r1, [sp, #4]
   d7510:	f7fc fdd0 	bl	d40b4 <__cxa_guard_acquire>
   d7514:	9901      	ldr	r1, [sp, #4]
   d7516:	b160      	cbz	r0, d7532 <_Z22__fetch_global_Serial1v+0x36>
   d7518:	4a08      	ldr	r2, [pc, #32]	; (d753c <_Z22__fetch_global_Serial1v+0x40>)
   d751a:	4b09      	ldr	r3, [pc, #36]	; (d7540 <_Z22__fetch_global_Serial1v+0x44>)
   d751c:	4809      	ldr	r0, [pc, #36]	; (d7544 <_Z22__fetch_global_Serial1v+0x48>)
   d751e:	f7ff ffd7 	bl	d74d0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7522:	4620      	mov	r0, r4
   d7524:	f7fc fdcb 	bl	d40be <__cxa_guard_release>
   d7528:	4a07      	ldr	r2, [pc, #28]	; (d7548 <_Z22__fetch_global_Serial1v+0x4c>)
   d752a:	4908      	ldr	r1, [pc, #32]	; (d754c <_Z22__fetch_global_Serial1v+0x50>)
   d752c:	4805      	ldr	r0, [pc, #20]	; (d7544 <_Z22__fetch_global_Serial1v+0x48>)
   d752e:	f000 fa31 	bl	d7994 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7532:	4804      	ldr	r0, [pc, #16]	; (d7544 <_Z22__fetch_global_Serial1v+0x48>)
   d7534:	b002      	add	sp, #8
   d7536:	bd10      	pop	{r4, pc}
   d7538:	2003e6a4 	.word	0x2003e6a4
   d753c:	2003e6a8 	.word	0x2003e6a8
   d7540:	2003e72c 	.word	0x2003e72c
   d7544:	2003e7b0 	.word	0x2003e7b0
   d7548:	2003e5e4 	.word	0x2003e5e4
   d754c:	000d7455 	.word	0x000d7455

000d7550 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7550:	4770      	bx	lr

000d7552 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7554:	4606      	mov	r6, r0
   d7556:	4615      	mov	r5, r2
   d7558:	460c      	mov	r4, r1
   d755a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d755c:	42bc      	cmp	r4, r7
   d755e:	d006      	beq.n	d756e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7560:	6833      	ldr	r3, [r6, #0]
   d7562:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7566:	689b      	ldr	r3, [r3, #8]
   d7568:	4630      	mov	r0, r6
   d756a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d756c:	e7f6      	b.n	d755c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d756e:	4628      	mov	r0, r5
   d7570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7572 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7572:	7c00      	ldrb	r0, [r0, #16]
   d7574:	2200      	movs	r2, #0
   d7576:	f7fe b8a3 	b.w	d56c0 <hal_i2c_write>

000d757a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d757a:	7c00      	ldrb	r0, [r0, #16]
   d757c:	2100      	movs	r1, #0
   d757e:	f7fe b8a7 	b.w	d56d0 <hal_i2c_available>

000d7582 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7582:	7c00      	ldrb	r0, [r0, #16]
   d7584:	2100      	movs	r1, #0
   d7586:	f7fe b8ab 	b.w	d56e0 <hal_i2c_read>

000d758a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d758a:	7c00      	ldrb	r0, [r0, #16]
   d758c:	2100      	movs	r1, #0
   d758e:	f7fe b8af 	b.w	d56f0 <hal_i2c_peek>

000d7592 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7592:	7c00      	ldrb	r0, [r0, #16]
   d7594:	2100      	movs	r1, #0
   d7596:	f7fe b8b3 	b.w	d5700 <hal_i2c_flush>

000d759a <_ZN7TwoWireD0Ev>:
   d759a:	b510      	push	{r4, lr}
   d759c:	2114      	movs	r1, #20
   d759e:	4604      	mov	r4, r0
   d75a0:	f000 f9fd 	bl	d799e <_ZdlPvj>
   d75a4:	4620      	mov	r0, r4
   d75a6:	bd10      	pop	{r4, pc}

000d75a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d75a8:	b510      	push	{r4, lr}
   d75aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d75ae:	4604      	mov	r4, r0
   d75b0:	4608      	mov	r0, r1
   d75b2:	2100      	movs	r1, #0
   d75b4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d75b8:	4b03      	ldr	r3, [pc, #12]	; (d75c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d75ba:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d75bc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d75be:	4611      	mov	r1, r2
   d75c0:	f7fe f8ae 	bl	d5720 <hal_i2c_init>
}
   d75c4:	4620      	mov	r0, r4
   d75c6:	bd10      	pop	{r4, pc}
   d75c8:	000d877c 	.word	0x000d877c

000d75cc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d75cc:	2300      	movs	r3, #0
   d75ce:	7c00      	ldrb	r0, [r0, #16]
   d75d0:	461a      	mov	r2, r3
   d75d2:	4619      	mov	r1, r3
   d75d4:	f7fe b85c 	b.w	d5690 <hal_i2c_begin>

000d75d8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d75d8:	7c00      	ldrb	r0, [r0, #16]
   d75da:	2200      	movs	r2, #0
   d75dc:	f7fe b860 	b.w	d56a0 <hal_i2c_begin_transmission>

000d75e0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d75e0:	b2c9      	uxtb	r1, r1
   d75e2:	f7ff bff9 	b.w	d75d8 <_ZN7TwoWire17beginTransmissionEh>

000d75e6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d75e6:	7c00      	ldrb	r0, [r0, #16]
   d75e8:	2200      	movs	r2, #0
   d75ea:	f7fe b861 	b.w	d56b0 <hal_i2c_end_transmission>

000d75ee <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d75ee:	2101      	movs	r1, #1
   d75f0:	f7ff bff9 	b.w	d75e6 <_ZN7TwoWire15endTransmissionEh>

000d75f4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d75f4:	2200      	movs	r2, #0
   d75f6:	6840      	ldr	r0, [r0, #4]
   d75f8:	4611      	mov	r1, r2
   d75fa:	f7fe b98d 	b.w	d5918 <network_ready>

000d75fe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d75fe:	2200      	movs	r2, #0
   d7600:	6840      	ldr	r0, [r0, #4]
   d7602:	4611      	mov	r1, r2
   d7604:	f7fe b9a8 	b.w	d5958 <network_listening>

000d7608 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7608:	2200      	movs	r2, #0
   d760a:	6840      	ldr	r0, [r0, #4]
   d760c:	4611      	mov	r1, r2
   d760e:	f7fe b9b3 	b.w	d5978 <network_get_listen_timeout>

000d7612 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7612:	6840      	ldr	r0, [r0, #4]
   d7614:	2200      	movs	r2, #0
   d7616:	f7fe b9a7 	b.w	d5968 <network_set_listen_timeout>

000d761a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d761a:	6840      	ldr	r0, [r0, #4]
   d761c:	2200      	movs	r2, #0
   d761e:	f081 0101 	eor.w	r1, r1, #1
   d7622:	f7fe b991 	b.w	d5948 <network_listen>

000d7626 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7626:	2300      	movs	r3, #0
   d7628:	6840      	ldr	r0, [r0, #4]
   d762a:	461a      	mov	r2, r3
   d762c:	4619      	mov	r1, r3
   d762e:	f7fe b983 	b.w	d5938 <network_off>

000d7632 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7632:	2200      	movs	r2, #0
   d7634:	6840      	ldr	r0, [r0, #4]
   d7636:	4611      	mov	r1, r2
   d7638:	f7fe b95e 	b.w	d58f8 <network_connecting>

000d763c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d763c:	6840      	ldr	r0, [r0, #4]
   d763e:	2200      	movs	r2, #0
   d7640:	2102      	movs	r1, #2
   d7642:	f7fe b961 	b.w	d5908 <network_disconnect>

000d7646 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7646:	2300      	movs	r3, #0
   d7648:	6840      	ldr	r0, [r0, #4]
   d764a:	461a      	mov	r2, r3
   d764c:	f7fe b94c 	b.w	d58e8 <network_connect>

000d7650 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7650:	4b02      	ldr	r3, [pc, #8]	; (d765c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7652:	2204      	movs	r2, #4
   d7654:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7656:	4a02      	ldr	r2, [pc, #8]	; (d7660 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7658:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d765a:	4770      	bx	lr
   d765c:	2003e7c4 	.word	0x2003e7c4
   d7660:	000d87a4 	.word	0x000d87a4

000d7664 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7664:	2300      	movs	r3, #0
   d7666:	6840      	ldr	r0, [r0, #4]
   d7668:	461a      	mov	r2, r3
   d766a:	f7fe b93d 	b.w	d58e8 <network_connect>

000d766e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d766e:	6840      	ldr	r0, [r0, #4]
   d7670:	2200      	movs	r2, #0
   d7672:	2102      	movs	r1, #2
   d7674:	f7fe b948 	b.w	d5908 <network_disconnect>

000d7678 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7678:	2200      	movs	r2, #0
   d767a:	6840      	ldr	r0, [r0, #4]
   d767c:	4611      	mov	r1, r2
   d767e:	f7fe b93b 	b.w	d58f8 <network_connecting>

000d7682 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7682:	2200      	movs	r2, #0
   d7684:	6840      	ldr	r0, [r0, #4]
   d7686:	4611      	mov	r1, r2
   d7688:	f7fe b946 	b.w	d5918 <network_ready>

000d768c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d768c:	2300      	movs	r3, #0
   d768e:	6840      	ldr	r0, [r0, #4]
   d7690:	461a      	mov	r2, r3
   d7692:	4619      	mov	r1, r3
   d7694:	f7fe b948 	b.w	d5928 <network_on>

000d7698 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7698:	2300      	movs	r3, #0
   d769a:	6840      	ldr	r0, [r0, #4]
   d769c:	461a      	mov	r2, r3
   d769e:	4619      	mov	r1, r3
   d76a0:	f7fe b94a 	b.w	d5938 <network_off>

000d76a4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d76a4:	6840      	ldr	r0, [r0, #4]
   d76a6:	2100      	movs	r1, #0
   d76a8:	f7fe b96e 	b.w	d5988 <network_is_on>

000d76ac <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d76ac:	6840      	ldr	r0, [r0, #4]
   d76ae:	2100      	movs	r1, #0
   d76b0:	f7fe b972 	b.w	d5998 <network_is_off>

000d76b4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d76b4:	6840      	ldr	r0, [r0, #4]
   d76b6:	2200      	movs	r2, #0
   d76b8:	f081 0101 	eor.w	r1, r1, #1
   d76bc:	f7fe b944 	b.w	d5948 <network_listen>

000d76c0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d76c0:	6840      	ldr	r0, [r0, #4]
   d76c2:	2200      	movs	r2, #0
   d76c4:	f7fe b950 	b.w	d5968 <network_set_listen_timeout>

000d76c8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d76c8:	2200      	movs	r2, #0
   d76ca:	6840      	ldr	r0, [r0, #4]
   d76cc:	4611      	mov	r1, r2
   d76ce:	f7fe b953 	b.w	d5978 <network_get_listen_timeout>

000d76d2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d76d2:	2200      	movs	r2, #0
   d76d4:	6840      	ldr	r0, [r0, #4]
   d76d6:	4611      	mov	r1, r2
   d76d8:	f7fe b93e 	b.w	d5958 <network_listening>

000d76dc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d76dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d76e0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d76e2:	b095      	sub	sp, #84	; 0x54
   d76e4:	4616      	mov	r6, r2
   d76e6:	460d      	mov	r5, r1
   d76e8:	4607      	mov	r7, r0
    IPAddress addr;
   d76ea:	f7ff fdef 	bl	d72cc <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d76ee:	4621      	mov	r1, r4
   d76f0:	2218      	movs	r2, #24
   d76f2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d76f4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d76f6:	f000 fab5 	bl	d7c64 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d76fa:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d76fc:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7700:	4621      	mov	r1, r4
   d7702:	466b      	mov	r3, sp
   d7704:	aa0c      	add	r2, sp, #48	; 0x30
   d7706:	4630      	mov	r0, r6
   d7708:	f7fd fe68 	bl	d53dc <netdb_getaddrinfo>
    if (!r) {
   d770c:	4604      	mov	r4, r0
   d770e:	2800      	cmp	r0, #0
   d7710:	d14c      	bne.n	d77ac <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7712:	4602      	mov	r2, r0
   d7714:	2101      	movs	r1, #1
   d7716:	6868      	ldr	r0, [r5, #4]
   d7718:	f7fe f8fe 	bl	d5918 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d771c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d771e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7720:	4622      	mov	r2, r4
   d7722:	6868      	ldr	r0, [r5, #4]
   d7724:	f7fe f8f8 	bl	d5918 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7728:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d772a:	4681      	mov	r9, r0
        bool ok = false;
   d772c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d772e:	2e00      	cmp	r6, #0
   d7730:	d03c      	beq.n	d77ac <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d7732:	2900      	cmp	r1, #0
   d7734:	d13a      	bne.n	d77ac <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7736:	6873      	ldr	r3, [r6, #4]
   d7738:	2b02      	cmp	r3, #2
   d773a:	d003      	beq.n	d7744 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d773c:	2b0a      	cmp	r3, #10
   d773e:	d011      	beq.n	d7764 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7740:	69f6      	ldr	r6, [r6, #28]
   d7742:	e7f4      	b.n	d772e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7744:	f1b8 0f00 	cmp.w	r8, #0
   d7748:	d00a      	beq.n	d7760 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d774a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d774c:	a806      	add	r0, sp, #24
   d774e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d7750:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d7752:	f7ff fde9 	bl	d7328 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d7756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7758:	1d3c      	adds	r4, r7, #4
   d775a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d775c:	682b      	ldr	r3, [r5, #0]
   d775e:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d7760:	4641      	mov	r1, r8
   d7762:	e7ed      	b.n	d7740 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7764:	f1b9 0f00 	cmp.w	r9, #0
   d7768:	d101      	bne.n	d776e <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d776a:	4649      	mov	r1, r9
   d776c:	e7e8      	b.n	d7740 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d776e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7770:	2210      	movs	r2, #16
   d7772:	a801      	add	r0, sp, #4
   d7774:	f000 fa76 	bl	d7c64 <memset>
                    a.v = 6;
   d7778:	2306      	movs	r3, #6
   d777a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d777e:	ad01      	add	r5, sp, #4
   d7780:	f104 0308 	add.w	r3, r4, #8
   d7784:	3418      	adds	r4, #24
   d7786:	6818      	ldr	r0, [r3, #0]
   d7788:	6859      	ldr	r1, [r3, #4]
   d778a:	462a      	mov	r2, r5
   d778c:	c203      	stmia	r2!, {r0, r1}
   d778e:	3308      	adds	r3, #8
   d7790:	42a3      	cmp	r3, r4
   d7792:	4615      	mov	r5, r2
   d7794:	d1f7      	bne.n	d7786 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d7796:	a901      	add	r1, sp, #4
   d7798:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d779a:	ad07      	add	r5, sp, #28
   d779c:	f7ff fda4 	bl	d72e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d77a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d77a2:	1d3c      	adds	r4, r7, #4
   d77a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d77a6:	682b      	ldr	r3, [r5, #0]
   d77a8:	7023      	strb	r3, [r4, #0]
   d77aa:	e7de      	b.n	d776a <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d77ac:	9800      	ldr	r0, [sp, #0]
   d77ae:	f7fd fe0d 	bl	d53cc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d77b2:	4638      	mov	r0, r7
   d77b4:	b015      	add	sp, #84	; 0x54
   d77b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d77bc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d77bc:	4b02      	ldr	r3, [pc, #8]	; (d77c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d77be:	4a03      	ldr	r2, [pc, #12]	; (d77cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d77c0:	601a      	str	r2, [r3, #0]
   d77c2:	2200      	movs	r2, #0
   d77c4:	605a      	str	r2, [r3, #4]

} // spark
   d77c6:	4770      	bx	lr
   d77c8:	2003e7cc 	.word	0x2003e7cc
   d77cc:	000d87e0 	.word	0x000d87e0

000d77d0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d77d0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d77d2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d77d4:	d902      	bls.n	d77dc <pinAvailable+0xc>
    return false;
   d77d6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d77d8:	b002      	add	sp, #8
   d77da:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d77dc:	f1a0 030b 	sub.w	r3, r0, #11
   d77e0:	2b02      	cmp	r3, #2
   d77e2:	d81a      	bhi.n	d781a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d77e4:	4c17      	ldr	r4, [pc, #92]	; (d7844 <pinAvailable+0x74>)
   d77e6:	7821      	ldrb	r1, [r4, #0]
   d77e8:	f3bf 8f5b 	dmb	ish
   d77ec:	f011 0101 	ands.w	r1, r1, #1
   d77f0:	d10b      	bne.n	d780a <pinAvailable+0x3a>
   d77f2:	4620      	mov	r0, r4
   d77f4:	9101      	str	r1, [sp, #4]
   d77f6:	f7fc fc5d 	bl	d40b4 <__cxa_guard_acquire>
   d77fa:	9901      	ldr	r1, [sp, #4]
   d77fc:	b128      	cbz	r0, d780a <pinAvailable+0x3a>
   d77fe:	4812      	ldr	r0, [pc, #72]	; (d7848 <pinAvailable+0x78>)
   d7800:	f7fe f94e 	bl	d5aa0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7804:	4620      	mov	r0, r4
   d7806:	f7fc fc5a 	bl	d40be <__cxa_guard_release>
   d780a:	4b0f      	ldr	r3, [pc, #60]	; (d7848 <pinAvailable+0x78>)
   d780c:	7818      	ldrb	r0, [r3, #0]
   d780e:	f7fd ffbf 	bl	d5790 <hal_spi_is_enabled>
   d7812:	2800      	cmp	r0, #0
   d7814:	d1df      	bne.n	d77d6 <pinAvailable+0x6>
  return true; // 'pin' is available
   d7816:	2001      	movs	r0, #1
   d7818:	e7de      	b.n	d77d8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d781a:	2801      	cmp	r0, #1
   d781c:	d809      	bhi.n	d7832 <pinAvailable+0x62>
   d781e:	f000 f891 	bl	d7944 <_Z19__fetch_global_Wirev>
   d7822:	2100      	movs	r1, #0
   d7824:	7c00      	ldrb	r0, [r0, #16]
   d7826:	f7fd ff73 	bl	d5710 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d782a:	f080 0001 	eor.w	r0, r0, #1
   d782e:	b2c0      	uxtb	r0, r0
   d7830:	e7d2      	b.n	d77d8 <pinAvailable+0x8>
   d7832:	3809      	subs	r0, #9
   d7834:	2801      	cmp	r0, #1
   d7836:	d8ee      	bhi.n	d7816 <pinAvailable+0x46>
   d7838:	f7ff fe60 	bl	d74fc <_Z22__fetch_global_Serial1v>
   d783c:	7c00      	ldrb	r0, [r0, #16]
   d783e:	f7fd ff17 	bl	d5670 <hal_usart_is_enabled>
   d7842:	e7f2      	b.n	d782a <pinAvailable+0x5a>
   d7844:	2003e638 	.word	0x2003e638
   d7848:	2003e63c 	.word	0x2003e63c

000d784c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d784c:	2823      	cmp	r0, #35	; 0x23
{
   d784e:	b538      	push	{r3, r4, r5, lr}
   d7850:	4604      	mov	r4, r0
   d7852:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7854:	d80a      	bhi.n	d786c <pinMode+0x20>
   d7856:	29ff      	cmp	r1, #255	; 0xff
   d7858:	d008      	beq.n	d786c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d785a:	f7ff ffb9 	bl	d77d0 <pinAvailable>
   d785e:	b128      	cbz	r0, d786c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7860:	4629      	mov	r1, r5
   d7862:	4620      	mov	r0, r4
}
   d7864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7868:	f7fd bdc8 	b.w	d53fc <HAL_Pin_Mode>
}
   d786c:	bd38      	pop	{r3, r4, r5, pc}

000d786e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d786e:	b538      	push	{r3, r4, r5, lr}
   d7870:	4604      	mov	r4, r0
   d7872:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7874:	f7fd fdca 	bl	d540c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7878:	28ff      	cmp	r0, #255	; 0xff
   d787a:	d010      	beq.n	d789e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d787c:	2806      	cmp	r0, #6
   d787e:	d804      	bhi.n	d788a <digitalWrite+0x1c>
   d7880:	234d      	movs	r3, #77	; 0x4d
   d7882:	fa23 f000 	lsr.w	r0, r3, r0
   d7886:	07c3      	lsls	r3, r0, #31
   d7888:	d409      	bmi.n	d789e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d788a:	4620      	mov	r0, r4
   d788c:	f7ff ffa0 	bl	d77d0 <pinAvailable>
   d7890:	b128      	cbz	r0, d789e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7892:	4629      	mov	r1, r5
   d7894:	4620      	mov	r0, r4
}
   d7896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d789a:	f7fd bdbf 	b.w	d541c <HAL_GPIO_Write>
}
   d789e:	bd38      	pop	{r3, r4, r5, pc}

000d78a0 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d78a0:	280d      	cmp	r0, #13
{
   d78a2:	b510      	push	{r4, lr}
   d78a4:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d78a6:	bf9c      	itt	ls
   d78a8:	340e      	addls	r4, #14
   d78aa:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d78ac:	4620      	mov	r0, r4
   d78ae:	f7ff ff8f 	bl	d77d0 <pinAvailable>
   d78b2:	b150      	cbz	r0, d78ca <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d78b4:	2103      	movs	r1, #3
   d78b6:	4620      	mov	r0, r4
   d78b8:	f7fd fd98 	bl	d53ec <HAL_Validate_Pin_Function>
   d78bc:	2803      	cmp	r0, #3
   d78be:	d104      	bne.n	d78ca <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d78c0:	4620      	mov	r0, r4
}
   d78c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d78c6:	f7fd bdb1 	b.w	d542c <hal_adc_read>
}
   d78ca:	2000      	movs	r0, #0
   d78cc:	bd10      	pop	{r4, pc}

000d78ce <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d78ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d78d2:	4690      	mov	r8, r2
   d78d4:	461f      	mov	r7, r3
   d78d6:	2400      	movs	r4, #0
   d78d8:	4606      	mov	r6, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d78da:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   d78dc:	f1b8 0f00 	cmp.w	r8, #0
   d78e0:	d113      	bne.n	d790a <shiftOut+0x3c>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d78e2:	fa47 f104 	asr.w	r1, r7, r4
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d78e6:	f001 0101 	and.w	r1, r1, #1
   d78ea:	4630      	mov	r0, r6
   d78ec:	f7ff ffbf 	bl	d786e <digitalWrite>
    digitalWrite(clockPin, HIGH);
   d78f0:	2101      	movs	r1, #1
   d78f2:	4628      	mov	r0, r5
   d78f4:	f7ff ffbb 	bl	d786e <digitalWrite>
    digitalWrite(clockPin, LOW);
   d78f8:	3401      	adds	r4, #1
   d78fa:	2100      	movs	r1, #0
   d78fc:	4628      	mov	r0, r5
   d78fe:	f7ff ffb6 	bl	d786e <digitalWrite>
  for (i = 0; i < 8; i++)  {
   d7902:	2c08      	cmp	r4, #8
   d7904:	d1ea      	bne.n	d78dc <shiftOut+0xe>
  }
}
   d7906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d790a:	f1c4 0107 	rsb	r1, r4, #7
   d790e:	fa47 f101 	asr.w	r1, r7, r1
   d7912:	e7e8      	b.n	d78e6 <shiftOut+0x18>

000d7914 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7914:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7916:	2300      	movs	r3, #0
   d7918:	2520      	movs	r5, #32
   d791a:	8043      	strh	r3, [r0, #2]
   d791c:	2314      	movs	r3, #20
{
   d791e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7920:	8003      	strh	r3, [r0, #0]
   d7922:	6085      	str	r5, [r0, #8]
   d7924:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7926:	4906      	ldr	r1, [pc, #24]	; (d7940 <_Z17acquireWireBufferv+0x2c>)
   d7928:	4628      	mov	r0, r5
   d792a:	f000 f83c 	bl	d79a6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d792e:	4904      	ldr	r1, [pc, #16]	; (d7940 <_Z17acquireWireBufferv+0x2c>)
	};
   d7930:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7932:	4628      	mov	r0, r5
   d7934:	f000 f837 	bl	d79a6 <_ZnajRKSt9nothrow_t>
	};
   d7938:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d793a:	4620      	mov	r0, r4
   d793c:	bd38      	pop	{r3, r4, r5, pc}
   d793e:	bf00      	nop
   d7940:	000d8814 	.word	0x000d8814

000d7944 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7944:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7946:	4d0f      	ldr	r5, [pc, #60]	; (d7984 <_Z19__fetch_global_Wirev+0x40>)
   d7948:	7829      	ldrb	r1, [r5, #0]
   d794a:	f3bf 8f5b 	dmb	ish
   d794e:	f011 0401 	ands.w	r4, r1, #1
{
   d7952:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7954:	d113      	bne.n	d797e <_Z19__fetch_global_Wirev+0x3a>
   d7956:	4628      	mov	r0, r5
   d7958:	f7fc fbac 	bl	d40b4 <__cxa_guard_acquire>
   d795c:	b178      	cbz	r0, d797e <_Z19__fetch_global_Wirev+0x3a>
   d795e:	a801      	add	r0, sp, #4
   d7960:	f7ff ffd8 	bl	d7914 <_Z17acquireWireBufferv>
   d7964:	aa01      	add	r2, sp, #4
   d7966:	4621      	mov	r1, r4
   d7968:	4807      	ldr	r0, [pc, #28]	; (d7988 <_Z19__fetch_global_Wirev+0x44>)
   d796a:	f7ff fe1d 	bl	d75a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d796e:	4628      	mov	r0, r5
   d7970:	f7fc fba5 	bl	d40be <__cxa_guard_release>
   d7974:	4a05      	ldr	r2, [pc, #20]	; (d798c <_Z19__fetch_global_Wirev+0x48>)
   d7976:	4906      	ldr	r1, [pc, #24]	; (d7990 <_Z19__fetch_global_Wirev+0x4c>)
   d7978:	4803      	ldr	r0, [pc, #12]	; (d7988 <_Z19__fetch_global_Wirev+0x44>)
   d797a:	f000 f80b 	bl	d7994 <__aeabi_atexit>
	return wire;
}
   d797e:	4802      	ldr	r0, [pc, #8]	; (d7988 <_Z19__fetch_global_Wirev+0x44>)
   d7980:	b007      	add	sp, #28
   d7982:	bd30      	pop	{r4, r5, pc}
   d7984:	2003e7d8 	.word	0x2003e7d8
   d7988:	2003e7dc 	.word	0x2003e7dc
   d798c:	2003e5e4 	.word	0x2003e5e4
   d7990:	000d7551 	.word	0x000d7551

000d7994 <__aeabi_atexit>:
   d7994:	460b      	mov	r3, r1
   d7996:	4601      	mov	r1, r0
   d7998:	4618      	mov	r0, r3
   d799a:	f000 b91f 	b.w	d7bdc <__cxa_atexit>

000d799e <_ZdlPvj>:
   d799e:	f7fc bb7c 	b.w	d409a <_ZdlPv>

000d79a2 <_ZnwjRKSt9nothrow_t>:
   d79a2:	f7fc bb76 	b.w	d4092 <_Znwj>

000d79a6 <_ZnajRKSt9nothrow_t>:
   d79a6:	f7fc bb76 	b.w	d4096 <_Znaj>

000d79aa <_ZSt25__throw_bad_function_callv>:
   d79aa:	b508      	push	{r3, lr}
   d79ac:	f7fe f824 	bl	d59f8 <abort>

000d79b0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d79b0:	4901      	ldr	r1, [pc, #4]	; (d79b8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d79b2:	f000 b8f9 	b.w	d7ba8 <_ZNKSt9type_infoeqERKS_>
   d79b6:	bf00      	nop
   d79b8:	000d8830 	.word	0x000d8830

000d79bc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d79bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d79be:	2400      	movs	r4, #0
   d79c0:	2310      	movs	r3, #16
   d79c2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d79c6:	6803      	ldr	r3, [r0, #0]
   d79c8:	9400      	str	r4, [sp, #0]
   d79ca:	699e      	ldr	r6, [r3, #24]
   d79cc:	f88d 4004 	strb.w	r4, [sp, #4]
   d79d0:	4615      	mov	r5, r2
   d79d2:	466b      	mov	r3, sp
   d79d4:	6812      	ldr	r2, [r2, #0]
   d79d6:	47b0      	blx	r6
   d79d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d79dc:	f003 0306 	and.w	r3, r3, #6
   d79e0:	2b06      	cmp	r3, #6
   d79e2:	bf03      	ittte	eq
   d79e4:	9b00      	ldreq	r3, [sp, #0]
   d79e6:	602b      	streq	r3, [r5, #0]
   d79e8:	2001      	moveq	r0, #1
   d79ea:	4620      	movne	r0, r4
   d79ec:	b004      	add	sp, #16
   d79ee:	bd70      	pop	{r4, r5, r6, pc}

000d79f0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d79f0:	9800      	ldr	r0, [sp, #0]
   d79f2:	4290      	cmp	r0, r2
   d79f4:	bf14      	ite	ne
   d79f6:	2001      	movne	r0, #1
   d79f8:	2006      	moveq	r0, #6
   d79fa:	4770      	bx	lr

000d79fc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d79fc:	b510      	push	{r4, lr}
   d79fe:	4b03      	ldr	r3, [pc, #12]	; (d7a0c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d7a00:	6003      	str	r3, [r0, #0]
   d7a02:	4604      	mov	r4, r0
   d7a04:	f000 f8cd 	bl	d7ba2 <_ZNSt9type_infoD1Ev>
   d7a08:	4620      	mov	r0, r4
   d7a0a:	bd10      	pop	{r4, pc}
   d7a0c:	000d8870 	.word	0x000d8870

000d7a10 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d7a10:	b510      	push	{r4, lr}
   d7a12:	4604      	mov	r4, r0
   d7a14:	f7ff fff2 	bl	d79fc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7a18:	4620      	mov	r0, r4
   d7a1a:	2108      	movs	r1, #8
   d7a1c:	f7ff ffbf 	bl	d799e <_ZdlPvj>
   d7a20:	4620      	mov	r0, r4
   d7a22:	bd10      	pop	{r4, pc}

000d7a24 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d7a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7a28:	461f      	mov	r7, r3
   d7a2a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d7a2e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d7a32:	4598      	cmp	r8, r3
   d7a34:	4606      	mov	r6, r0
   d7a36:	4615      	mov	r5, r2
   d7a38:	d107      	bne.n	d7a4a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7a3a:	9907      	ldr	r1, [sp, #28]
   d7a3c:	f000 f8b4 	bl	d7ba8 <_ZNKSt9type_infoeqERKS_>
   d7a40:	b118      	cbz	r0, d7a4a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7a42:	7165      	strb	r5, [r4, #5]
   d7a44:	2000      	movs	r0, #0
   d7a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7a4a:	4639      	mov	r1, r7
   d7a4c:	4630      	mov	r0, r6
   d7a4e:	f000 f8ab 	bl	d7ba8 <_ZNKSt9type_infoeqERKS_>
   d7a52:	2800      	cmp	r0, #0
   d7a54:	d0f6      	beq.n	d7a44 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d7a56:	2301      	movs	r3, #1
   d7a58:	f8c4 8000 	str.w	r8, [r4]
   d7a5c:	7125      	strb	r5, [r4, #4]
   d7a5e:	71a3      	strb	r3, [r4, #6]
   d7a60:	e7f0      	b.n	d7a44 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d7a62 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d7a62:	b538      	push	{r3, r4, r5, lr}
   d7a64:	4615      	mov	r5, r2
   d7a66:	461c      	mov	r4, r3
   d7a68:	f000 f89e 	bl	d7ba8 <_ZNKSt9type_infoeqERKS_>
   d7a6c:	b120      	cbz	r0, d7a78 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d7a6e:	2308      	movs	r3, #8
   d7a70:	60e3      	str	r3, [r4, #12]
   d7a72:	2306      	movs	r3, #6
   d7a74:	6025      	str	r5, [r4, #0]
   d7a76:	7123      	strb	r3, [r4, #4]
   d7a78:	bd38      	pop	{r3, r4, r5, pc}

000d7a7a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d7a7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7a7c:	4605      	mov	r5, r0
   d7a7e:	460c      	mov	r4, r1
   d7a80:	9201      	str	r2, [sp, #4]
   d7a82:	461e      	mov	r6, r3
   d7a84:	f000 f890 	bl	d7ba8 <_ZNKSt9type_infoeqERKS_>
   d7a88:	b950      	cbnz	r0, d7aa0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7a8a:	2e03      	cmp	r6, #3
   d7a8c:	d808      	bhi.n	d7aa0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7a8e:	6823      	ldr	r3, [r4, #0]
   d7a90:	9a01      	ldr	r2, [sp, #4]
   d7a92:	695b      	ldr	r3, [r3, #20]
   d7a94:	4629      	mov	r1, r5
   d7a96:	4620      	mov	r0, r4
   d7a98:	b002      	add	sp, #8
   d7a9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7a9e:	4718      	bx	r3
   d7aa0:	b002      	add	sp, #8
   d7aa2:	bd70      	pop	{r4, r5, r6, pc}

000d7aa4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d7aa4:	b510      	push	{r4, lr}
   d7aa6:	4b03      	ldr	r3, [pc, #12]	; (d7ab4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d7aa8:	6003      	str	r3, [r0, #0]
   d7aaa:	4604      	mov	r4, r0
   d7aac:	f7ff ffa6 	bl	d79fc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7ab0:	4620      	mov	r0, r4
   d7ab2:	bd10      	pop	{r4, pc}
   d7ab4:	000d88d0 	.word	0x000d88d0

000d7ab8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d7ab8:	b510      	push	{r4, lr}
   d7aba:	4604      	mov	r4, r0
   d7abc:	f7ff fff2 	bl	d7aa4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d7ac0:	4620      	mov	r0, r4
   d7ac2:	210c      	movs	r1, #12
   d7ac4:	f7ff ff6b 	bl	d799e <_ZdlPvj>
   d7ac8:	4620      	mov	r0, r4
   d7aca:	bd10      	pop	{r4, pc}

000d7acc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d7acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7ace:	9f08      	ldr	r7, [sp, #32]
   d7ad0:	4297      	cmp	r7, r2
   d7ad2:	4605      	mov	r5, r0
   d7ad4:	460e      	mov	r6, r1
   d7ad6:	4614      	mov	r4, r2
   d7ad8:	d00a      	beq.n	d7af0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d7ada:	68a8      	ldr	r0, [r5, #8]
   d7adc:	6802      	ldr	r2, [r0, #0]
   d7ade:	9708      	str	r7, [sp, #32]
   d7ae0:	6a15      	ldr	r5, [r2, #32]
   d7ae2:	4631      	mov	r1, r6
   d7ae4:	4622      	mov	r2, r4
   d7ae6:	46ac      	mov	ip, r5
   d7ae8:	b003      	add	sp, #12
   d7aea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d7aee:	4760      	bx	ip
   d7af0:	4619      	mov	r1, r3
   d7af2:	9301      	str	r3, [sp, #4]
   d7af4:	f000 f858 	bl	d7ba8 <_ZNKSt9type_infoeqERKS_>
   d7af8:	9b01      	ldr	r3, [sp, #4]
   d7afa:	2800      	cmp	r0, #0
   d7afc:	d0ed      	beq.n	d7ada <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d7afe:	2006      	movs	r0, #6
   d7b00:	b003      	add	sp, #12
   d7b02:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7b04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d7b04:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7b08:	460d      	mov	r5, r1
   d7b0a:	4619      	mov	r1, r3
   d7b0c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d7b10:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d7b14:	4681      	mov	r9, r0
   d7b16:	4617      	mov	r7, r2
   d7b18:	4698      	mov	r8, r3
   d7b1a:	f000 f845 	bl	d7ba8 <_ZNKSt9type_infoeqERKS_>
   d7b1e:	b190      	cbz	r0, d7b46 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d7b20:	2d00      	cmp	r5, #0
   d7b22:	6034      	str	r4, [r6, #0]
   d7b24:	7137      	strb	r7, [r6, #4]
   d7b26:	db09      	blt.n	d7b3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d7b28:	1961      	adds	r1, r4, r5
   d7b2a:	458a      	cmp	sl, r1
   d7b2c:	bf0c      	ite	eq
   d7b2e:	2106      	moveq	r1, #6
   d7b30:	2101      	movne	r1, #1
   d7b32:	71b1      	strb	r1, [r6, #6]
   d7b34:	2000      	movs	r0, #0
   d7b36:	b001      	add	sp, #4
   d7b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7b3c:	3502      	adds	r5, #2
   d7b3e:	d1f9      	bne.n	d7b34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7b40:	2301      	movs	r3, #1
   d7b42:	71b3      	strb	r3, [r6, #6]
   d7b44:	e7f6      	b.n	d7b34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7b46:	4554      	cmp	r4, sl
   d7b48:	d106      	bne.n	d7b58 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7b4a:	4659      	mov	r1, fp
   d7b4c:	4648      	mov	r0, r9
   d7b4e:	f000 f82b 	bl	d7ba8 <_ZNKSt9type_infoeqERKS_>
   d7b52:	b108      	cbz	r0, d7b58 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7b54:	7177      	strb	r7, [r6, #5]
   d7b56:	e7ed      	b.n	d7b34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7b58:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d7b5c:	6803      	ldr	r3, [r0, #0]
   d7b5e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d7b62:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d7b66:	69dc      	ldr	r4, [r3, #28]
   d7b68:	463a      	mov	r2, r7
   d7b6a:	4643      	mov	r3, r8
   d7b6c:	4629      	mov	r1, r5
   d7b6e:	46a4      	mov	ip, r4
   d7b70:	b001      	add	sp, #4
   d7b72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7b76:	4760      	bx	ip

000d7b78 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d7b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7b7c:	4607      	mov	r7, r0
   d7b7e:	460c      	mov	r4, r1
   d7b80:	4615      	mov	r5, r2
   d7b82:	461e      	mov	r6, r3
   d7b84:	f7ff ff6d 	bl	d7a62 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d7b88:	b948      	cbnz	r0, d7b9e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d7b8a:	68b8      	ldr	r0, [r7, #8]
   d7b8c:	6803      	ldr	r3, [r0, #0]
   d7b8e:	699f      	ldr	r7, [r3, #24]
   d7b90:	462a      	mov	r2, r5
   d7b92:	4633      	mov	r3, r6
   d7b94:	4621      	mov	r1, r4
   d7b96:	46bc      	mov	ip, r7
   d7b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d7b9c:	4760      	bx	ip
   d7b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7ba2 <_ZNSt9type_infoD1Ev>:
   d7ba2:	4770      	bx	lr

000d7ba4 <_ZNKSt9type_info14__is_pointer_pEv>:
   d7ba4:	2000      	movs	r0, #0
   d7ba6:	4770      	bx	lr

000d7ba8 <_ZNKSt9type_infoeqERKS_>:
   d7ba8:	4281      	cmp	r1, r0
   d7baa:	b508      	push	{r3, lr}
   d7bac:	d00e      	beq.n	d7bcc <_ZNKSt9type_infoeqERKS_+0x24>
   d7bae:	6840      	ldr	r0, [r0, #4]
   d7bb0:	7803      	ldrb	r3, [r0, #0]
   d7bb2:	2b2a      	cmp	r3, #42	; 0x2a
   d7bb4:	d00c      	beq.n	d7bd0 <_ZNKSt9type_infoeqERKS_+0x28>
   d7bb6:	6849      	ldr	r1, [r1, #4]
   d7bb8:	780b      	ldrb	r3, [r1, #0]
   d7bba:	2b2a      	cmp	r3, #42	; 0x2a
   d7bbc:	bf08      	it	eq
   d7bbe:	3101      	addeq	r1, #1
   d7bc0:	f000 f87c 	bl	d7cbc <strcmp>
   d7bc4:	fab0 f080 	clz	r0, r0
   d7bc8:	0940      	lsrs	r0, r0, #5
   d7bca:	bd08      	pop	{r3, pc}
   d7bcc:	2001      	movs	r0, #1
   d7bce:	e7fc      	b.n	d7bca <_ZNKSt9type_infoeqERKS_+0x22>
   d7bd0:	2000      	movs	r0, #0
   d7bd2:	e7fa      	b.n	d7bca <_ZNKSt9type_infoeqERKS_+0x22>

000d7bd4 <atoi>:
   d7bd4:	220a      	movs	r2, #10
   d7bd6:	2100      	movs	r1, #0
   d7bd8:	f000 b90a 	b.w	d7df0 <strtol>

000d7bdc <__cxa_atexit>:
   d7bdc:	b510      	push	{r4, lr}
   d7bde:	4c05      	ldr	r4, [pc, #20]	; (d7bf4 <__cxa_atexit+0x18>)
   d7be0:	4613      	mov	r3, r2
   d7be2:	b12c      	cbz	r4, d7bf0 <__cxa_atexit+0x14>
   d7be4:	460a      	mov	r2, r1
   d7be6:	4601      	mov	r1, r0
   d7be8:	2002      	movs	r0, #2
   d7bea:	f3af 8000 	nop.w
   d7bee:	bd10      	pop	{r4, pc}
   d7bf0:	4620      	mov	r0, r4
   d7bf2:	e7fc      	b.n	d7bee <__cxa_atexit+0x12>
   d7bf4:	00000000 	.word	0x00000000

000d7bf8 <memcmp>:
   d7bf8:	b530      	push	{r4, r5, lr}
   d7bfa:	3901      	subs	r1, #1
   d7bfc:	2400      	movs	r4, #0
   d7bfe:	42a2      	cmp	r2, r4
   d7c00:	d101      	bne.n	d7c06 <memcmp+0xe>
   d7c02:	2000      	movs	r0, #0
   d7c04:	e005      	b.n	d7c12 <memcmp+0x1a>
   d7c06:	5d03      	ldrb	r3, [r0, r4]
   d7c08:	3401      	adds	r4, #1
   d7c0a:	5d0d      	ldrb	r5, [r1, r4]
   d7c0c:	42ab      	cmp	r3, r5
   d7c0e:	d0f6      	beq.n	d7bfe <memcmp+0x6>
   d7c10:	1b58      	subs	r0, r3, r5
   d7c12:	bd30      	pop	{r4, r5, pc}

000d7c14 <memcpy>:
   d7c14:	440a      	add	r2, r1
   d7c16:	4291      	cmp	r1, r2
   d7c18:	f100 33ff 	add.w	r3, r0, #4294967295
   d7c1c:	d100      	bne.n	d7c20 <memcpy+0xc>
   d7c1e:	4770      	bx	lr
   d7c20:	b510      	push	{r4, lr}
   d7c22:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7c26:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7c2a:	4291      	cmp	r1, r2
   d7c2c:	d1f9      	bne.n	d7c22 <memcpy+0xe>
   d7c2e:	bd10      	pop	{r4, pc}

000d7c30 <memmove>:
   d7c30:	4288      	cmp	r0, r1
   d7c32:	b510      	push	{r4, lr}
   d7c34:	eb01 0402 	add.w	r4, r1, r2
   d7c38:	d902      	bls.n	d7c40 <memmove+0x10>
   d7c3a:	4284      	cmp	r4, r0
   d7c3c:	4623      	mov	r3, r4
   d7c3e:	d807      	bhi.n	d7c50 <memmove+0x20>
   d7c40:	1e43      	subs	r3, r0, #1
   d7c42:	42a1      	cmp	r1, r4
   d7c44:	d008      	beq.n	d7c58 <memmove+0x28>
   d7c46:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7c4a:	f803 2f01 	strb.w	r2, [r3, #1]!
   d7c4e:	e7f8      	b.n	d7c42 <memmove+0x12>
   d7c50:	4402      	add	r2, r0
   d7c52:	4601      	mov	r1, r0
   d7c54:	428a      	cmp	r2, r1
   d7c56:	d100      	bne.n	d7c5a <memmove+0x2a>
   d7c58:	bd10      	pop	{r4, pc}
   d7c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7c5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d7c62:	e7f7      	b.n	d7c54 <memmove+0x24>

000d7c64 <memset>:
   d7c64:	4402      	add	r2, r0
   d7c66:	4603      	mov	r3, r0
   d7c68:	4293      	cmp	r3, r2
   d7c6a:	d100      	bne.n	d7c6e <memset+0xa>
   d7c6c:	4770      	bx	lr
   d7c6e:	f803 1b01 	strb.w	r1, [r3], #1
   d7c72:	e7f9      	b.n	d7c68 <memset+0x4>

000d7c74 <srand>:
   d7c74:	b538      	push	{r3, r4, r5, lr}
   d7c76:	4b0d      	ldr	r3, [pc, #52]	; (d7cac <srand+0x38>)
   d7c78:	681d      	ldr	r5, [r3, #0]
   d7c7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7c7c:	4604      	mov	r4, r0
   d7c7e:	b97b      	cbnz	r3, d7ca0 <srand+0x2c>
   d7c80:	2018      	movs	r0, #24
   d7c82:	f7fd fe99 	bl	d59b8 <malloc>
   d7c86:	4a0a      	ldr	r2, [pc, #40]	; (d7cb0 <srand+0x3c>)
   d7c88:	4b0a      	ldr	r3, [pc, #40]	; (d7cb4 <srand+0x40>)
   d7c8a:	63a8      	str	r0, [r5, #56]	; 0x38
   d7c8c:	e9c0 2300 	strd	r2, r3, [r0]
   d7c90:	4b09      	ldr	r3, [pc, #36]	; (d7cb8 <srand+0x44>)
   d7c92:	6083      	str	r3, [r0, #8]
   d7c94:	230b      	movs	r3, #11
   d7c96:	8183      	strh	r3, [r0, #12]
   d7c98:	2201      	movs	r2, #1
   d7c9a:	2300      	movs	r3, #0
   d7c9c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7ca0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7ca2:	2200      	movs	r2, #0
   d7ca4:	611c      	str	r4, [r3, #16]
   d7ca6:	615a      	str	r2, [r3, #20]
   d7ca8:	bd38      	pop	{r3, r4, r5, pc}
   d7caa:	bf00      	nop
   d7cac:	2003e580 	.word	0x2003e580
   d7cb0:	abcd330e 	.word	0xabcd330e
   d7cb4:	e66d1234 	.word	0xe66d1234
   d7cb8:	0005deec 	.word	0x0005deec

000d7cbc <strcmp>:
   d7cbc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7cc0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7cc4:	2a01      	cmp	r2, #1
   d7cc6:	bf28      	it	cs
   d7cc8:	429a      	cmpcs	r2, r3
   d7cca:	d0f7      	beq.n	d7cbc <strcmp>
   d7ccc:	1ad0      	subs	r0, r2, r3
   d7cce:	4770      	bx	lr

000d7cd0 <strlen>:
   d7cd0:	4603      	mov	r3, r0
   d7cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7cd6:	2a00      	cmp	r2, #0
   d7cd8:	d1fb      	bne.n	d7cd2 <strlen+0x2>
   d7cda:	1a18      	subs	r0, r3, r0
   d7cdc:	3801      	subs	r0, #1
   d7cde:	4770      	bx	lr

000d7ce0 <strnlen>:
   d7ce0:	b510      	push	{r4, lr}
   d7ce2:	4602      	mov	r2, r0
   d7ce4:	4401      	add	r1, r0
   d7ce6:	428a      	cmp	r2, r1
   d7ce8:	4613      	mov	r3, r2
   d7cea:	d101      	bne.n	d7cf0 <strnlen+0x10>
   d7cec:	1a18      	subs	r0, r3, r0
   d7cee:	bd10      	pop	{r4, pc}
   d7cf0:	781c      	ldrb	r4, [r3, #0]
   d7cf2:	3201      	adds	r2, #1
   d7cf4:	2c00      	cmp	r4, #0
   d7cf6:	d1f6      	bne.n	d7ce6 <strnlen+0x6>
   d7cf8:	e7f8      	b.n	d7cec <strnlen+0xc>
	...

000d7cfc <_strtol_l.isra.0>:
   d7cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7d00:	4e3a      	ldr	r6, [pc, #232]	; (d7dec <_strtol_l.isra.0+0xf0>)
   d7d02:	4686      	mov	lr, r0
   d7d04:	468c      	mov	ip, r1
   d7d06:	4660      	mov	r0, ip
   d7d08:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7d0c:	5da5      	ldrb	r5, [r4, r6]
   d7d0e:	f015 0508 	ands.w	r5, r5, #8
   d7d12:	d1f8      	bne.n	d7d06 <_strtol_l.isra.0+0xa>
   d7d14:	2c2d      	cmp	r4, #45	; 0x2d
   d7d16:	d133      	bne.n	d7d80 <_strtol_l.isra.0+0x84>
   d7d18:	f89c 4000 	ldrb.w	r4, [ip]
   d7d1c:	f04f 0801 	mov.w	r8, #1
   d7d20:	f100 0c02 	add.w	ip, r0, #2
   d7d24:	2b00      	cmp	r3, #0
   d7d26:	d05c      	beq.n	d7de2 <_strtol_l.isra.0+0xe6>
   d7d28:	2b10      	cmp	r3, #16
   d7d2a:	d10c      	bne.n	d7d46 <_strtol_l.isra.0+0x4a>
   d7d2c:	2c30      	cmp	r4, #48	; 0x30
   d7d2e:	d10a      	bne.n	d7d46 <_strtol_l.isra.0+0x4a>
   d7d30:	f89c 0000 	ldrb.w	r0, [ip]
   d7d34:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7d38:	2858      	cmp	r0, #88	; 0x58
   d7d3a:	d14d      	bne.n	d7dd8 <_strtol_l.isra.0+0xdc>
   d7d3c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d7d40:	2310      	movs	r3, #16
   d7d42:	f10c 0c02 	add.w	ip, ip, #2
   d7d46:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d7d4a:	3f01      	subs	r7, #1
   d7d4c:	2600      	movs	r6, #0
   d7d4e:	fbb7 f9f3 	udiv	r9, r7, r3
   d7d52:	4630      	mov	r0, r6
   d7d54:	fb03 7a19 	mls	sl, r3, r9, r7
   d7d58:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d7d5c:	2d09      	cmp	r5, #9
   d7d5e:	d818      	bhi.n	d7d92 <_strtol_l.isra.0+0x96>
   d7d60:	462c      	mov	r4, r5
   d7d62:	42a3      	cmp	r3, r4
   d7d64:	dd24      	ble.n	d7db0 <_strtol_l.isra.0+0xb4>
   d7d66:	1c75      	adds	r5, r6, #1
   d7d68:	d007      	beq.n	d7d7a <_strtol_l.isra.0+0x7e>
   d7d6a:	4581      	cmp	r9, r0
   d7d6c:	d31d      	bcc.n	d7daa <_strtol_l.isra.0+0xae>
   d7d6e:	d101      	bne.n	d7d74 <_strtol_l.isra.0+0x78>
   d7d70:	45a2      	cmp	sl, r4
   d7d72:	db1a      	blt.n	d7daa <_strtol_l.isra.0+0xae>
   d7d74:	fb00 4003 	mla	r0, r0, r3, r4
   d7d78:	2601      	movs	r6, #1
   d7d7a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7d7e:	e7eb      	b.n	d7d58 <_strtol_l.isra.0+0x5c>
   d7d80:	2c2b      	cmp	r4, #43	; 0x2b
   d7d82:	bf08      	it	eq
   d7d84:	f89c 4000 	ldrbeq.w	r4, [ip]
   d7d88:	46a8      	mov	r8, r5
   d7d8a:	bf08      	it	eq
   d7d8c:	f100 0c02 	addeq.w	ip, r0, #2
   d7d90:	e7c8      	b.n	d7d24 <_strtol_l.isra.0+0x28>
   d7d92:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d7d96:	2d19      	cmp	r5, #25
   d7d98:	d801      	bhi.n	d7d9e <_strtol_l.isra.0+0xa2>
   d7d9a:	3c37      	subs	r4, #55	; 0x37
   d7d9c:	e7e1      	b.n	d7d62 <_strtol_l.isra.0+0x66>
   d7d9e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d7da2:	2d19      	cmp	r5, #25
   d7da4:	d804      	bhi.n	d7db0 <_strtol_l.isra.0+0xb4>
   d7da6:	3c57      	subs	r4, #87	; 0x57
   d7da8:	e7db      	b.n	d7d62 <_strtol_l.isra.0+0x66>
   d7daa:	f04f 36ff 	mov.w	r6, #4294967295
   d7dae:	e7e4      	b.n	d7d7a <_strtol_l.isra.0+0x7e>
   d7db0:	1c73      	adds	r3, r6, #1
   d7db2:	d106      	bne.n	d7dc2 <_strtol_l.isra.0+0xc6>
   d7db4:	2322      	movs	r3, #34	; 0x22
   d7db6:	f8ce 3000 	str.w	r3, [lr]
   d7dba:	4638      	mov	r0, r7
   d7dbc:	b942      	cbnz	r2, d7dd0 <_strtol_l.isra.0+0xd4>
   d7dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7dc2:	f1b8 0f00 	cmp.w	r8, #0
   d7dc6:	d000      	beq.n	d7dca <_strtol_l.isra.0+0xce>
   d7dc8:	4240      	negs	r0, r0
   d7dca:	2a00      	cmp	r2, #0
   d7dcc:	d0f7      	beq.n	d7dbe <_strtol_l.isra.0+0xc2>
   d7dce:	b10e      	cbz	r6, d7dd4 <_strtol_l.isra.0+0xd8>
   d7dd0:	f10c 31ff 	add.w	r1, ip, #4294967295
   d7dd4:	6011      	str	r1, [r2, #0]
   d7dd6:	e7f2      	b.n	d7dbe <_strtol_l.isra.0+0xc2>
   d7dd8:	2430      	movs	r4, #48	; 0x30
   d7dda:	2b00      	cmp	r3, #0
   d7ddc:	d1b3      	bne.n	d7d46 <_strtol_l.isra.0+0x4a>
   d7dde:	2308      	movs	r3, #8
   d7de0:	e7b1      	b.n	d7d46 <_strtol_l.isra.0+0x4a>
   d7de2:	2c30      	cmp	r4, #48	; 0x30
   d7de4:	d0a4      	beq.n	d7d30 <_strtol_l.isra.0+0x34>
   d7de6:	230a      	movs	r3, #10
   d7de8:	e7ad      	b.n	d7d46 <_strtol_l.isra.0+0x4a>
   d7dea:	bf00      	nop
   d7dec:	000d890a 	.word	0x000d890a

000d7df0 <strtol>:
   d7df0:	4613      	mov	r3, r2
   d7df2:	460a      	mov	r2, r1
   d7df4:	4601      	mov	r1, r0
   d7df6:	4802      	ldr	r0, [pc, #8]	; (d7e00 <strtol+0x10>)
   d7df8:	6800      	ldr	r0, [r0, #0]
   d7dfa:	f7ff bf7f 	b.w	d7cfc <_strtol_l.isra.0>
   d7dfe:	bf00      	nop
   d7e00:	2003e580 	.word	0x2003e580

000d7e04 <dynalib_user>:
   d7e04:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d7e14:	00000000 253a6425 64253a64 65373300     ....%d:%d:%d.37e
   d7e24:	33376633 36332d38 342d3337 2d306531     3f738-3673-41e0-
   d7e34:	35633561 6337362d 32666435 34396133     a5c5-67c5df23a94
   d7e44:	69740037 745f656d 61657268 64250064     7.time_thread.%d
   d7e54:	0a642520 73656700 65727574 7268745f      %d..gesture_thr
   d7e64:	00646165 64653338 36623363 3738662d     ead.83edc3b6-f87
   d7e74:	65342d65 612d6263 2d366437 35343233     e-4ecb-a7d6-3245
   d7e84:	61373062 39346136 61363700 31626563     b07a6a49.76aceb1
   d7e94:	62332d62 342d3837 2d633761 37663238     b-3b78-4a7c-82f7
   d7ea4:	3934612d 31303234 39666436 61640065     -a4942016df9e.da
   d7eb4:	34006574 33363934 2d643132 63636637     te.4496321d-7fcc
   d7ec4:	6461342d 65382d36 302d3035 31373233     -4ad6-8e50-03271
   d7ed4:	35303832 00356630 36363634 36333337     28050f5.46667336
   d7ee4:	6261362d 39342d61 622d6564 2d333738     -6aba-49de-b873-
   d7ef4:	31343734 37633932 62343132 6e656700     474129c7214b.gen
   d7f04:	74617265 006e6f69 32376132 35376362     eration.2a72bc75
   d7f14:	6531332d 63342d33 622d3663 2d353031     -31e3-4cc6-b105-
   d7f24:	32373432 32343939 62376239 70797400     247299429b7b.typ
   d7f34:	65310065 31356564 622d3632 2d303239     e.1ede5126-b920-
   d7f44:	34636634 6466382d 66352d37 62653035     4fc4-8fd7-5f50eb
   d7f54:	62353438 61003463 36346365 2d656363     845bc4.aec46cce-
   d7f64:	33643331 3232342d 35382d33 312d3034     13d3-4223-8540-1
   d7f74:	33663138 66386632 00616563 74736567     81f32f8fcea.gest
   d7f84:	00657275 316e6567 74617771 00006863     ure.gen1qwatch..

000d7f94 <_ZTVSt23_Sp_counted_ptr_inplaceIN6Quasar7BleDataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7f9c:	000d4585 000d45d5 000d4587 000d45e3     .E...E...E...E..
   d7fac:	000d45b5                                .E..

000d7fb0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000d7fb8 <_ZTV16Adafruit_SSD1306>:
	...
   d7fc0:	000d44e1 000d454d 000d5341 000d6fa9     .D..ME..AS...o..
   d7fd0:	000d4c21 000d5059 000d4ab1 000d4945     !L..YP...J..EI..
   d7fe0:	000d5115 000d51b3 000d51e9 000d5205     .Q...Q...Q...R..

000d7ff0 <_ZL4font>:
   d7ff0:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   d8000:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   d8010:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   d8020:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   d8030:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   d8040:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   d8050:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   d8060:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   d8070:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   d8080:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   d8090:	00000000 5f000000 07000000 14000700     ......._........
   d80a0:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   d80b0:	00502056 00030708 41221c00 22410000     V P......."A..A"
   d80c0:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   d80d0:	08080800 00000808 20006060 02040810     ........``. ....
   d80e0:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   d80f0:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   d8100:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   d8110:	00001e29 00000014 00003440 22140800     ).......@4....."
   d8120:	14141441 41001414 02081422 06095901     A......A"....Y..
   d8130:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   d8140:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   d8150:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   d8160:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   d8170:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   d8180:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   d8190:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   d81a0:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   d81b0:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   d81c0:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   d81d0:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   d81e0:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   d81f0:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   d8200:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   d8210:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   d8220:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   d8230:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   d8240:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   d8250:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   d8260:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   d8270:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   d8280:	41795555 78545421 54552141 54204078     UUyA!TTxA!UTx@ T
   d8290:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   d82a0:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   d82b0:	45010042 29f0407c f0f02924 f0282528     B..E|@.)$)..(%(.
   d82c0:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   d82d0:	32494949 48484832 484a3232 413a3048     III22HHH22JHH0:A
   d82e0:	3a7a2141 78204042 a0a09d00 4444397d     A!z:B@ x....}9DD
   d82f0:	403d3944 3c3d4040 2424ff24 43497e48     D9=@@@=<$.$$H~IC
   d8300:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   d8310:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   d8320:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   d8330:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   d8340:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   d8350:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   d8360:	005500aa aa55aaaa 0000aa55 1000ff00     ..U...U.U.......
   d8370:	00ff1010 ff141414 ff101000 1010ff00     ................
   d8380:	14f010f0 00fc1414 00f71414 ff0000ff     ................
   d8390:	1414ff00 14fc04f4 1f101714 101f1010     ................
   d83a0:	1414141f 1010001f 0000f010 101f0000     ................
   d83b0:	1f101010 10101010 000010f0 1010ff00     ................
   d83c0:	10101010 ff101010 00000010 000014ff     ................
   d83d0:	00ff00ff 17101f00 04fc0000 171414f4     ................
   d83e0:	14141710 00f404f4 f700ff00 14141414     ................
   d83f0:	f7141414 1414f700 10141714 1f101f10     ................
   d8400:	f4141414 f0101014 0000f010 001f101f     ................
   d8410:	141f0000 fc000000 f0000014 1010f010     ................
   d8420:	14ff10ff 14ff1414 1f101010 00000000     ................
   d8430:	ffff10f0 f0ffffff f0f0f0f0 00ffffff     ................
   d8440:	00000000 0f0fffff 380f0f0f 44384444     ...........8DD8D
   d8450:	3e2a2a7c 02027e14 7e020606 63027e02     |**>.~.....~.~.c
   d8460:	63414955 3c444438 207e4004 0206201e     UIAc8DD<.@~ . ..
   d8470:	9902027e 99a5e7a5 2a492a1c 01724c1c     ~........*I*.Lr.
   d8480:	4a304c72 30304d4d 30487848 465a62bc     rL0JMM00HxH0.bZF
   d8490:	49493e3d 017e0049 2a7e0101 2a2a2a2a     =>III.~...~*****
   d84a0:	445f4444 4a514044 44404044 0040514a     DD_DD@QJD@@DJQ@.
   d84b0:	0301ff00 00ff80e0 6b080800 1236086b     ...........kk.6.
   d84c0:	06362436 060f090f 18180000 10000000     6$6.............
   d84d0:	40300010 000101ff 1e01011f 171d1900     ..0@............
   d84e0:	3c3c0012 00003c3c 00000000              ..<<<<......

000d84ec <_ZTV12Adafruit_GFX>:
	...
   d84fc:	000d5341 000d6fa9 000d40a1 000d5059     AS...o...@..YP..
   d850c:	000d517d 000d5199 000d5115 000d51b3     }Q...Q...Q...Q..
   d851c:	000d51e9 000d5205                       .Q...R..

000d8524 <_ZTVN5spark13EthernetClassE>:
	...
   d852c:	000d5a77 000d5a6d 000d5a63 000d5a59     wZ..mZ..cZ..YZ..
   d853c:	000d5a4d 000d5a41 000d76a5 000d76ad     MZ..AZ...v...v..
   d854c:	000d5a35 000d5a2d 000d5a23 000d5a19     5Z..-Z..#Z...Z..
   d855c:	000d76dd                                .v..

000d8560 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d8560:	18100800 38302820 69726977 622e676e     .... (08wiring.b
   d8570:	5300656c 74726174 73696420 65766f63     le.Start discove
   d8580:	676e6972 72657320 65636976 50002e73     ring services..P
   d8590:	20726565 69766564 69206563 696d2073     eer device is mi
   d85a0:	6e697373 46002167 656c6961 6f742064     ssing!.Failed to
   d85b0:	70706120 20646e65 72656570 6e654320      append peer Cen
   d85c0:	6c617274 76656420 2e656369 6e6f4300     tral device..Con
   d85d0:	7463656e 62206465 65432079 6172746e     nected by Centra
   d85e0:	6564206c 65636976 6944002e 6e6f6373     l device..Discon
   d85f0:	7463656e 62206465 65722079 65746f6d     nected by remote
   d8600:	76656420 2e656369 70754400 6163696c      device..Duplica
   d8610:	20646574 72616863 65746361 74736972     ted characterist
   d8620:	63206369 6f6e6e61 65622074 64646120     ic cannot be add
   d8630:	002e6465 6c696146 74206465 7061206f     ed..Failed to ap
   d8640:	646e6570 636f6c20 63206c61 61726168     pend local chara
   d8650:	72657463 69747369 00002e63              cteristic...

000d865c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8664:	000d5d31 000d5d95 000d5f4b 000d5dbf     1]...]..K_...]..
   d8674:	000d5d35                                5]..

000d8678 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8680:	000d5d2d 000d5da3 000d5d2f 000d5dc3     -]...]../]...]..
   d8690:	000d5d55                                U]..

000d8694 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d869c:	000d5d2b 000d5db1 000d6715 000d5dc7     +]...]...g...]..
   d86ac:	000d5d75 5f9b34fb 80000080 00001000     u]...4._........
   d86bc:	00000000                                ....

000d86c0 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d86c0:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000d86d0 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d86d0:	5f9b34fb 80000080 00001000 00000000     .4._............
   d86e0:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   d86f0:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000d8700 <_ZTV9IPAddress>:
	...
   d8708:	000d7269 000d7259 000d725b              ir..Yr..[r..

000d8714 <_ZTV9USBSerial>:
	...
   d871c:	000d7349 000d73b1 000d7387 000d6fa9     Is...s...s...o..
   d872c:	000d7379 000d734b 000d735b 000d73ab     ys..Ks..[s...s..
   d873c:	000d736b 000d7345                       ks..Es..

000d8744 <_ZTV11USARTSerial>:
	...
   d874c:	000d7455 000d74c1 000d7499 000d6fa9     Ut...t...t...o..
   d875c:	000d7469 000d7485 000d7477 000d7493     it...t..wt...t..
   d876c:	000d7457 000d745b                       Wt..[t..

000d8774 <_ZTV7TwoWire>:
	...
   d877c:	000d7551 000d759b 000d7573 000d7553     Qu...u..su..Su..
   d878c:	000d757b 000d7583 000d758b 000d7593     {u...u...u...u..

000d879c <_ZTVN5spark9WiFiClassE>:
	...
   d87a4:	000d7647 000d763d 000d7633 000d75f5     Gv..=v..3v...u..
   d87b4:	000d70b5 000d7627 000d76a5 000d76ad     .p..'v...v...v..
   d87c4:	000d761b 000d7613 000d7609 000d75ff     .v...v...v...u..
   d87d4:	000d76dd                                .v..

000d87d8 <_ZTVN5spark12NetworkClassE>:
	...
   d87e0:	000d7665 000d766f 000d7679 000d7683     ev..ov..yv...v..
   d87f0:	000d768d 000d7699 000d76a5 000d76ad     .v...v...v...v..
   d8800:	000d76b5 000d76c1 000d76c9 000d76d3     .v...v...v...v..
   d8810:	000d76dd                                .v..

000d8814 <_ZSt7nothrow>:
	...

000d8815 <_ZTSSt19_Sp_make_shared_tag>:
   d8815:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d8825:	5f646572 00676174                        red_tag....

000d8830 <_ZTISt19_Sp_make_shared_tag>:
   d8830:	000d8870 000d8815                       p.......

000d8838 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d8838:	000d88d0 000d8844 000d88f4              ....D.......

000d8844 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d8844:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d8854:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d8864:	00000045                                E...

000d8868 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d8868:	00000000 000d8838 000d79fd 000d7a11     ....8....y...z..
   d8878:	000d7ba5 000d7ba5 000d7a7b 000d79bd     .{...{..{z...y..
   d8888:	000d7a63 000d7a25 000d79f1              cz..%z...y..

000d8894 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d8894:	000d88d0 000d88a0 000d8838              ........8...

000d88a0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d88a0:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d88b0:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d88c0:	456f666e 00000000                       nfoE....

000d88c8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d88c8:	00000000 000d8894 000d7aa5 000d7ab9     .........z...z..
   d88d8:	000d7ba5 000d7ba5 000d7a7b 000d79bd     .{...{..{z...y..
   d88e8:	000d7b79 000d7b05 000d7acd              y{...{...z..

000d88f4 <_ZTISt9type_info>:
   d88f4:	000d8870 000d88fc                       p.......

000d88fc <_ZTSSt9type_info>:
   d88fc:	74397453 5f657079 6f666e69               St9type_info.

000d8909 <_ctype_>:
   d8909:	20202000 20202020 28282020 20282828     .         ((((( 
   d8919:	20202020 20202020 20202020 20202020                     
   d8929:	10108820 10101010 10101010 10101010      ...............
   d8939:	04040410 04040404 10040404 10101010     ................
   d8949:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d8959:	01010101 01010101 01010101 10101010     ................
   d8969:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d8979:	02020202 02020202 02020202 10101010     ................
   d8989:	00000020 00000000 00000000 00000000      ...............
	...

000d8a0a <link_const_variable_data_end>:
	...

000d8a0c <link_constructors_location>:
   d8a0c:	000d40f9 	.word	0x000d40f9
   d8a10:	000d4379 	.word	0x000d4379
   d8a14:	000d448d 	.word	0x000d448d
   d8a18:	000d455d 	.word	0x000d455d
   d8a1c:	000d48fd 	.word	0x000d48fd
   d8a20:	000d5a81 	.word	0x000d5a81
   d8a24:	000d5c0d 	.word	0x000d5c0d
   d8a28:	000d6f81 	.word	0x000d6f81
   d8a2c:	000d70c1 	.word	0x000d70c1
   d8a30:	000d70d1 	.word	0x000d70d1
   d8a34:	000d7119 	.word	0x000d7119
   d8a38:	000d7651 	.word	0x000d7651
   d8a3c:	000d77bd 	.word	0x000d77bd
